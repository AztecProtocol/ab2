pub mod utils;

pub global THRESHOLD: u32 = 550;

use utils::{Descriptor, get_euclidean_distance};

pub fn verify_biometric(actual: Descriptor, given: Descriptor) -> (u32, bool) {
    let distance = get_euclidean_distance(actual, given);
    (distance, distance <= THRESHOLD)
}

#[test]
fn test_valid() {
    let actual: [i32; 128] = [
        -69, 91, 34, -59, -36, -111, 10, -92, 109, -87, 194, 20, -278, -81, 46, 107,
        -106, -137, -168, -87, 42, -98, 155, -17, -187, -339, -130, -82, 29, -115,
        -10, -16, -166, -106, -54, 50, -69, -28, 242, 11, -197, 79, 25, 239, 308, 15,
        78, -43, 15, -284, 69, 90, 112, 79, 76, -71, 14, 86, -192, 47, 115, -99, -59,
        -30, 176, 103, -143, -90, 122, -175, -25, 19, -122, -151, -346, 61, 312, 169,
        -103, 15, -145, 40, -9, -51, -126, -21, -107, 94, 120, -55, -83, 163, -10, 95,
        47, 123, -161, -20, -161, 54, 60, -139, 62, 81, -105, 140, -58, -19, -25, 69,
        -162, -50, 110, -214, 213, 304, -25, 52, 173, 17, -38, 80, -143, -40, 9, 30,
        122, 79
    ];

    let given : [i32; 128] = [
        -91, 141, 56, -52, -36, -40, 10, -90, 102, -61, 201, 77, -265, -50, 8, 84,
        -119, -143, -155, -98, 123, -49, 123, -80, -278, -306, -131, -108, 5, -93, 53,
        -45, -133, -23, -22, 29, -90, -18, 265, 39, -209, 71, 39, 272, 296, 12, 89,
        -47, 2, -269, 125, 110, 103, 90, 110, -107, 8, 120, -231, 41, 89, -147, -57,
        -7, 159, 126, -150, -93, 178, -165, -36, -1, -126, -170, -360, 60, 343, 172,
        -102, 36, -99, 32, 6, 8, -161, 8, -74, 98, 119, -49, -81, 207, -2, 27, 69, 82,
        -155, -45, -143, 31, 2, -149, 66, 119, -142, 126, -49, -48, -85, 2, -143, -38,
        123, -237, 177, 288, -14, 96, 204, -11, 0, 61, -193, 1, 7, 14, 103, 93
    ];

    let (distance, valid) = verify_biometric(actual, given);
    println(f"Distance: {distance}");
    println(f"Valid: {valid}");
}
