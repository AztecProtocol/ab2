{"noir_version":"0.35.0+2a0d211b92d002fa75855d4ba27267f8892dd52c","hash":17714986211656897714,"abi":{"parameters":[{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"public"},{"name":"jwt","type":{"kind":"array","length":386,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"secret_key","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"header_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"payload_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"signature_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"5447761253536668537":{"error_kind":"fmtstring","length":53,"item_types":[{"kind":"integer","sign":"unsigned","width":8},{"kind":"integer","sign":"unsigned","width":32}]}}},"bytecode":"","debug_symbols":"","file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n","path":"std/array/mod.nr"},"6":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(s, quote { Eq }, signature, for_each_field, quote { & }, body)\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v1 } else { v2 }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v2 } else { v1 }\n}\n\nmod cmp_tests {\n    use crate::cmp::{min, max};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"13":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U where T: From<U> {\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n","path":"std/convert.nr"},"25":{"source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"26":{"source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n","path":"std/field/mod.nr"},"34":{"source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"35":{"source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u32, msg_start: u32) -> ([u8; 64], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if crate::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..BLOCK_SIZE {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..BLOCK_SIZE {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; 64],\n    mut msg_byte_ptr: u32\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; BLOCK_SIZE], msg_byte_ptr: u32, message_size: u32) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d, 0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0, 0x8f, 0xfe, 0x73, 0x2b\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94, 24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154, 60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213, 165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97, 103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186, 55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253, 179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9, 236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214, 72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107, 218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198, 149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126, 32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36, 137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59, 245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97, 3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180, 170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216, 116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70, 86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246, 215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193, 104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74, 134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210, 188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210, 186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69, 79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22, 121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175, 169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53, 101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200, 157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86, 119, 30, 63, 129, 143, 32, 96\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n","path":"std/hash/sha256.nr"},"70":{"source":"pub global INVALID_VALUE: u8 = 255;\npub global MAX_MESSAGE_LENGTH: u32 = 256;\npub global MAX_MESSAGE_LENGTH_URL: u32 = 64;\npub global MAX_OUTPUT_LENGTH: u32 = ((MAX_MESSAGE_LENGTH * 3) / 4);\npub global MAX_OUTPUT_LENGTH_URL: u32 = ((MAX_MESSAGE_LENGTH_URL * 3) / 4);\n\nstruct Base64DecodeBE {\n    table: [u8; 256]\n}\n\nimpl Base64DecodeBE {\n    /// Creates a new decoder that uses the standard Base64 Alphabet (base64) specified in RFC 4648\n    /// https://datatracker.ietf.org/doc/html/rfc4648#section-4\n    fn new() -> Self {\n        Base64DecodeBE {\n            table: [\n                // 0-42\n                INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE,\n                INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE,\n                INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE,\n                INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE,\n                INVALID_VALUE, INVALID_VALUE, INVALID_VALUE,\n                62,// 43\n                INVALID_VALUE, INVALID_VALUE, INVALID_VALUE,// 44-46\n                63,// 47\n                52, 53, 54, 55, 56, 57, 58, 59, 60, 61,// 48-57\n                INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE,// 58-64\n                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,// 65-90 (A-Z)\n                INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE,// 91-96\n                26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,// 97-122 (a-z)\n                // 123-255\nn            ]\n        }\n    }\n\n    fn get(self, idx: Field) -> u8 {\n        self.table[idx]\n    }\n}\n\nstruct Base64URLDecodeBE {\n    table: [u8; 256]\n}\n\nimpl Base64URLDecodeBE {\n    /// Creates a new decoder that uses the standard Base64 with URL and Filename safe (base64) specified in RFC 4648\n    /// https://datatracker.ietf.org/doc/html/rfc4648#page-7\n    fn new() -> Self {\n        Base64URLDecodeBE {\n            table: [\n                // 0-42\n                INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE,\n                INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE,\n                INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE,\n                INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE,\n                INVALID_VALUE, INVALID_VALUE, INVALID_VALUE,\n                INVALID_VALUE, INVALID_VALUE,\n                62,// 45\n                INVALID_VALUE, INVALID_VALUE,\n                52, 53, 54, 55, 56, 57, 58, 59, 60, 61,// 48-57\n                INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE,// 58-64\n                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,// 65-90 (A-Z)\n                INVALID_VALUE, INVALID_VALUE, INVALID_VALUE, INVALID_VALUE,// 91-94\n                63,// 95\n                INVALID_VALUE,// 96\n                26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,// 97-122 (a-z)\n                // 123-255\nn            ]\n        }\n    }\n\n    fn get(self, idx: Field) -> u8 {\n        self.table[idx]\n    }\n}\n\npub fn base64_decode_elements(input: [u8; MAX_MESSAGE_LENGTH], length: u32) -> [u8; MAX_MESSAGE_LENGTH] {\n    let mut Base64Decoder = Base64DecodeBE::new();\n\n    let mut result: [u8; MAX_MESSAGE_LENGTH] = [32; MAX_MESSAGE_LENGTH]; // Whitespace Pad\n\n    for i in 0..MAX_MESSAGE_LENGTH {\n        if (i < length) {\n            let input_byte = input[i];\n            result[i] = Base64Decoder.get(input_byte as Field);\n            assert(result[i] != INVALID_VALUE, f\"DecodeError: invalid symbol {input_byte}, offset {i}.\");\n        }\n    }\n    result\n}\n\npub fn base64_decode(input: [u8; MAX_MESSAGE_LENGTH], length: u32) -> [u8; MAX_OUTPUT_LENGTH] {\n    let decoded: [u8; MAX_MESSAGE_LENGTH] = base64_decode_elements(input, length);\n    let mut result: [u8; MAX_OUTPUT_LENGTH] = [32; MAX_OUTPUT_LENGTH];\n    let out_len = (length * 3) / 4;\n    let BASE64_ELEMENTS_PER_CHUNK: u32 = 40;\n    let BYTES_PER_CHUNK: u32 = 30;\n    let num_chunks = (length / BASE64_ELEMENTS_PER_CHUNK)\n        + (length % BASE64_ELEMENTS_PER_CHUNK != 0) as u32;\n\n    if num_chunks > 0 {\n        for i in 0..num_chunks - 1 {\n            let mut slice: Field = 0;\n            for j in 0..BASE64_ELEMENTS_PER_CHUNK {\n                slice *= 64;\n                slice += decoded[i * BASE64_ELEMENTS_PER_CHUNK + j] as Field;\n            }\n            let slice_bytes: [u8; 30] = slice.to_be_bytes();\n            for j in 0..BYTES_PER_CHUNK {\n                result[i * BYTES_PER_CHUNK + j] = slice_bytes[j];\n            }\n        }\n\n        let base64_elements_in_final_chunk = length - ((num_chunks - 1) * BASE64_ELEMENTS_PER_CHUNK);\n\n        let mut slice: Field = 0;\n        for j in 0..base64_elements_in_final_chunk {\n            slice *= 64;\n            slice += decoded[(num_chunks - 1) * BASE64_ELEMENTS_PER_CHUNK + j] as Field;\n        }\n        for _ in base64_elements_in_final_chunk..BASE64_ELEMENTS_PER_CHUNK {\n            slice *= 64;\n        }\n        let slice_bytes: [u8; 30] = slice.to_be_bytes();\n        let num_bytes_in_final_chunk = out_len - ((num_chunks - 1) * BYTES_PER_CHUNK);\n        for i in 0..num_bytes_in_final_chunk {\n            result[(num_chunks - 1) * BYTES_PER_CHUNK + i] = slice_bytes[i];\n        }\n    }\n\n    result\n}\n\npub fn base64_url_decode_elements(\n    input: [u8; MAX_MESSAGE_LENGTH_URL],\n    length: u32\n) -> [u8; MAX_MESSAGE_LENGTH_URL] {\n    let mut Base64URLDecoder = Base64URLDecodeBE::new();\n\n    let mut result: [u8; MAX_MESSAGE_LENGTH_URL] = [0; MAX_MESSAGE_LENGTH_URL];\n\n    for i in 0..MAX_MESSAGE_LENGTH_URL {\n        if (i < length) {\n            let input_byte = input[i];\n            result[i] = Base64URLDecoder.get(input_byte as Field);\n            assert(result[i] != INVALID_VALUE, f\"DecodeError: invalid symbol {input_byte}, offset {i}.\");\n        }\n    }\n    result\n}\n\npub fn base64_url_decode(\n    input: [u8; MAX_MESSAGE_LENGTH_URL],\n    length: u32\n) -> [u8; MAX_OUTPUT_LENGTH_URL] {\n    let decoded: [u8; MAX_MESSAGE_LENGTH_URL] = base64_url_decode_elements(input, length);\n    let mut result: [u8; MAX_OUTPUT_LENGTH_URL] = [0; MAX_OUTPUT_LENGTH_URL];\n    let BASE64_ELEMENTS_PER_CHUNK: u32 = 40;\n    let BYTES_PER_CHUNK: u32 = 30;\n    let num_chunks = (MAX_MESSAGE_LENGTH_URL / BASE64_ELEMENTS_PER_CHUNK)\n        + (MAX_MESSAGE_LENGTH_URL % BASE64_ELEMENTS_PER_CHUNK != 0) as u32;\n\n    if num_chunks > 0 {\n        for i in 0..num_chunks - 1 {\n            let mut slice: Field = 0;\n            for j in 0..BASE64_ELEMENTS_PER_CHUNK {\n                slice *= 64;\n                slice += decoded[i * BASE64_ELEMENTS_PER_CHUNK + j] as Field;\n            }\n            let slice_bytes: [u8; 30] = slice.to_be_bytes();\n            for j in 0..BYTES_PER_CHUNK {\n                result[i * BYTES_PER_CHUNK + j] = slice_bytes[j];\n            }\n        }\n\n        let base64_elements_in_final_chunk = MAX_MESSAGE_LENGTH_URL - ((num_chunks - 1) * BASE64_ELEMENTS_PER_CHUNK);\n\n        let mut slice: Field = 0;\n        for j in 0..base64_elements_in_final_chunk {\n            slice *= 64;\n            slice += decoded[(num_chunks - 1) * BASE64_ELEMENTS_PER_CHUNK + j] as Field;\n        }\n        for _ in base64_elements_in_final_chunk..BASE64_ELEMENTS_PER_CHUNK {\n            slice *= 64;\n        }\n        let slice_bytes: [u8; 30] = slice.to_be_bytes();\n        let num_bytes_in_final_chunk = MAX_OUTPUT_LENGTH_URL - ((num_chunks - 1) * BYTES_PER_CHUNK);\n        for i in 0..num_bytes_in_final_chunk {\n            result[(num_chunks - 1) * BYTES_PER_CHUNK + i] = slice_bytes[i];\n        }\n    }\n\n    result\n}\n","path":"/Users/envoy1084/Projects/Core/ab2/Aztec-Passport/packages/crates/kyc_age_verify/src/base64.nr"},"71":{"source":"use crate::base64::base64_url_decode;\nuse crate::hmac::hmac_sha256;\n\npub global MAX_HEADER_LENGTH: u32 = 64;\npub global MAX_PAYLOAD_LENGTH: u32 = 256;\npub global MAX_SIGNATURE_LENGTH: u32 = 64;\n\n// Header + . + Payload + . + Signature\npub type JWT = [u8; MAX_HEADER_LENGTH + 1 + MAX_PAYLOAD_LENGTH + 1 + MAX_SIGNATURE_LENGTH];\npub type Header = [u8; MAX_HEADER_LENGTH];\npub type Payload = [u8; MAX_PAYLOAD_LENGTH];\npub type Signature = [u8; MAX_SIGNATURE_LENGTH];\npub type SecretKey = [u8; 64];\n\npub fn split_jwt(\n    jwt: JWT,\n    header_length: u32,\n    payload_length: u32,\n    signature_length: u32\n) -> (Header, Payload, Signature) {\n    let mut header = [0; MAX_HEADER_LENGTH];\n    let mut payload = [32; MAX_PAYLOAD_LENGTH]; // Fill with Whitespaces\n    let mut signature = [0; MAX_SIGNATURE_LENGTH];\n\n    let header_start = 0;\n    let header_end = header_length;\n    let payload_start = MAX_HEADER_LENGTH + 1;\n    let payload_end = payload_start + payload_length;\n    let signature_start = MAX_HEADER_LENGTH + 1 + MAX_PAYLOAD_LENGTH + 1;\n    let signature_end = signature_start + signature_length;\n\n    for i in header_start..header_end {\n        header[i] = jwt[i];\n    }\n\n    for i in payload_start..payload_end {\n        payload[i - payload_start] = jwt[i];\n    }\n\n    for i in signature_start..signature_end {\n        signature[i - signature_start] = jwt[i];\n    }\n\n    (header, payload, signature)\n}\n\npub fn verify_jwt(\n    jwt: JWT,\n    secret_key: SecretKey,\n    header_length: u32,\n    payload_length: u32,\n    signature_length: u32\n) -> (bool, Payload) {\n    // Step 1: Split the JWT (header.payload.signature)\n    let (encoded_header,encoded_payload, encoded_signature): (Header,Payload,Signature) = split_jwt(jwt, header_length, payload_length, signature_length);\n\n    // Step 2: Base64 decode the Signature\n    let decoded_signature= base64_url_decode(encoded_signature, signature_length);\n\n    // Step 3: Create the signing input\n    let input_length: u32 = header_length + 1 + payload_length;\n    // header + . + payload\n    let mut signing_input: [u8; MAX_HEADER_LENGTH + 1 + MAX_PAYLOAD_LENGTH] = [0; MAX_HEADER_LENGTH + 1 + MAX_PAYLOAD_LENGTH];\n\n    for i in 0..header_length {\n        signing_input[i] = encoded_header[i];\n    }\n\n    signing_input[header_length] = 46; // ASCII value of .\n    for i in 0..payload_length {\n        signing_input[header_length + 1 + i] = encoded_payload[i];\n    }\n\n    // Step 4: Compute HMAC of the signing input and Secret Key\n    let hmac_signature: [u8; 32] = hmac_sha256(secret_key, signing_input, input_length as u64);\n\n    let  mut verified: bool = true;\n\n    for i in 0..32 {\n        if hmac_signature[i] != decoded_signature[i] {\n            verified = false;\n        }\n    }\n\n    (verified, encoded_payload)\n}\n","path":"/Users/envoy1084/Projects/Core/ab2/Aztec-Passport/packages/crates/kyc_age_verify/src/jwt.nr"},"72":{"source":"use std::hash::sha256::{sha256_var, sha256};\n\npub fn xor_key(key: [u8; 64], pad_byte: u8) -> [u8; 64] {\n    let mut result: [u8; 64] = [0 as u8; 64];\n    for i in 0..64 {\n        result[i] = key[i] ^ pad_byte;\n    }\n    result\n}\n\npub fn hmac_sha256<let M: u32>(key: [u8; 64], message: [u8; M], length: u64) -> [u8; 32] {\n    let inner_key_pad: [u8; 64] = xor_key(key, 0x36);\n    let outer_key_pad: [u8; 64] = xor_key(key, 0x5C);\n\n    // Step 3: Perform the inner hash (SHA256(key XOR ipad || message))\n    let inner_input: [u8; M + 64] = inner_key_pad.concat(message);\n    let inner_hash: [u8; 32] = sha256_var(inner_input, length + 64);\n\n    // Step 4: Perform the outer hash (SHA256(key XOR opad || inner_hash))\n    let outer_input: [u8; 64 + 32] = outer_key_pad.concat(inner_hash);\n    let hmac_result: [u8; 32] = sha256(outer_input);\n\n    hmac_result\n}\n\ntrait ArrayExtentions {\n    fn concat<let N: u32>(self, other: [u8; N]) -> [u8; N + 64];\n}\n\nimpl ArrayExtentions for [u8; 64] {\n    fn concat<let N: u32>(self, other: [u8; N]) -> [u8; N + 64] {\n        let mut result: [u8; N + 64] = [0 as u8; N + 64];\n        for i in 0..64 {\n            result[i] = self[i];\n        }\n        for i in 0..N {\n            result[i + 64] = other[i];\n        }\n        result\n    }\n}\n","path":"/Users/envoy1084/Projects/Core/ab2/Aztec-Passport/packages/crates/kyc_age_verify/src/hmac.nr"},"73":{"source":"pub mod jwt;\npub mod base64;\npub mod hmac;\nuse base64::base64_decode;\n\nuse jwt::{JWT, Payload, SecretKey, verify_jwt, split_jwt};\nuse json::JSON1kb::JSON;\n\npub global EIGHTEEN_YEARS_IN_SECONDS: u64 = 18 * 365 * 24 * 60 * 60;\n\nunconstrained pub fn main(\n    timestamp: pub u64,\n    jwt: JWT,\n    secret_key: SecretKey,\n    header_length: u32,\n    payload_length: u32,\n    signature_length: u32\n) -> pub bool {\n    let (verified, payload): (bool, Payload) = verify_jwt(jwt, secret_key, header_length, payload_length, signature_length);\n    let decoded = base64_decode(payload, payload_length);\n    assert(verified, \"JWT verification failed\");\n    let json: JSON = JSON::parse_json(decoded);\n    let birthdate = json.get_number_unchecked(\"birthdate\".as_bytes());\n    let is_above_eighteen = timestamp - EIGHTEEN_YEARS_IN_SECONDS > birthdate;\n    assert(is_above_eighteen, \"Not above 18 years old\");\n    true\n}\n\n#[test]\nfn test_valid_jwt() {\n    let header = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\".as_bytes();\n    let payload = \"eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJiaXJ0aGRhdGUiOjEwOTg2NDE2MDN9\".as_bytes();\n\n    let signature = \"MFLNcbOEVB4lFSvMIP-RKXXYCphJC22SmS07iX0RM6k\".as_bytes();\n\n    let mut padded_header = [0; 64];\n    let mut padded_payload = [0; 256];\n    let mut padded_signature = [0; 64];\n\n    let mut jwt = [0; 64 + 1 + 256 + 1 + 64];\n\n    for i in 0..header.len() {\n        padded_header[i] = header[i];\n    }\n    for i in 0..payload.len() {\n        padded_payload[i] = payload[i];\n    }\n    for i in 0..signature.len() {\n        padded_signature[i] = signature[i];\n    }\n\n    for i in 0..padded_header.len() {\n        jwt[i] = padded_header[i];\n    }\n\n    jwt[64] = 46;\n\n    for i in 0..padded_payload.len() {\n        jwt[64 + 1 + i] = padded_payload[i];\n    }\n\n    jwt[64 + 1 + 256] = 46;\n\n    for i in 0..padded_signature.len() {\n        jwt[64 + 1 + 256 + 1 + i] = padded_signature[i];\n    }\n\n    let mut secret_key = [0; 64];\n    let key = \"secret_key\".as_bytes();\n    for i in 0..key.len() {\n        secret_key[i] = key[i];\n    }\n\n    unsafe {\n        main(\n            1729793701,\n            jwt,\n            secret_key,\n            header.len(),\n            payload.len(),\n            signature.len()\n        )\n    };\n}\n","path":"/Users/envoy1084/Projects/Core/ab2/Aztec-Passport/packages/crates/kyc_age_verify/src/main.nr"},"74":{"source":"mod _table_generation;\nmod enums;\nmod json;\nmod json_tables;\nmod keymap;\nmod json_entry;\nmod transcript_entry;\nmod _string_tools;\nmod _comparison_tools;\nmod token_flags;\nmod getters;\nmod keyhash;\nmod get_string;\nmod get_number;\nmod get_literal;\nmod get_object;\nmod get_array;\n\nuse crate::json::JSON;\nuse crate::json::JSONValue;\nuse crate::json_entry::JSONEntryPacked;\nuse crate::json_entry::JSONEntry;\nuse crate::_string_tools::slice_packed_field::slice_fields;\nuse crate::get_literal::JSONLiteral;\n\ntrait JSONParserTrait\n{\n    fn parse_json_from_string<let StringBytes: u32>(s: str<StringBytes>) -> Self;\n    fn parse_json<let StringBytes: u32>(s: [u8; StringBytes]) -> Self;\n    fn get_length(self) -> u32;\n    fn get_array<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<Self>;\n    fn get_array_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Self;\n    fn get_array_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<Self>;\n    fn get_array_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Self;\n    fn get_array_from_array(self, array_index: Field) -> Option<Self>;\n    fn get_array_from_array_unchecked(self, array_index: Field) -> Self;\n    fn map<U, let MaxElements: u32, let MaxElementBytes: u32>(self, f: fn(JSONValue<MaxElementBytes>) -> U) -> [U; MaxElements] where U: std::default::Default;\n    fn get_object<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<Self>;\n    fn get_object_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Self;\n    fn get_object_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<Self>;\n    fn get_object_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Self;\n    fn get_object_from_array(self, array_index: Field) -> Option<Self>;\n    fn get_object_from_array_unchecked(self, array_index: Field) -> Self;\n    fn get_literal<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<JSONLiteral>;\n    fn get_literal_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> JSONLiteral;\n    fn get_literal_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<JSONLiteral>;\n    fn get_literal_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> JSONLiteral;\n    fn get_literal_from_array(self, array_index: Field) -> Option<JSONLiteral>;\n    fn get_literal_from_array_unchecked(self, array_index: Field) -> JSONLiteral;\n    fn get_number<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<u64>;\n    fn get_number_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> u64;\n    fn get_number_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<u64>;\n    fn get_number_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> u64;\n    fn get_number_from_array(self, array_index: Field) -> Option<u64>;\n    fn get_number_from_array_unchecked(self, array_index: Field) -> u64;\n    fn get_string<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> Option<BoundedVec<u8, StringBytes>>;\n    fn get_string_unchecked<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> BoundedVec<u8, StringBytes>;\n    fn get_string_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<BoundedVec<u8, StringBytes>>;\n    fn get_string_unchecked_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> BoundedVec<u8, StringBytes>;\n    fn get_string_from_array<let StringBytes: u32>(self, array_index: Field) -> Option<BoundedVec<u8, StringBytes>>;\n    fn get_string_from_array_unchecked<let StringBytes: u32>(self, array_index: Field) -> BoundedVec<u8, StringBytes>;\n    fn get_string_from_path<let KeyBytes: u32, let StringBytes: u32, let PathDepth: u32>(self, keys: [BoundedVec<u8, KeyBytes>; PathDepth]) -> Option<BoundedVec<u8, StringBytes>>;\n    fn get_value<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> Option<JSONValue<StringBytes>>;\n    fn get_value_unchecked<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> JSONValue<StringBytes>;\n    fn get_value_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<JSONValue<StringBytes>>;\n    fn get_value_unchecked_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> JSONValue<StringBytes>;\n    fn get_value_from_array<let StringBytes: u32>(self, array_index: Field) -> Option<JSONValue<StringBytes>>;\n    fn get_value_from_array_unchecked<let StringBytes: u32>(self, array_index: Field) -> JSONValue<StringBytes>;\n    fn get_value_from_path<let KeyBytes: u32, let StringBytes: u32, let PathDepth: u32>(self,keys: [BoundedVec<u8, KeyBytes>; PathDepth]) -> Option<JSONValue<StringBytes>>;\n    fn key_exists<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> bool;\n    fn get_keys_at_root<let MaxNumKeys: u32, let MaxKeyBytes: u32>(self) -> BoundedVec<BoundedVec<u8, MaxKeyBytes>, MaxNumKeys>;\n}\n\nmod JSON512b {\n    struct JSON\n    {\n        inner: crate::json::JSON<512, 20, 64, 33, 2>\n    }\n\n    impl JSON {\n        fn convert(inner: Option<crate::json::JSON<512, 20, 64, 33, 2>>) -> Option<Self> {\n            Option { _is_some: inner._is_some, _value: JSON { inner: inner._value } }\n        }\n    }\n    impl crate::JSONParserTrait for JSON {\n        fn parse_json_from_string<let StringBytes: u32>(s: str<StringBytes>) -> Self {\n            JSON { inner: crate::json::JSON::parse_json_from_string(s) }\n        }\n\n        fn parse_json<let StringBytes: u32>(s: [u8; StringBytes]) -> Self {\n            JSON { inner: crate::json::JSON::parse_json(s) }\n        }\n        fn get_length(self) -> u32 {\n            self.inner.get_length()\n        }\n        fn get_array<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<Self> {\n            JSON::convert(self.inner.get_array(key))\n        }\n        fn get_array_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Self {\n            JSON { inner: self.inner.get_array_unchecked(key) }\n        }\n        fn get_array_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<Self> {\n            {\n                JSON::convert(self.inner.get_array_var(key))\n            }\n        }\n        fn get_array_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Self {\n            JSON { inner: self.inner.get_array_unchecked_var(key) }\n        }\n        fn get_array_from_array(self, array_index: Field) -> Option<Self> {\n            JSON::convert(self.inner.get_array_from_array(array_index))\n        }\n        fn get_array_from_array_unchecked(self, array_index: Field) -> Self {\n            JSON { inner: self.inner.get_array_from_array_unchecked(array_index) }\n        }\n        fn map<U, let MaxElements: u32, let MaxElementBytes: u32>(\n            self,\n            f: fn(crate::JSONValue<MaxElementBytes>) -> U\n        ) -> [U; MaxElements] where U: std::default::Default {\n            self.inner.map(f)\n        }\n        fn get_object<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<Self> {\n            {\n                JSON::convert(self.inner.get_object(key))\n            }\n        }\n        fn get_object_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Self {\n            JSON { inner: self.inner.get_object_unchecked(key) }\n        }\n        fn get_object_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<Self> {\n            {\n                JSON::convert(self.inner.get_object_var(key))\n            }\n        }\n        fn get_object_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Self {\n            JSON { inner: self.inner.get_object_unchecked_var(key) }\n        }\n        fn get_object_from_array(self, array_index: Field) -> Option<Self> {\n            JSON::convert(self.inner.get_object_from_array(array_index))\n        }\n        fn get_object_from_array_unchecked(self, array_index: Field) -> Self {\n            JSON { inner: self.inner.get_object_from_array_unchecked(array_index) }\n        }\n        fn get_literal<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<crate::JSONLiteral> {\n            self.inner.get_literal(key)\n        }\n        fn get_literal_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> crate::JSONLiteral {\n            self.inner.get_literal_unchecked(key)\n        }\n        fn get_literal_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<crate::JSONLiteral> {\n            self.inner.get_literal_var(key)\n        }\n        fn get_literal_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> crate::JSONLiteral {\n            self.inner.get_literal_unchecked_var(key)\n        }\n        fn get_literal_from_array(self, array_index: Field) -> Option<crate::JSONLiteral> {\n            self.inner.get_literal_from_array(array_index)\n        }\n        fn get_literal_from_array_unchecked(self, array_index: Field) -> crate::JSONLiteral {\n            self.inner.get_literal_from_array_unchecked(array_index)\n        }\n        fn get_number<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<u64> {\n            self.inner.get_number(key)\n        }\n        fn get_number_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> u64 {\n            self.inner.get_number_unchecked(key)\n        }\n        fn get_number_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<u64> {\n            self.inner.get_number_var(key)\n        }\n        fn get_number_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> u64 {\n            self.inner.get_number_unchecked_var(key)\n        }\n        fn get_number_from_array(self, array_index: Field) -> Option<u64> {\n            self.inner.get_number_from_array(array_index)\n        }\n        fn get_number_from_array_unchecked(self, array_index: Field) -> u64 {\n            self.inner.get_number_from_array_unchecked(array_index)\n        }\n\n        fn get_string<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string(key)\n        }\n        fn get_string_unchecked<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> BoundedVec<u8, StringBytes> {\n            self.inner.get_string_unchecked(key)\n        }\n        fn get_string_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string_var(key)\n        }\n        fn get_string_unchecked_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> BoundedVec<u8, StringBytes> {\n            self.inner.get_string_unchecked_var(key)\n        }\n        fn get_string_from_array<let StringBytes: u32>(self, array_index: Field) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string_from_array(array_index)\n        }\n        fn get_string_from_array_unchecked<let StringBytes: u32>(self, array_index: Field) -> BoundedVec<u8, StringBytes> {\n            self.inner.get_string_from_array_unchecked(array_index)\n        }\n        fn get_string_from_path<let KeyBytes: u32, let StringBytes: u32, let PathDepth: u32>(\n            self,\n            keys: [BoundedVec<u8, KeyBytes>; PathDepth]\n        ) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string_from_path(keys)\n        }\n        fn get_value<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value(key)\n        }\n        fn get_value_unchecked<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> crate::JSONValue<StringBytes> {\n            self.inner.get_value_unchecked(key)\n        }\n        fn get_value_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value_var(key)\n        }\n        fn get_value_unchecked_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> crate::JSONValue<StringBytes> {\n            self.inner.get_value_unchecked_var(key)\n        }\n        fn get_value_from_array<let StringBytes: u32>(self, array_index: Field) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value_from_array(array_index)\n        }\n        fn get_value_from_array_unchecked<let StringBytes: u32>(self, array_index: Field) -> crate::JSONValue<StringBytes> {\n            self.inner.get_value_from_array_unchecked(array_index)\n        }\n        fn get_value_from_path<let KeyBytes: u32, let StringBytes: u32, let PathDepth: u32>(\n            self,\n            keys: [BoundedVec<u8, KeyBytes>; PathDepth]\n        ) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value_from_path(keys)\n        }\n\n        fn key_exists<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> bool {\n            self.inner.key_exists(key)\n        }\n        fn get_keys_at_root<let MaxNumKeys: u32, let MaxKeyBytes: u32>(self) -> BoundedVec<BoundedVec<u8, MaxKeyBytes>, MaxNumKeys> {\n            self.inner.get_keys_at_root()\n        }\n    }\n}\n\nmod JSON1kb {\n    struct JSON\n    {\n        inner: crate::json::JSON<1024, 37, 128, 65, 2>\n    }\n    impl JSON {\n        fn convert(inner: Option<crate::json::JSON<1024, 37, 128, 65, 2>>) -> Option<Self> {\n            Option { _is_some: inner._is_some, _value: JSON { inner: inner._value } }\n        }\n    }\n    impl crate::JSONParserTrait for JSON {\n        fn parse_json_from_string<let StringBytes: u32>(s: str<StringBytes>) -> Self {\n            JSON { inner: crate::json::JSON::parse_json_from_string(s) }\n        }\n\n        fn parse_json<let StringBytes: u32>(s: [u8; StringBytes]) -> Self {\n            JSON { inner: crate::json::JSON::parse_json(s) }\n        }\n        fn get_length(self) -> u32 {\n            self.inner.get_length()\n        }\n        fn get_array<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<Self> {\n            JSON::convert(self.inner.get_array(key))\n        }\n        fn get_array_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Self {\n            JSON { inner: self.inner.get_array_unchecked(key) }\n        }\n        fn get_array_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<Self> {\n            {\n                JSON::convert(self.inner.get_array_var(key))\n            }\n        }\n        fn get_array_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Self {\n            JSON { inner: self.inner.get_array_unchecked_var(key) }\n        }\n        fn get_array_from_array(self, array_index: Field) -> Option<Self> {\n            JSON::convert(self.inner.get_array_from_array(array_index))\n        }\n        fn get_array_from_array_unchecked(self, array_index: Field) -> Self {\n            JSON { inner: self.inner.get_array_from_array_unchecked(array_index) }\n        }\n        fn map<U, let MaxElements: u32, let MaxElementBytes: u32>(\n            self,\n            f: fn(crate::JSONValue<MaxElementBytes>) -> U\n        ) -> [U; MaxElements] where U: std::default::Default {\n            self.inner.map(f)\n        }\n        fn get_object<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<Self> {\n            {\n                JSON::convert(self.inner.get_object(key))\n            }\n        }\n        fn get_object_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Self {\n            JSON { inner: self.inner.get_object_unchecked(key) }\n        }\n        fn get_object_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<Self> {\n            {\n                JSON::convert(self.inner.get_object_var(key))\n            }\n        }\n        fn get_object_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Self {\n            JSON { inner: self.inner.get_object_unchecked_var(key) }\n        }\n        fn get_object_from_array(self, array_index: Field) -> Option<Self> {\n            JSON::convert(self.inner.get_object_from_array(array_index))\n        }\n        fn get_object_from_array_unchecked(self, array_index: Field) -> Self {\n            JSON { inner: self.inner.get_object_from_array_unchecked(array_index) }\n        }\n        fn get_literal<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<crate::JSONLiteral> {\n            self.inner.get_literal(key)\n        }\n        fn get_literal_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> crate::JSONLiteral {\n            self.inner.get_literal_unchecked(key)\n        }\n        fn get_literal_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<crate::JSONLiteral> {\n            self.inner.get_literal_var(key)\n        }\n        fn get_literal_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> crate::JSONLiteral {\n            self.inner.get_literal_unchecked_var(key)\n        }\n        fn get_literal_from_array(self, array_index: Field) -> Option<crate::JSONLiteral> {\n            self.inner.get_literal_from_array(array_index)\n        }\n        fn get_literal_from_array_unchecked(self, array_index: Field) -> crate::JSONLiteral {\n            self.inner.get_literal_from_array_unchecked(array_index)\n        }\n        fn get_number<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<u64> {\n            self.inner.get_number(key)\n        }\n        fn get_number_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> u64 {\n            self.inner.get_number_unchecked(key)\n        }\n        fn get_number_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<u64> {\n            self.inner.get_number_var(key)\n        }\n        fn get_number_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> u64 {\n            self.inner.get_number_unchecked_var(key)\n        }\n        fn get_number_from_array(self, array_index: Field) -> Option<u64> {\n            self.inner.get_number_from_array(array_index)\n        }\n        fn get_number_from_array_unchecked(self, array_index: Field) -> u64 {\n            self.inner.get_number_from_array_unchecked(array_index)\n        }\n        fn get_string<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string(key)\n        }\n        fn get_string_unchecked<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> BoundedVec<u8, StringBytes> {\n            self.inner.get_string_unchecked(key)\n        }\n        fn get_string_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string_var(key)\n        }\n        fn get_string_unchecked_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> BoundedVec<u8, StringBytes> {\n            self.inner.get_string_unchecked_var(key)\n        }\n        fn get_string_from_array<let StringBytes: u32>(self, array_index: Field) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string_from_array(array_index)\n        }\n        fn get_string_from_array_unchecked<let StringBytes: u32>(self, array_index: Field) -> BoundedVec<u8, StringBytes> {\n            self.inner.get_string_from_array_unchecked(array_index)\n        }\n        fn get_string_from_path<let KeyBytes: u32, let StringBytes: u32, let PathDepth: u32>(\n            self,\n            keys: [BoundedVec<u8, KeyBytes>; PathDepth]\n        ) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string_from_path(keys)\n        }\n        fn get_value<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value(key)\n        }\n        fn get_value_unchecked<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> crate::JSONValue<StringBytes> {\n            self.inner.get_value_unchecked(key)\n        }\n        fn get_value_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value_var(key)\n        }\n        fn get_value_unchecked_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> crate::JSONValue<StringBytes> {\n            self.inner.get_value_unchecked_var(key)\n        }\n        fn get_value_from_array<let StringBytes: u32>(self, array_index: Field) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value_from_array(array_index)\n        }\n        fn get_value_from_array_unchecked<let StringBytes: u32>(self, array_index: Field) -> crate::JSONValue<StringBytes> {\n            self.inner.get_value_from_array_unchecked(array_index)\n        }\n        fn get_value_from_path<let KeyBytes: u32, let StringBytes: u32, let PathDepth: u32>(\n            self,\n            keys: [BoundedVec<u8, KeyBytes>; PathDepth]\n        ) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value_from_path(keys)\n        }\n        fn key_exists<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> bool {\n            self.inner.key_exists(key)\n        }\n        fn get_keys_at_root<let MaxNumKeys: u32, let MaxKeyBytes: u32>(self) -> BoundedVec<BoundedVec<u8, MaxKeyBytes>, MaxNumKeys> {\n            self.inner.get_keys_at_root()\n        }\n    }\n}\n\nmod JSON2kb {\n    struct JSON\n    {\n        inner: crate::json::JSON<2048, 70, 256, 129, 2>\n    }\n    impl JSON {\n        fn convert(inner: Option<crate::json::JSON<2048, 70, 256, 129, 2>>) -> Option<Self> {\n            Option { _is_some: inner._is_some, _value: JSON { inner: inner._value } }\n        }\n    }\n    impl crate::JSONParserTrait for JSON {\n        fn parse_json_from_string<let StringBytes: u32>(s: str<StringBytes>) -> Self {\n            JSON { inner: crate::json::JSON::parse_json_from_string(s) }\n        }\n\n        fn parse_json<let StringBytes: u32>(s: [u8; StringBytes]) -> Self {\n            JSON { inner: crate::json::JSON::parse_json(s) }\n        }\n        fn get_length(self) -> u32 {\n            self.inner.get_length()\n        }\n        fn get_array<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<Self> {\n            JSON::convert(self.inner.get_array(key))\n        }\n        fn get_array_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Self {\n            JSON { inner: self.inner.get_array_unchecked(key) }\n        }\n        fn get_array_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<Self> {\n            {\n                JSON::convert(self.inner.get_array_var(key))\n            }\n        }\n        fn get_array_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Self {\n            JSON { inner: self.inner.get_array_unchecked_var(key) }\n        }\n        fn get_array_from_array(self, array_index: Field) -> Option<Self> {\n            JSON::convert(self.inner.get_array_from_array(array_index))\n        }\n        fn get_array_from_array_unchecked(self, array_index: Field) -> Self {\n            JSON { inner: self.inner.get_array_from_array_unchecked(array_index) }\n        }\n        fn map<U, let MaxElements: u32, let MaxElementBytes: u32>(\n            self,\n            f: fn(crate::JSONValue<MaxElementBytes>) -> U\n        ) -> [U; MaxElements] where U: std::default::Default {\n            self.inner.map(f)\n        }\n        fn get_object<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<Self> {\n            {\n                JSON::convert(self.inner.get_object(key))\n            }\n        }\n        fn get_object_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Self {\n            JSON { inner: self.inner.get_object_unchecked(key) }\n        }\n        fn get_object_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<Self> {\n            {\n                JSON::convert(self.inner.get_object_var(key))\n            }\n        }\n        fn get_object_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Self {\n            JSON { inner: self.inner.get_object_unchecked_var(key) }\n        }\n        fn get_object_from_array(self, array_index: Field) -> Option<Self> {\n            JSON::convert(self.inner.get_object_from_array(array_index))\n        }\n        fn get_object_from_array_unchecked(self, array_index: Field) -> Self {\n            JSON { inner: self.inner.get_object_from_array_unchecked(array_index) }\n        }\n        fn get_literal<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<crate::JSONLiteral> {\n            self.inner.get_literal(key)\n        }\n        fn get_literal_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> crate::JSONLiteral {\n            self.inner.get_literal_unchecked(key)\n        }\n        fn get_literal_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<crate::JSONLiteral> {\n            self.inner.get_literal_var(key)\n        }\n        fn get_literal_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> crate::JSONLiteral {\n            self.inner.get_literal_unchecked_var(key)\n        }\n        fn get_literal_from_array(self, array_index: Field) -> Option<crate::JSONLiteral> {\n            self.inner.get_literal_from_array(array_index)\n        }\n        fn get_literal_from_array_unchecked(self, array_index: Field) -> crate::JSONLiteral {\n            self.inner.get_literal_from_array_unchecked(array_index)\n        }\n        fn get_number<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<u64> {\n            self.inner.get_number(key)\n        }\n        fn get_number_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> u64 {\n            self.inner.get_number_unchecked(key)\n        }\n        fn get_number_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<u64> {\n            self.inner.get_number_var(key)\n        }\n        fn get_number_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> u64 {\n            self.inner.get_number_unchecked_var(key)\n        }\n        fn get_number_from_array(self, array_index: Field) -> Option<u64> {\n            self.inner.get_number_from_array(array_index)\n        }\n        fn get_number_from_array_unchecked(self, array_index: Field) -> u64 {\n            self.inner.get_number_from_array_unchecked(array_index)\n        }\n        fn get_string<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string(key)\n        }\n        fn get_string_unchecked<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> BoundedVec<u8, StringBytes> {\n            self.inner.get_string_unchecked(key)\n        }\n        fn get_string_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string_var(key)\n        }\n        fn get_string_unchecked_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> BoundedVec<u8, StringBytes> {\n            self.inner.get_string_unchecked_var(key)\n        }\n        fn get_string_from_array<let StringBytes: u32>(self, array_index: Field) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string_from_array(array_index)\n        }\n        fn get_string_from_array_unchecked<let StringBytes: u32>(self, array_index: Field) -> BoundedVec<u8, StringBytes> {\n            self.inner.get_string_from_array_unchecked(array_index)\n        }\n        fn get_string_from_path<let KeyBytes: u32, let StringBytes: u32, let PathDepth: u32>(\n            self,\n            keys: [BoundedVec<u8, KeyBytes>; PathDepth]\n        ) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string_from_path(keys)\n        }\n        fn get_value<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value(key)\n        }\n        fn get_value_unchecked<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> crate::JSONValue<StringBytes> {\n            self.inner.get_value_unchecked(key)\n        }\n        fn get_value_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value_var(key)\n        }\n        fn get_value_unchecked_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> crate::JSONValue<StringBytes> {\n            self.inner.get_value_unchecked_var(key)\n        }\n        fn get_value_from_array<let StringBytes: u32>(self, array_index: Field) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value_from_array(array_index)\n        }\n        fn get_value_from_array_unchecked<let StringBytes: u32>(self, array_index: Field) -> crate::JSONValue<StringBytes> {\n            self.inner.get_value_from_array_unchecked(array_index)\n        }\n        fn get_value_from_path<let KeyBytes: u32, let StringBytes: u32, let PathDepth: u32>(\n            self,\n            keys: [BoundedVec<u8, KeyBytes>; PathDepth]\n        ) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value_from_path(keys)\n        }\n        fn key_exists<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> bool {\n            self.inner.key_exists(key)\n        }\n        fn get_keys_at_root<let MaxNumKeys: u32, let MaxKeyBytes: u32>(self) -> BoundedVec<BoundedVec<u8, MaxKeyBytes>, MaxNumKeys> {\n            self.inner.get_keys_at_root()\n        }\n    }\n}\n\nmod JSON4kb {\n    struct JSON\n    {\n        inner: crate::json::JSON<4096, 136, 512, 257, 2>\n    }\n    impl JSON {\n        fn convert(inner: Option<crate::json::JSON<4096, 136, 512, 257, 2>>) -> Option<Self> {\n            Option { _is_some: inner._is_some, _value: JSON { inner: inner._value } }\n        }\n    }\n    impl crate::JSONParserTrait for JSON {\n        fn parse_json_from_string<let StringBytes: u32>(s: str<StringBytes>) -> Self {\n            JSON { inner: crate::json::JSON::parse_json_from_string(s) }\n        }\n\n        fn parse_json<let StringBytes: u32>(s: [u8; StringBytes]) -> Self {\n            JSON { inner: crate::json::JSON::parse_json(s) }\n        }\n        fn get_length(self) -> u32 {\n            self.inner.get_length()\n        }\n        fn get_array<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<Self> {\n            JSON::convert(self.inner.get_array(key))\n        }\n        fn get_array_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Self {\n            JSON { inner: self.inner.get_array_unchecked(key) }\n        }\n        fn get_array_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<Self> {\n            {\n                JSON::convert(self.inner.get_array_var(key))\n            }\n        }\n        fn get_array_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Self {\n            JSON { inner: self.inner.get_array_unchecked_var(key) }\n        }\n        fn get_array_from_array(self, array_index: Field) -> Option<Self> {\n            JSON::convert(self.inner.get_array_from_array(array_index))\n        }\n        fn get_array_from_array_unchecked(self, array_index: Field) -> Self {\n            JSON { inner: self.inner.get_array_from_array_unchecked(array_index) }\n        }\n        fn map<U, let MaxElements: u32, let MaxElementBytes: u32>(\n            self,\n            f: fn(crate::JSONValue<MaxElementBytes>) -> U\n        ) -> [U; MaxElements] where U: std::default::Default {\n            self.inner.map(f)\n        }\n        fn get_object<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<Self> {\n            {\n                JSON::convert(self.inner.get_object(key))\n            }\n        }\n        fn get_object_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Self {\n            JSON { inner: self.inner.get_object_unchecked(key) }\n        }\n        fn get_object_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<Self> {\n            {\n                JSON::convert(self.inner.get_object_var(key))\n            }\n        }\n        fn get_object_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Self {\n            JSON { inner: self.inner.get_object_unchecked_var(key) }\n        }\n        fn get_object_from_array(self, array_index: Field) -> Option<Self> {\n            JSON::convert(self.inner.get_object_from_array(array_index))\n        }\n        fn get_object_from_array_unchecked(self, array_index: Field) -> Self {\n            JSON { inner: self.inner.get_object_from_array_unchecked(array_index) }\n        }\n        fn get_literal<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<crate::JSONLiteral> {\n            self.inner.get_literal(key)\n        }\n        fn get_literal_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> crate::JSONLiteral {\n            self.inner.get_literal_unchecked(key)\n        }\n        fn get_literal_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<crate::JSONLiteral> {\n            self.inner.get_literal_var(key)\n        }\n        fn get_literal_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> crate::JSONLiteral {\n            self.inner.get_literal_unchecked_var(key)\n        }\n        fn get_literal_from_array(self, array_index: Field) -> Option<crate::JSONLiteral> {\n            self.inner.get_literal_from_array(array_index)\n        }\n        fn get_literal_from_array_unchecked(self, array_index: Field) -> crate::JSONLiteral {\n            self.inner.get_literal_from_array_unchecked(array_index)\n        }\n        fn get_number<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<u64> {\n            self.inner.get_number(key)\n        }\n        fn get_number_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> u64 {\n            self.inner.get_number_unchecked(key)\n        }\n        fn get_number_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<u64> {\n            self.inner.get_number_var(key)\n        }\n        fn get_number_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> u64 {\n            self.inner.get_number_unchecked_var(key)\n        }\n        fn get_number_from_array(self, array_index: Field) -> Option<u64> {\n            self.inner.get_number_from_array(array_index)\n        }\n        fn get_number_from_array_unchecked(self, array_index: Field) -> u64 {\n            self.inner.get_number_from_array_unchecked(array_index)\n        }\n        fn get_string<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string(key)\n        }\n        fn get_string_unchecked<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> BoundedVec<u8, StringBytes> {\n            self.inner.get_string_unchecked(key)\n        }\n        fn get_string_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string_var(key)\n        }\n        fn get_string_unchecked_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> BoundedVec<u8, StringBytes> {\n            self.inner.get_string_unchecked_var(key)\n        }\n        fn get_string_from_array<let StringBytes: u32>(self, array_index: Field) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string_from_array(array_index)\n        }\n        fn get_string_from_array_unchecked<let StringBytes: u32>(self, array_index: Field) -> BoundedVec<u8, StringBytes> {\n            self.inner.get_string_from_array_unchecked(array_index)\n        }\n        fn get_string_from_path<let KeyBytes: u32, let StringBytes: u32, let PathDepth: u32>(\n            self,\n            keys: [BoundedVec<u8, KeyBytes>; PathDepth]\n        ) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string_from_path(keys)\n        }\n        fn get_value<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value(key)\n        }\n        fn get_value_unchecked<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> crate::JSONValue<StringBytes> {\n            self.inner.get_value_unchecked(key)\n        }\n        fn get_value_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value_var(key)\n        }\n        fn get_value_unchecked_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> crate::JSONValue<StringBytes> {\n            self.inner.get_value_unchecked_var(key)\n        }\n        fn get_value_from_array<let StringBytes: u32>(self, array_index: Field) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value_from_array(array_index)\n        }\n        fn get_value_from_array_unchecked<let StringBytes: u32>(self, array_index: Field) -> crate::JSONValue<StringBytes> {\n            self.inner.get_value_from_array_unchecked(array_index)\n        }\n        fn get_value_from_path<let KeyBytes: u32, let StringBytes: u32, let PathDepth: u32>(\n            self,\n            keys: [BoundedVec<u8, KeyBytes>; PathDepth]\n        ) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value_from_path(keys)\n        }\n        fn key_exists<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> bool {\n            self.inner.key_exists(key)\n        }\n        fn get_keys_at_root<let MaxNumKeys: u32, let MaxKeyBytes: u32>(self) -> BoundedVec<BoundedVec<u8, MaxKeyBytes>, MaxNumKeys> {\n            self.inner.get_keys_at_root()\n        }\n    }\n}\n\nmod JSON8kb {\n    struct JSON\n    {\n        inner: crate::json::JSON<8192, 268, 1024, 513, 2>\n    }\n    impl JSON {\n        fn convert(inner: Option<crate::json::JSON<8192, 268, 1024, 513, 2>>) -> Option<Self> {\n            Option { _is_some: inner._is_some, _value: JSON { inner: inner._value } }\n        }\n    }\n    impl crate::JSONParserTrait for JSON {\n        fn parse_json_from_string<let StringBytes: u32>(s: str<StringBytes>) -> Self {\n            JSON { inner: crate::json::JSON::parse_json_from_string(s) }\n        }\n\n        fn parse_json<let StringBytes: u32>(s: [u8; StringBytes]) -> Self {\n            JSON { inner: crate::json::JSON::parse_json(s) }\n        }\n        fn get_length(self) -> u32 {\n            self.inner.get_length()\n        }\n        fn get_array<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<Self> {\n            JSON::convert(self.inner.get_array(key))\n        }\n        fn get_array_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Self {\n            JSON { inner: self.inner.get_array_unchecked(key) }\n        }\n        fn get_array_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<Self> {\n            {\n                JSON::convert(self.inner.get_array_var(key))\n            }\n        }\n        fn get_array_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Self {\n            JSON { inner: self.inner.get_array_unchecked_var(key) }\n        }\n        fn get_array_from_array(self, array_index: Field) -> Option<Self> {\n            JSON::convert(self.inner.get_array_from_array(array_index))\n        }\n        fn get_array_from_array_unchecked(self, array_index: Field) -> Self {\n            JSON { inner: self.inner.get_array_from_array_unchecked(array_index) }\n        }\n        fn map<U, let MaxElements: u32, let MaxElementBytes: u32>(\n            self,\n            f: fn(crate::JSONValue<MaxElementBytes>) -> U\n        ) -> [U; MaxElements] where U: std::default::Default {\n            self.inner.map(f)\n        }\n        fn get_object<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<Self> {\n            {\n                JSON::convert(self.inner.get_object(key))\n            }\n        }\n        fn get_object_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Self {\n            JSON { inner: self.inner.get_object_unchecked(key) }\n        }\n        fn get_object_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<Self> {\n            {\n                JSON::convert(self.inner.get_object_var(key))\n            }\n        }\n        fn get_object_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Self {\n            JSON { inner: self.inner.get_object_unchecked_var(key) }\n        }\n        fn get_object_from_array(self, array_index: Field) -> Option<Self> {\n            JSON::convert(self.inner.get_object_from_array(array_index))\n        }\n        fn get_object_from_array_unchecked(self, array_index: Field) -> Self {\n            JSON { inner: self.inner.get_object_from_array_unchecked(array_index) }\n        }\n        fn get_literal<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<crate::JSONLiteral> {\n            self.inner.get_literal(key)\n        }\n        fn get_literal_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> crate::JSONLiteral {\n            self.inner.get_literal_unchecked(key)\n        }\n        fn get_literal_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<crate::JSONLiteral> {\n            self.inner.get_literal_var(key)\n        }\n        fn get_literal_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> crate::JSONLiteral {\n            self.inner.get_literal_unchecked_var(key)\n        }\n        fn get_literal_from_array(self, array_index: Field) -> Option<crate::JSONLiteral> {\n            self.inner.get_literal_from_array(array_index)\n        }\n        fn get_literal_from_array_unchecked(self, array_index: Field) -> crate::JSONLiteral {\n            self.inner.get_literal_from_array_unchecked(array_index)\n        }\n        fn get_number<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<u64> {\n            self.inner.get_number(key)\n        }\n        fn get_number_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> u64 {\n            self.inner.get_number_unchecked(key)\n        }\n        fn get_number_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<u64> {\n            self.inner.get_number_var(key)\n        }\n        fn get_number_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> u64 {\n            self.inner.get_number_unchecked_var(key)\n        }\n        fn get_number_from_array(self, array_index: Field) -> Option<u64> {\n            self.inner.get_number_from_array(array_index)\n        }\n        fn get_number_from_array_unchecked(self, array_index: Field) -> u64 {\n            self.inner.get_number_from_array_unchecked(array_index)\n        }\n        fn get_string<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string(key)\n        }\n        fn get_string_unchecked<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> BoundedVec<u8, StringBytes> {\n            self.inner.get_string_unchecked(key)\n        }\n        fn get_string_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string_var(key)\n        }\n        fn get_string_unchecked_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> BoundedVec<u8, StringBytes> {\n            self.inner.get_string_unchecked_var(key)\n        }\n        fn get_string_from_array<let StringBytes: u32>(self, array_index: Field) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string_from_array(array_index)\n        }\n        fn get_string_from_array_unchecked<let StringBytes: u32>(self, array_index: Field) -> BoundedVec<u8, StringBytes> {\n            self.inner.get_string_from_array_unchecked(array_index)\n        }\n        fn get_string_from_path<let KeyBytes: u32, let StringBytes: u32, let PathDepth: u32>(\n            self,\n            keys: [BoundedVec<u8, KeyBytes>; PathDepth]\n        ) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string_from_path(keys)\n        }\n        fn get_value<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value(key)\n        }\n        fn get_value_unchecked<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> crate::JSONValue<StringBytes> {\n            self.inner.get_value_unchecked(key)\n        }\n        fn get_value_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value_var(key)\n        }\n        fn get_value_unchecked_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> crate::JSONValue<StringBytes> {\n            self.inner.get_value_unchecked_var(key)\n        }\n        fn get_value_from_array<let StringBytes: u32>(self, array_index: Field) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value_from_array(array_index)\n        }\n        fn get_value_from_array_unchecked<let StringBytes: u32>(self, array_index: Field) -> crate::JSONValue<StringBytes> {\n            self.inner.get_value_from_array_unchecked(array_index)\n        }\n        fn get_value_from_path<let KeyBytes: u32, let StringBytes: u32, let PathDepth: u32>(\n            self,\n            keys: [BoundedVec<u8, KeyBytes>; PathDepth]\n        ) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value_from_path(keys)\n        }\n        fn key_exists<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> bool {\n            self.inner.key_exists(key)\n        }\n        fn get_keys_at_root<let MaxNumKeys: u32, let MaxKeyBytes: u32>(self) -> BoundedVec<BoundedVec<u8, MaxKeyBytes>, MaxNumKeys> {\n            self.inner.get_keys_at_root()\n        }\n    }\n}\n\nmod JSON16kb {\n    struct JSON\n    {\n        inner: crate::json::JSON<16384, 532, 2048, 1025, 2>\n    }\n    impl JSON {\n        fn convert(inner: Option<crate::json::JSON<16384, 532, 2048, 1025, 2>>) -> Option<Self> {\n            Option { _is_some: inner._is_some, _value: JSON { inner: inner._value } }\n        }\n    }\n    impl crate::JSONParserTrait for JSON {\n        fn parse_json_from_string<let StringBytes: u32>(s: str<StringBytes>) -> Self {\n            JSON { inner: crate::json::JSON::parse_json_from_string(s) }\n        }\n\n        fn parse_json<let StringBytes: u32>(s: [u8; StringBytes]) -> Self {\n            JSON { inner: crate::json::JSON::parse_json(s) }\n        }\n        fn get_length(self) -> u32 {\n            self.inner.get_length()\n        }\n        fn get_array<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<Self> {\n            JSON::convert(self.inner.get_array(key))\n        }\n        fn get_array_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Self {\n            JSON { inner: self.inner.get_array_unchecked(key) }\n        }\n        fn get_array_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<Self> {\n            {\n                JSON::convert(self.inner.get_array_var(key))\n            }\n        }\n        fn get_array_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Self {\n            JSON { inner: self.inner.get_array_unchecked_var(key) }\n        }\n        fn get_array_from_array(self, array_index: Field) -> Option<Self> {\n            JSON::convert(self.inner.get_array_from_array(array_index))\n        }\n        fn get_array_from_array_unchecked(self, array_index: Field) -> Self {\n            JSON { inner: self.inner.get_array_from_array_unchecked(array_index) }\n        }\n        fn map<U, let MaxElements: u32, let MaxElementBytes: u32>(\n            self,\n            f: fn(crate::JSONValue<MaxElementBytes>) -> U\n        ) -> [U; MaxElements] where U: std::default::Default {\n            self.inner.map(f)\n        }\n        fn get_object<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<Self> {\n            {\n                JSON::convert(self.inner.get_object(key))\n            }\n        }\n        fn get_object_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Self {\n            JSON { inner: self.inner.get_object_unchecked(key) }\n        }\n        fn get_object_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<Self> {\n            {\n                JSON::convert(self.inner.get_object_var(key))\n            }\n        }\n        fn get_object_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Self {\n            JSON { inner: self.inner.get_object_unchecked_var(key) }\n        }\n        fn get_object_from_array(self, array_index: Field) -> Option<Self> {\n            JSON::convert(self.inner.get_object_from_array(array_index))\n        }\n        fn get_object_from_array_unchecked(self, array_index: Field) -> Self {\n            JSON { inner: self.inner.get_object_from_array_unchecked(array_index) }\n        }\n        fn get_literal<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<crate::JSONLiteral> {\n            self.inner.get_literal(key)\n        }\n        fn get_literal_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> crate::JSONLiteral {\n            self.inner.get_literal_unchecked(key)\n        }\n        fn get_literal_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<crate::JSONLiteral> {\n            self.inner.get_literal_var(key)\n        }\n        fn get_literal_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> crate::JSONLiteral {\n            self.inner.get_literal_unchecked_var(key)\n        }\n        fn get_literal_from_array(self, array_index: Field) -> Option<crate::JSONLiteral> {\n            self.inner.get_literal_from_array(array_index)\n        }\n        fn get_literal_from_array_unchecked(self, array_index: Field) -> crate::JSONLiteral {\n            self.inner.get_literal_from_array_unchecked(array_index)\n        }\n        fn get_number<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<u64> {\n            self.inner.get_number(key)\n        }\n        fn get_number_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> u64 {\n            self.inner.get_number_unchecked(key)\n        }\n        fn get_number_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<u64> {\n            self.inner.get_number_var(key)\n        }\n        fn get_number_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> u64 {\n            self.inner.get_number_unchecked_var(key)\n        }\n        fn get_number_from_array(self, array_index: Field) -> Option<u64> {\n            self.inner.get_number_from_array(array_index)\n        }\n        fn get_number_from_array_unchecked(self, array_index: Field) -> u64 {\n            self.inner.get_number_from_array_unchecked(array_index)\n        }\n        fn get_string<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string(key)\n        }\n        fn get_string_unchecked<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> BoundedVec<u8, StringBytes> {\n            self.inner.get_string_unchecked(key)\n        }\n        fn get_string_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string_var(key)\n        }\n        fn get_string_unchecked_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> BoundedVec<u8, StringBytes> {\n            self.inner.get_string_unchecked_var(key)\n        }\n        fn get_string_from_array<let StringBytes: u32>(self, array_index: Field) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string_from_array(array_index)\n        }\n        fn get_string_from_array_unchecked<let StringBytes: u32>(self, array_index: Field) -> BoundedVec<u8, StringBytes> {\n            self.inner.get_string_from_array_unchecked(array_index)\n        }\n        fn get_string_from_path<let KeyBytes: u32, let StringBytes: u32, let PathDepth: u32>(\n            self,\n            keys: [BoundedVec<u8, KeyBytes>; PathDepth]\n        ) -> Option<BoundedVec<u8, StringBytes>> {\n            self.inner.get_string_from_path(keys)\n        }\n        fn get_value<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value(key)\n        }\n        fn get_value_unchecked<let KeyBytes: u32, let StringBytes: u32>(self, key: [u8; KeyBytes]) -> crate::JSONValue<StringBytes> {\n            self.inner.get_value_unchecked(key)\n        }\n        fn get_value_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value_var(key)\n        }\n        fn get_value_unchecked_var<let KeyBytes: u32, let StringBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> crate::JSONValue<StringBytes> {\n            self.inner.get_value_unchecked_var(key)\n        }\n        fn get_value_from_array<let StringBytes: u32>(self, array_index: Field) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value_from_array(array_index)\n        }\n        fn get_value_from_array_unchecked<let StringBytes: u32>(self, array_index: Field) -> crate::JSONValue<StringBytes> {\n            self.inner.get_value_from_array_unchecked(array_index)\n        }\n        fn get_value_from_path<let KeyBytes: u32, let StringBytes: u32, let PathDepth: u32>(\n            self,\n            keys: [BoundedVec<u8, KeyBytes>; PathDepth]\n        ) -> Option<crate::JSONValue<StringBytes>> {\n            self.inner.get_value_from_path(keys)\n        }\n        fn key_exists<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> bool {\n            self.inner.key_exists(key)\n        }\n        fn get_keys_at_root<let MaxNumKeys: u32, let MaxKeyBytes: u32>(self) -> BoundedVec<BoundedVec<u8, MaxKeyBytes>, MaxNumKeys> {\n            self.inner.get_keys_at_root()\n        }\n    }\n}\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_json_parserv0.2.0/src/lib.nr"},"76":{"source":"use crate::json_tables::ASCII_TO_TOKEN_TABLE;\n\nstruct ValidationFlags\n{\n    push_layer: Field,\n    push_layer_type_of_root: Field,\n    pop_layer: Field\n}\n\nimpl ValidationFlags {\n    fn to_field(self) -> Field {\n        self.push_layer + self.push_layer_type_of_root * 0x100 + self.pop_layer * 0x10000\n    }\n\n    unconstrained fn __from_field(f: Field) -> Self {\n        let bytes: [u8; 4] = f.to_be_bytes();\n        let mut push_layer= bytes[3] as Field;\n        let push_layer_type_of_root = bytes[2] as Field;\n        let pop_layer = bytes[1] as Field;\n        let error = bytes[0] as Field;\n\n        assert(error == 0, \"ValidationFlags: grammar error\");\n        // we are doing something very degenerate here.\n        // in `validate_tokens` update a `depth` parameter via `depth = depth + push_layer - pop_layer`\n        // we index a size-32 array `parent_layer_stack` using the `depth_parameter` immediately after updating `depth`\n        // i.e. we implicitly validate `push_layer < 32`\n        // If the Prover incorrectly generates the `push_layer` witness via encoding any other flag data within it,\n        // an out of bounds error will be triggered\n        // n.b. reason for doing this is that by only having 3 flags stored in our lookup table,\n        // we can extract them all with 1 add gate. combined with 2 bool checks = 3 gates instead of 5/6 gates if we had 4 flags\n        push_layer = push_layer + error * 0x1000000;\n        ValidationFlags { push_layer, push_layer_type_of_root, pop_layer }\n    }\n\n    // 3 gates\n    fn from_field(f: Field) -> Self {\n        let r = ValidationFlags::__from_field(f);\n        assert(r.pop_layer * r.pop_layer == r.pop_layer);\n        assert(r.push_layer_type_of_root * r.push_layer_type_of_root == r.push_layer_type_of_root);\n        assert(r.pop_layer * 0x10000 + r.push_layer_type_of_root * 0x100 + r.push_layer == f);\n        r\n    }\n}\n\nstruct RawTranscriptEntry {\n    encoded_ascii: Field,\n    index: Field,\n    length: Field,\n}\n\nimpl RawTranscriptEntry {\n    fn new() -> Self {\n        RawTranscriptEntry { encoded_ascii: 0, index: 0, length: 0 }\n    }\n    fn to_field(self) -> Field {\n        self.encoded_ascii + self.index * 0x10000 + self.length * (0x100000000)\n    }\n\n    unconstrained fn __from_field(felt: Field) -> Self {\n        let slices: [u8; 6] = felt.to_be_bytes(); // 2 gates + 1.25 + 2 = 5.25\n        let length = slices[1] as Field + slices[0] as Field * 0x100;\n        let index = slices[3] as Field + slices[2] as Field * 0x100;\n        let encoded_ascii = slices[5] as Field + slices[4] as Field * 0x100;\n        Self { encoded_ascii, index, length }\n    }\n    // 2 gates to add bytes into sum\n    // 1.25 gates for range checks\n    // 2 gates to get u16s\n    // 5.25 gates total\n    fn from_field(felt: Field) -> Self {\n        let result = RawTranscriptEntry::__from_field(felt);\n        result.length.assert_max_bit_size(16);\n        result.index.assert_max_bit_size(16);\n        result.encoded_ascii.assert_max_bit_size(14);\n\n        assert(result.encoded_ascii + result.index * 0x10000 + result.length * 0x100000000 == felt);\n        result\n    }\n\n    unconstrained fn __extract_ascii(f: Field) -> (Field, Field) {\n        let r = RawTranscriptEntry::__from_field(f);\n        let ascii = r.encoded_ascii;\n        let remainder = r.index + r.length * 0x10000;\n        (ascii, remainder)\n    }\n    fn extract_ascii(f: Field) -> (Field, Field) {\n        let (ascii, remainder) = RawTranscriptEntry::__extract_ascii(f);\n        ascii.assert_max_bit_size(14);\n        remainder.assert_max_bit_size(32);\n        assert(ascii + remainder * 0x10000 == f);\n        (ascii, remainder)\n    }\n}\n\nstruct TranscriptEntry {\n    token: Field,\n    index: Field,\n    length: Field\n}\n\nstruct ScanData {\n    scan_token: Field,\n    push_transcript: Field,\n    increase_length: Field,\n    is_potential_escape_sequence: Field,\n}\n\nimpl ScanData {\n    unconstrained fn __from_field(f: Field) -> Self {\n        let bytes : [u8; 6]= f.to_le_bytes();\n\n        let mut scan_token = bytes[0] as Field;\n        let push_transcript = bytes[1] as Field;\n        let increase_length = bytes[2] as Field;\n        let is_potential_escape_sequence = bytes[3] as Field;\n        let error = bytes[4] as Field * 0x100 + bytes[5] as Field;\n        assert(error == 0, \"ScanData: Invalid token\");\n        // TODO document this\n        scan_token = scan_token + error * 0x100000000;\n        ScanData { scan_token, push_transcript, increase_length, is_potential_escape_sequence }\n    }\n    fn from_field(f: Field) -> Self {\n        let result = ScanData::__from_field(f);\n\n        assert(result.increase_length * result.increase_length == result.increase_length);\n        assert(result.push_transcript * result.push_transcript == result.push_transcript);\n        assert(\n            result.is_potential_escape_sequence * result.is_potential_escape_sequence\n            == result.is_potential_escape_sequence\n        );\n        assert(\n            result.scan_token\n            + result.push_transcript * 0x100\n            + result.increase_length * 0x10000\n            + result.is_potential_escape_sequence * 0x1000000\n            == f\n        );\n        result\n    }\n}\n\nstruct PostProcessScanData {\n    token: Field,\n    new_grammar: Field,\n    scan_token: Field,\n}\nimpl PostProcessScanData {\n    fn from_field(f: Field) -> Self {\n        let bytes: [u8; 3] = f.to_be_bytes();\n        let token = bytes[2] as Field;\n        let new_grammar = bytes[1] as Field;\n        let scan_token = bytes[0] as Field;\n        PostProcessScanData { token, new_grammar, scan_token }\n    }\n}\nimpl TranscriptEntry {\n    fn new() -> Self {\n        TranscriptEntry { token: 0, index: 0, length: 0 }\n    }\n    fn to_field(self) -> Field {\n        self.token + self.index * 0x100 + self.length * (0x1000000)\n    }\n    unconstrained fn __from_field(felt: Field) -> Self {\n        let slices: [u8; 5] = felt.to_be_bytes(); // 2 gates + 1.25 + 2 = 5.25\n        let length = slices[1] as Field + slices[0] as Field * 256;\n        let index = slices[3] as Field + slices[2] as Field * 256;\n        let token = slices[4] as Field;\n        Self { token, index, length }\n    }\n    unconstrained fn __get_token(f: Field) -> (Field, Field) {\n        let r = TranscriptEntry::__from_field(f);\n        (r.token, (r.index + r.length * 0x10000))\n    }\n    // 4 gates\n    fn get_token(f: Field) -> Field {\n        let (token, remainder) = TranscriptEntry::__get_token(f);\n        remainder.assert_max_bit_size(32);\n        token.assert_max_bit_size(8);\n        assert(token + remainder * 0x100 == f);\n        token\n    }\n    // 5.25 gates\n    fn from_field(felt: Field) -> Self {\n        let result = TranscriptEntry::__from_field(felt);\n        result.length.assert_max_bit_size(16);\n        result.index.assert_max_bit_size(16);\n        result.token.assert_max_bit_size(8);\n        assert(result.token + result.index * 0x100 + result.length * 0x1000000 == felt);\n        result\n    }\n\n    fn get_token_and_index_length_combined(f: Field) -> (Field, Field) {\n        let (token, remainder) = TranscriptEntry::__get_token(f);\n        remainder.assert_max_bit_size(32);\n        token.assert_max_bit_size(8);\n        assert(token + remainder * 0x100 == f);\n        (token, remainder)\n    }\n\n    // 5.75 gates\n    fn from_raw(raw_encoded: Field) -> Field {\n        let (ascii, remainder) = RawTranscriptEntry::__extract_ascii(raw_encoded);\n        remainder.assert_max_bit_size(32);\n        assert(ascii + remainder * 0x10000 == raw_encoded);\n        // this lookup enforces an implicit 10 bit range check on ascii\n        let token = ASCII_TO_TOKEN_TABLE[ascii];\n        token + remainder * 0x100\n    }\n}\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_json_parserv0.2.0/src/transcript_entry.nr"},"77":{"source":"mod ScanMode {\n    global GRAMMAR_SCAN = 0;\n    global STRING_SCAN = 1;\n    global NUMERIC_SCAN = 2;\n    global LITERAL_SCAN: Field = 3;\n}\n\nmod Token {\n    global NO_TOKEN = 0;\n    global BEGIN_OBJECT_TOKEN = 1;\n    global END_OBJECT_TOKEN = 2;\n    global BEGIN_ARRAY_TOKEN = 3;\n    global END_ARRAY_TOKEN: Field = 4;\n    global KEY_SEPARATOR_TOKEN = 5;\n    global VALUE_SEPARATOR_TOKEN = 6;\n    global STRING_TOKEN = 7;\n    global NUMERIC_TOKEN = 8;\n    global LITERAL_TOKEN  =9;\n    global KEY_TOKEN = 10;\n    global NUM_TOKENS = 11;\n    global NUM_TOKENS_MUL_2 = 22;\n}\n\nmod Layer {\n    global OBJECT_LAYER = 0;\n    global ARRAY_LAYER = 1;\n    global SINGLE_VALUE_LAYER = 2;\n}\n\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_json_parserv0.2.0/src/enums.nr"},"78":{"source":"use crate::transcript_entry::TranscriptEntry;\nuse crate::json_entry::JSONEntry;\nuse crate::json::JSON;\nuse crate::_comparison_tools::lt::{lt_field_16_bit, assert_lt_240_bit, assert_gt_240_bit};\nuse crate::enums::Token::{NUMERIC_TOKEN, LITERAL_TOKEN, STRING_TOKEN};\nuse crate::enums::Layer::{OBJECT_LAYER, ARRAY_LAYER};\nuse crate::keyhash::ByteHasher;\nuse crate::keymap::KeyIndexData;\nuse crate::_string_tools::string_chopper::StringChopper;\nuse crate::_string_tools::slice_packed_field::slice_fields;\nuse crate::json::JSONValue;\n/**\n * @brief records data used to reason about whether a key exists in a json blob\n **/\nstruct KeySearchResult {\n    found: bool, // does the key exist?\n    target_lt_smallest_entry: bool, // is the target keyhash smaller than the smallest keyhash in self.key_hashes?\n    target_gt_largest_entry: bool, // is the target keyhash larger than the largest keyhash in self.key_hashes?\n    lhs_index: Field, // either the index of the key being searched for, or the index of the keyhash in self.key_hashes that is closest to keyhash (hash > lhs_index_hash)\n    rhs_index: Field, // either the index of the key being searched for, or the index of the keyhash in self.key_hashes that is closest to keyhash (hash < rhs_index_hash)\n}\n\n/**\n * @brief helper methods for extracting data out of a processed JSON object\n **/\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> JSON<NumBytes,NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n\n    /**\n     * @brief If the root JSON is an object, extract a JSONEntry that describes an array, object or value that maps to a given key\n     * @description returns an Option<JSONEntry> which will be null if the entry does not exist\n     **/\n    fn get_json_entry<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> (bool, JSONEntry) {\n        // let key_index = self.find_key_in_map(keyhash);\n        // assert(self.key_hashes[key_index] == keyhash);\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let (exists, key_index) = self.key_exists_impl(key);\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n        (exists, entry)\n    }\n\n    /**\n     * @brief If the root JSON is an object, extract a JSONEntry that describes an array, object or value that maps to a given key\n     * @note will revert if the key does not exist\n     **/\n    fn get_json_entry_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> JSONEntry {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key, 0, KeyBytes);\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        let key_index = self.find_key_in_map(keyhash);\n\n        assert(self.key_hashes[key_index] == keyhash, \"get_json_entry_unchecked: key not found\");\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n\n        entry\n    }\n\n    /**\n     * @brief same as `get_json_entry` but the key length may be less than KeyBytes\n     **/\n    fn get_json_entry_var<let KeyBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>\n    ) -> (bool, JSONEntry) {\n        // let key_index = self.find_key_in_map(keyhash);\n        // assert(self.key_hashes[key_index] == keyhash);\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let (exists, key_index) = self.key_exists_impl_var(key);\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n        (exists, entry)\n    }\n\n    /**\n     * @brief same as `get_json_entry_unchecked` but the key length may be less than KeyBytes\n     **/\n    fn get_json_entry_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> JSONEntry {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key.storage, 0, key.len as u32);\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        let key_index = self.find_key_in_map(keyhash);\n\n        assert(self.key_hashes[key_index] == keyhash, \"get_json_entry_unchecked: key not found\");\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n\n        entry\n    }\n\n    /**\n     * @brief same as `get_json_entry_unchecked_var` but also returns the position of the JSONEntry in `self.json_entries_packed`\n     **/\n    fn get_json_entry_unchecked_with_key_index<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> (JSONEntry, Field) {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key, 0, KeyBytes);\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        let key_index = self.find_key_in_map(keyhash);\n\n        assert(self.key_hashes[key_index] == keyhash, \"get_json_entry_unchecked: key not found\");\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n\n        (entry, key_index)\n    }\n    /**\n     * @brief same as `get_json_entry_unchecked_var` but also returns the position of the JSONEntry in `self.json_entries_packed`\n     **/\n    fn get_json_entry_unchecked_with_key_index_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> (JSONEntry, Field) {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key.storage, 0, key.len as u32);\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        let key_index = self.find_key_in_map(keyhash);\n\n        assert(self.key_hashes[key_index] == keyhash, \"get_json_entry_unchecked: key not found\");\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n\n        (entry, key_index)\n    }\n\n    /**\n     * @brief helper method that will extract an array of bytes that describes the value associated with a JSONEntry object\n     * @description e.g. if the JSONEntry describes \"foo\" : \"bar\" in the JSON, `extract_string_entry` will return \"foo\"\n     **/\n    fn extract_string_entry<let StringBytes: u32>(self, entry: JSONEntry) -> [u8; StringBytes] {\n        // todo can we make this faster? witness gen for this method is slow\n        // TODO: document that StringBytes parameter includes non-escaped characters\n        assert(\n            lt_field_16_bit(entry.json_length, StringBytes as Field + 1), \"get_string, string size is larger than StringBytes\"\n        );\n\n        let mut result: [u8; StringBytes] = [0; StringBytes];\n        if (StringBytes <= 31)\n        {\n            let s: StringChopper<1> = StringChopper{};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        }\n        else if (StringBytes <= 62)\n        {\n            let s: StringChopper<2> = StringChopper{};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        }\n        else if (StringBytes <= 93)\n        {\n            let s: StringChopper<3> = StringChopper{};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        }\n        else if (StringBytes <= 124)\n        {\n            let s: StringChopper<4> = StringChopper{};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        }\n        else if (StringBytes <= 155)\n        {\n            let s: StringChopper<5> = StringChopper{};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        }\n        else if (StringBytes <= 186)\n        {\n            let s: StringChopper<6> = StringChopper{};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        }\n        else if (StringBytes <= 217)\n        {\n            let s: StringChopper<7> = StringChopper{};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        }\n        else if (StringBytes <= 248) // 8\n        {\n            let s: StringChopper<8> = StringChopper{};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        }\n        else if (StringBytes <= 496) // 16\n        {\n            let s: StringChopper<16> = StringChopper{};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        }\n        else if (StringBytes <= 992) // 32\n        {\n            let s: StringChopper<32> = StringChopper{};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        }\n        else if (StringBytes <= 1984)\n        {\n            let s: StringChopper<64> = StringChopper{};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        }\n        else if (StringBytes <= 3968)\n        {\n            let s: StringChopper<128> = StringChopper{};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        }\n        else if (StringBytes <= 7936)\n        {\n            let s: StringChopper<256> = StringChopper{};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        }\n        else if (StringBytes <= 15872)\n        {\n            let s: StringChopper<512> = StringChopper{};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        }\n        else if (StringBytes <= 31774)\n        {\n            let s: StringChopper<1024> = StringChopper{};\n        result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        }\n        else\n        {\n            // max 16 bits = 65535 = 2115 31-byte slices\n            let s: StringChopper<2115> = StringChopper{};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n\n        }\n        result\n    }\n\n    unconstrained fn find_key_in_map(self, target: Field) -> Field {\n        let mut found_index: Field = 0;\n        let mut found: bool = false;\n        for i in 0..MaxNumValues {\n            let key_hash= self.key_hashes[i];\n            if (key_hash == target) {\n                found_index = i as Field;\n                found = true;\n                break;\n            }\n        }\n        assert(found, \"find_key_in_map, key not found\");\n        found_index\n    }\n\n    /**\n     * @brief figures out if `target` exists as a key in `self.key_hashes`\n     * @details if `target` does not exist, we return the two indicies of adjacent\n     *          entries in `self.key_hashes`, lhs_index, rhs_index, where\n     *          lhs_index < key_hash < rhs_index\n     **/\n    unconstrained fn search_for_key_in_map(self, target: Field) -> KeySearchResult {\n        let mut found_index: Field = 0;\n        let mut found: bool = false;\n\n        let mut lhs_maximum: Field = 0;\n        let mut rhs_minimum: Field = -1;\n        let mut lhs_maximum_index: Field = 0;\n        let mut rhs_minimum_index: Field = 0;\n        for i in 0..MaxNumValues {\n            let key_hash= self.key_hashes[i];\n            if (key_hash == target) {\n                found_index = i as Field;\n                found = true;\n                break;\n            } else {\n                if key_hash.lt(target) & (lhs_maximum.lt(key_hash)) {\n                    lhs_maximum = key_hash;\n                    lhs_maximum_index = i as Field;\n                }\n                if (target.lt(key_hash)) & (key_hash.lt(rhs_minimum)) {\n                    rhs_minimum = key_hash;\n                    rhs_minimum_index = i as Field;\n                }\n            }\n        }\n        let target_lt_smallest_entry = target.lt(self.key_hashes[0]);\n        let target_gt_largest_entry = self.key_hashes[MaxNumValues - 1].lt(target);\n\n        let result_not_first_or_last = !target_lt_smallest_entry & !target_gt_largest_entry & !found;\n\n        let mut lhs_index = result_not_first_or_last as Field * lhs_maximum_index;\n        let mut rhs_index = result_not_first_or_last as Field * rhs_minimum_index;\n\n        // if target_lt_smallest_entry, rhs_index = 0\n        // if target_gt_largest_entry, lhs_index = TranscriptEntries - 1\n        rhs_index = rhs_index * (1 - target_lt_smallest_entry as Field);\n\n        // we rely here on the fact that target_gt_largest_entry and result_not_first_or_last are mutually exclusive\n        lhs_index = lhs_index  + target_gt_largest_entry as Field * (MaxNumValues as Field - 1);\n\n        // If target is FOUND, we want the following:\n        // keyhash[target_index] - 1 < hash < keyhash[target_index] + 1\n        lhs_index = lhs_index  + found as Field * found_index;\n        rhs_index = rhs_index  + found as Field * found_index;\n\n        KeySearchResult { found, target_lt_smallest_entry, target_gt_largest_entry, lhs_index, rhs_index }\n    }\n\n    /**\n     * @brief returns a bool that describes whether a given key exists at the root of the JSON\n     **/\n    fn key_exists<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> bool {\n        self.key_exists_impl_var(key).0\n    }\n\n    /**\n     * @brief implementation of `key_exists`. returns both a boolean and also the position in `self.json_entries_packed` of the key\n     * @description algorithm is O(1) because of the preprocessing we have done\n     *              Method computes a key hash and checks whether key hash exists in the list of sorted preprocessed key hashes\n     *              If it does *not* exist, we can find two adjacent entries in `key_hashes` where `key_hashes[i]` < target_key_hash < `key_hashes[i+1]`\n     **/\n    fn key_exists_impl<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> (bool, Field) {\n        /*\n            Option A: key exists\n            Option B: key does NOT exist\n\n            If key does NOT exist. 3 cases\n            case 1: keyhash < first entry\n            case 2: keyhash > last entry\n            case 3: entry A > keyhash > entryB\n\n        */\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key, 0, KeyBytes);\n\n        let HASH_MAXIMUM = 0x1000000000000000000000000000000000000000000000000000000000000 - 1;\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        let search_result = self.search_for_key_in_map(keyhash);\n        let found = search_result.found as Field;\n\n        let target_lt_smallest_entry = search_result.target_lt_smallest_entry as Field;\n        let target_gt_largest_entry = search_result.target_gt_largest_entry as Field;\n\n        assert(((search_result.lhs_index - search_result.rhs_index) * found) == 0);\n\n        // only one of \"found\", \"target_lt_smallest_entry\", \"target_gt_largest_entry\" can be true\n        let exclusion_test = found + target_gt_largest_entry + target_lt_smallest_entry;\n        assert(exclusion_test * exclusion_test == exclusion_test);\n\n        let mut lhs = self.key_hashes[search_result.lhs_index];\n        let mut rhs = self.key_hashes[search_result.rhs_index];\n\n        // case where hash < self.key_hashes[0]\n        // 0 < hash < hashes[0]\n        lhs = lhs * (1 - target_lt_smallest_entry);\n\n        // case where hash > self.key_hashes[last]\n        // largest < x < -1\n        rhs = rhs * (1 - target_gt_largest_entry) + target_gt_largest_entry * HASH_MAXIMUM;\n\n        // case where hash == self.key_hashes[found_index]\n        lhs = lhs - found;\n        rhs = rhs + found;\n\n        assert_gt_240_bit(keyhash, lhs);\n        assert_lt_240_bit(keyhash, rhs);\n\n        (search_result.found, search_result.lhs_index)\n    }\n\n    /**\n     * @brief implementation of `key_exists`. returns both a boolean and also the position in `self.json_entries_packed` of the key\n     * @description algorithm is O(1) because of the preprocessing we have done\n     *              Method computes a key hash and checks whether key hash exists in the list of sorted preprocessed key hashes\n     *              If it does *not* exist, we can find two adjacent entries in `key_hashes` where `key_hashes[i]` < target_key_hash < `key_hashes[i+1]`\n     **/\n    fn key_exists_impl_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> (bool, Field) {\n        /*\n            Option A: key exists\n            Option B: key does NOT exist\n\n            If key does NOT exist. 3 cases\n            case 1: keyhash < first entry\n            case 2: keyhash > last entry\n            case 3: entry A > keyhash > entryB\n\n        */\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key.storage, 0, key.len as u32);\n\n        let HASH_MAXIMUM = 0x1000000000000000000000000000000000000000000000000000000000000 - 1;\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        let search_result = self.search_for_key_in_map(keyhash);\n        let found = search_result.found as Field;\n\n        let target_lt_smallest_entry = search_result.target_lt_smallest_entry as Field;\n        let target_gt_largest_entry = search_result.target_gt_largest_entry as Field;\n\n        assert(((search_result.lhs_index - search_result.rhs_index) * found) == 0);\n\n        // only one of \"found\", \"target_lt_smallest_entry\", \"target_gt_largest_entry\" can be true\n        let exclusion_test = found + target_gt_largest_entry + target_lt_smallest_entry;\n        assert(exclusion_test * exclusion_test == exclusion_test);\n\n        let mut lhs = self.key_hashes[search_result.lhs_index];\n        let mut rhs = self.key_hashes[search_result.rhs_index];\n\n        // case where hash < self.key_hashes[0]\n        // 0 < hash < hashes[0]\n        lhs = lhs * (1 - target_lt_smallest_entry);\n\n        // case where hash > self.key_hashes[last]\n        // largest < x < -1\n        rhs = rhs * (1 - target_gt_largest_entry) + target_gt_largest_entry * HASH_MAXIMUM;\n\n        // case where hash == self.key_hashes[found_index]\n        lhs = lhs - found;\n        rhs = rhs + found;\n\n        assert_gt_240_bit(keyhash, lhs);\n        assert_lt_240_bit(keyhash, rhs);\n\n        (search_result.found, search_result.lhs_index)\n    }\n\n    unconstrained fn __get_keys_at_root<let MaxNumKeys: u32>(self) -> BoundedVec<Field, MaxNumKeys> {\n        let mut result: BoundedVec<Field, MaxNumKeys> = BoundedVec { len: 0, storage: [0; MaxNumKeys] };\n\n        let root_object: JSONEntry = JSONEntry::from(self.json_entries_packed[self.root_index_in_transcript]);\n\n        let mut result_ptr = 0;\n        for i in 0..MaxNumValues {\n            let target_entry: JSONEntry = JSONEntry::from(self.unsorted_json_entries_packed[i]);\n            if (target_entry.parent_index == self.root_id) {\n                result.storage[result_ptr] = i as Field;\n                result_ptr += 1;\n            }\n        }\n        assert(result_ptr == root_object.num_children);\n        result.len = result_ptr as u32;\n        result\n    }\n    fn get_keys_at_root<let MaxNumKeys: u32, let MaxKeyBytes: u32>(self) -> BoundedVec<BoundedVec<u8, MaxKeyBytes>, MaxNumKeys> {\n        let root_object: JSONEntry = JSONEntry::from(self.json_entries_packed[self.root_index_in_transcript]);\n        let key_indices: BoundedVec<Field, MaxNumKeys> = self.__get_keys_at_root();\n\n        assert(key_indices.len as Field == root_object.num_children);\n\n        let mut result: BoundedVec<BoundedVec<u8, MaxKeyBytes>, MaxNumKeys> = BoundedVec { len: 0, storage: [BoundedVec { len: 0, storage: [0; MaxKeyBytes] }; MaxNumKeys] };\n        for i in 0..MaxNumKeys {\n            let key = KeyIndexData::from_field(self.key_data[key_indices.storage[i]]);\n            // just a workaround to the interface for `extract_string_entry`\n            let mut fake_entry = JSONEntry::new();\n            fake_entry.json_pointer = key.json_index;\n            fake_entry.json_length = key.json_length;\n            result.storage[i].storage = self.extract_string_entry(fake_entry);\n            result.storage[i].len = key.json_length as u32;\n        }\n        result.len = key_indices.len;\n        result\n    }\n}\n\n#[test]\nfn test_get_keys_at_root() {\n    let s = \"{ \\\"A\\\": 1, \\\"foo\\\": false, \\\"bar\\\": { \\\"one\\\" : \\\"A\\\", \\\"two\\\" : \\\"B\\\"}, \\\"baz\\\": \\\"12345\\\"  }\";\n\n    let json: JSON<77, 6, 30, 30, 2> = JSON::parse_json_from_string(s);\n\n    let keys: BoundedVec<BoundedVec<u8, 5>, 5> = json.get_keys_at_root();\n\n    assert(keys.len == 4);\n    assert(keys.storage[0] == BoundedVec::from_array(\"A\".as_bytes()));\n    assert(keys.storage[1] == BoundedVec::from_array(\"foo\".as_bytes()));\n    assert(keys.storage[2] == BoundedVec::from_array(\"bar\".as_bytes()));\n    assert(keys.storage[3] == BoundedVec::from_array(\"baz\".as_bytes()));\n}\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_json_parserv0.2.0/src/getters.nr"},"79":{"source":"struct TokenFlags {\n    create_json_entry: Field,\n    is_end_of_object_or_array: Field,\n    is_start_of_object_or_array: Field,\n    new_context: Field,\n    is_key_token: Field,\n    is_value_token: Field,\n    preserve_num_entries: Field,\n}\n\nimpl TokenFlags {\n\n    unconstrained fn __from_field(f: Field) -> Self {\n        let bytes: [u8; 7] = f.to_be_bytes();\n        let create_json_entry = bytes[0] as Field;\n        let is_end_of_object_or_array = bytes[1] as Field;\n        let is_start_of_object_or_array = bytes[2] as Field;\n        let new_context = bytes[3] as Field;\n        let is_key_token = bytes[4] as Field;\n        let is_value_token = bytes[5] as Field;\n        let preserve_num_entries = bytes[6] as Field;\n\n        TokenFlags {\n            create_json_entry,\n            is_end_of_object_or_array,\n            is_start_of_object_or_array,\n            new_context,\n            is_key_token,\n            is_value_token,\n            preserve_num_entries\n        }\n    }\n\n    fn from_field(f: Field) -> Self {\n        // 10 gates\n        let r = TokenFlags::__from_field(f);\n\n        assert(r.create_json_entry * r.create_json_entry == r.create_json_entry);\n        assert(r.is_end_of_object_or_array * r.is_end_of_object_or_array == r.is_end_of_object_or_array);\n        assert(\n            r.is_start_of_object_or_array * r.is_start_of_object_or_array\n            == r.is_start_of_object_or_array\n        );\n        assert(r.new_context * r.new_context == r.new_context);\n        assert(r.is_key_token * r.is_key_token == r.is_key_token);\n        assert(r.is_value_token * r.is_value_token == r.is_value_token);\n        assert(r.preserve_num_entries * r.preserve_num_entries == r.preserve_num_entries);\n\n        assert(r.to_field() == f);\n        r\n    }\n\n    // 4 gates\n    fn to_field(self) -> Field {\n        self.preserve_num_entries\n            + self.is_value_token * 0x100\n            + self.is_key_token * 0x10000\n            + self.new_context * 0x1000000\n            + self.is_start_of_object_or_array * 0x100000000\n            + self.is_end_of_object_or_array * 0x10000000000\n            + self.create_json_entry * 0x1000000000000\n    }\n\n    fn default() -> Self {\n        TokenFlags {\n            create_json_entry: 0,\n            is_end_of_object_or_array: 0,\n            is_start_of_object_or_array: 0,\n            new_context: 0,\n            is_key_token: 0,\n            preserve_num_entries: 0,\n            is_value_token: 0\n        }\n    }\n}\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_json_parserv0.2.0/src/token_flags.nr"},"80":{"source":"use crate::json::JSON;\nuse crate::json_entry::{JSONEntryPacked, JSONEntry};\nuse crate::_comparison_tools::lt::lt_field_16_bit;\nuse crate::_comparison_tools::lt::lte_field_240_bit;\nuse crate::_comparison_tools::lt::assert_lte_240_bit;\nuse crate::json_tables::TOKEN_ENDS_OBJECT_OR_ARRAY;\nuse crate::_string_tools::slice_packed_field::slice_fields;\nuse crate::keyhash::FieldHasher;\n\nuse dep::noir_sort;\n\nuse dep::std::hash::poseidon2;\nstruct KeyIndexData {\n    json_index: Field,\n    json_length: Field,\n    parent_id: Field,\n    array_index: Field,\n}\n\nimpl KeyIndexData {\n    fn to_field(self) -> Field {\n        self.parent_id\n            + self.json_index as Field * 0x10000\n            + self.json_length as Field * 0x100000000\n            + self.array_index * 0x1000000000000\n    }\n\n    unconstrained fn __from_field(packed: Field) -> Self {\n        let unpacked: [u8; 8] = packed.to_be_bytes();\n        let array_index: Field = unpacked[1] as Field + unpacked[0] as Field * 0x100;\n        let json_length: Field = unpacked[3] as Field + unpacked[2] as Field * 0x100;\n        let json_index: Field = unpacked[5] as Field + unpacked[4] as Field * 0x100;\n        let parent_id: Field = unpacked[7] as Field + unpacked[6] as Field * 0x100;\n        KeyIndexData { json_index, json_length, parent_id, array_index }\n    }\n\n    fn from_field(packed: Field) -> Self {\n        let result = KeyIndexData::__from_field(packed);\n        result.array_index.assert_max_bit_size(16);\n        result.json_length.assert_max_bit_size(16);\n        result.json_index.assert_max_bit_size(16);\n        result.parent_id.assert_max_bit_size(16);\n        assert(result.to_field() == packed);\n        result\n    }\n}\n\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n    fn compute_keyhash_and_sort_json_entries(&mut self) {\n        let hasher: FieldHasher<MaxKeyFields> = FieldHasher {};\n\n        let mut hashlist: [Field; MaxNumValues] = [0; MaxNumValues];\n\n        let two_pow_200 = 0x10000000000000000000000000000000000000000000000000000;\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n        for i in 0..MaxNumValues {\n            let KeyIndexData{ json_index, json_length, parent_id, array_index } = KeyIndexData::from_field(self.key_data[i]);\n            let hash = hasher.get_keyhash(self.json_packed, json_index, json_length);\n            hashlist[i] = hash + array_index * two_pow_200 + parent_id * two_pow_216;\n        }\n\n        hashlist[MaxNumValues - 1] = 0; // we always ensure the last (unused hopefully!) entry goes first.\n\n        self.json_entries_packed[MaxNumValues - 1] = JSONEntryPacked::default();\n        // when updating identity_to_json_map we are relying on the fact that we can update sorted entry 0? maybe? oof document better\n        let sort_result = noir_sort::sort_advanced(hashlist, lte_field_240_bit, assert_lte_240_bit);\n\n        let mut sorted_entries: [JSONEntryPacked; MaxNumValues] = [JSONEntryPacked::default(); MaxNumValues];\n        for i in 0..MaxNumValues {\n            sorted_entries[sort_result.sort_indices[i]] = self.json_entries_packed[i];\n        }\n\n        let mut ids: [Field; MaxNumValues] = [0; MaxNumValues];\n        let mut parent_indices: [Field; MaxNumValues] = [0; MaxNumValues];\n        let mut entry_types: [Field; MaxNumValues] = [0; MaxNumValues];\n\n        for i in 0..MaxNumValues {\n            // 11.75 + 3.5 = 15.25 gates per iteration\n            let (id, parent_index, entry_type) = JSONEntry::extract_entry_type_id_and_parent_index_from_field(sorted_entries[i].value);\n            ids[i] = id;\n            parent_indices[i] = parent_index;\n            entry_types[i] = entry_type;\n        }\n\n        let mut identity_to_json_map: [Field; MaxNumValues] = [0; MaxNumValues];\n        // 6.5 gates per iteration\n        for i in 0..MaxNumValues {\n            let id = ids[i];\n            let entry_type = entry_types[i];\n            // 2 gates\n            let update = TOKEN_ENDS_OBJECT_OR_ARRAY[entry_type];\n            // NOTE THIS RELIES ON MaxNumValues ACTUALLY DESCRIBING NUMMaxNumValues + 1\n            // 1 gate\n            let index = (id - (MaxNumValues as Field - 1)) * update + (MaxNumValues as Field - 1);\n            // 3.5 gates\n            identity_to_json_map[index] = i as Field;\n        }\n\n        // 13.5 gates per iteration\n        let mut parent_identity_pre = parent_indices[0];\n        for i in 1..MaxNumValues {\n            let parent_identity_post = parent_indices[i];\n            // if the parent identity changes,\n\n            // 3.5 gate\n            // the list is sorted according to parent_ideneity,\n            // n.b. parent_identity_post - parent_identity_pre is not neccessarily 0 or 1 (can be larger)\n            //      due to empty objects and arrays increasing identity value without creating associated child json entries\n            let new_parent = lt_field_16_bit(parent_identity_pre, parent_identity_post) as Field;\n            // let new_parent = (parent_identity_post as u32 > parent_identity_pre as u32) as Field;\n            // 3.5 gates\n            let index_of_parent = identity_to_json_map[parent_identity_post];\n            // 1 gate + 3.5 gates\n            let updated = JSONEntry::add_child_pointer_into_field(sorted_entries[index_of_parent].value, i as Field);\n\n            // RELIES ON THE SMALLEST ENTRY IN THE SORTED LIST BEING EMPTY\n            // 1 gate\n            let index = (index_of_parent * new_parent);\n            // 3.5 gates\n            sorted_entries[index] = JSONEntryPacked{ value: updated };\n\n            parent_identity_pre = parent_identity_post;\n        }\n        sorted_entries[0] = JSONEntryPacked::default(); // TODO document why we want to always make 0 a dead entry\n\n        self.unsorted_json_entries_packed = self.json_entries_packed;\n        self.json_entries_packed = sorted_entries;\n        self.key_hashes = sort_result.sorted;\n        self.set_root_entry();\n    }\n\n    unconstrained fn __find_root_entry(self) -> Field {\n        let mut found_index = 0;\n        for i in 0..MaxNumValues {\n            let entry : JSONEntry = self.json_entries_packed[i].into();\n            if (entry.parent_index == 0) & (self.json_entries_packed[i].value != 0) {\n                found_index = i as Field;\n                break;\n            }\n        }\n        found_index\n    }\n\n    fn set_root_entry(&mut self) {\n        let root_index = self.__find_root_entry();\n\n        let packed_entry = self.json_entries_packed[root_index];\n        let entry: JSONEntry = packed_entry.into();\n\n        assert(packed_entry.value != 0);\n        assert(entry.parent_index == 0);\n        self.root_index_in_transcript = root_index;\n    }\n}\n\n// 68002\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_json_parserv0.2.0/src/keymap.nr"},"81":{"source":"use crate::json_entry::JSONEntry;\nuse crate::json::JSON;\nuse crate::_comparison_tools::lt::lt_field_16_bit;\nuse crate::json_tables::ASCII_TO_NUMBER;\nuse crate::enums::Token::NUMERIC_TOKEN;\nuse crate::enums::Layer::{OBJECT_LAYER, ARRAY_LAYER};\nuse crate::getters::JSONValue;\n\nglobal U64_LENGTH_AS_BASE10_STRING = 20;\nglobal NUMBER_OFFSET_SHIFT: [Field; 21] = [\n    100000000000000000000,10000000000000000000,1000000000000000000,100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000, 1000000000000, 100000000000, 10000000000, 1000000000, 100000000,10000000,1000000,100000,10000,1000,100,10,1\n];\n\nfn extract_number_from_array(arr: [u8; U64_LENGTH_AS_BASE10_STRING], json_length: Field) -> u64 {\n    let mut parsed_number: Field = 0;\n    for i in 0..U64_LENGTH_AS_BASE10_STRING {\n        parsed_number *= 10;\n\n        let value = ASCII_TO_NUMBER[arr[i]] as Field;\n        parsed_number += value;\n    }\n    parsed_number /= NUMBER_OFFSET_SHIFT[json_length];\n    parsed_number as u64\n}\n\n/**\n * @brief getter methods for extracting numeric values out of a JSON struct\n * @note numeric values must fit into a `u64` type.\n *       decimal values and scientific notation are not yet supported\n **/\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> JSON<NumBytes,NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n\n    /**\n     * @brief if the root JSON is an object, extract a numeric value given by `key`\n     * @description returns an Option<u64> which will be null if the key does not exist\n     **/\n    fn get_number<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<u64> {\n        let (exists, entry) = self.get_json_entry(key);\n        assert(\n            (entry.entry_type - NUMERIC_TOKEN) * exists as Field == 0, \"get_number: entry exists but is not a number!\"\n        );\n        let mut parsed_string: [u8; U64_LENGTH_AS_BASE10_STRING] = self.extract_string_entry(entry);\n\n        Option { _is_some: exists, _value: extract_number_from_array(parsed_string, entry.json_length) }\n    }\n\n    /**\n     * @brief if the root JSON is an object, extract a u64 value given by `key`\n     * @description will revert if the number does not exist\n     **/\n    fn get_number_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> u64 {\n        let  entry = self.get_json_entry_unchecked(key);\n        assert(entry.entry_type == NUMERIC_TOKEN, \"get_number_unchecked: entry exists but is not a number!\");\n        let mut parsed_string: [u8; U64_LENGTH_AS_BASE10_STRING] = self.extract_string_entry(entry);\n\n        extract_number_from_array(parsed_string, entry.json_length)\n    }\n\n    /**\n     * @brief same as `get_number` for where the key length may be less than KeyBytes\n     **/\n    fn get_number_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<u64> {\n        let (exists, entry) = self.get_json_entry_var(key);\n        assert(\n            (entry.entry_type - NUMERIC_TOKEN) * exists as Field == 0, \"get_number: entry exists but is not a number!\"\n        );\n        let mut parsed_string: [u8; U64_LENGTH_AS_BASE10_STRING] = self.extract_string_entry(entry);\n\n        Option { _is_some: exists, _value: extract_number_from_array(parsed_string, entry.json_length) }\n    }\n\n    /**\n     * @brief same as `get_number_unchecked` for where the key length may be less than KeyBytes\n     **/\n    fn get_number_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> u64 {\n        let  entry = self.get_json_entry_unchecked_var(key);\n        assert(entry.entry_type == NUMERIC_TOKEN, \"get_number_unchecked: entry exists but is not a number!\");\n        let mut parsed_string: [u8; U64_LENGTH_AS_BASE10_STRING] = self.extract_string_entry(entry);\n\n        extract_number_from_array(parsed_string, entry.json_length)\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract a numeric value given by the position of the target in the source array\n     * @description returns an Option<u64> which will be null if the number does not exist\n     **/\n    fn get_number_from_array(self, array_index: Field) -> Option<u64> {\n        assert(self.layer_type_of_root == ARRAY_LAYER, \"can only acceess array elements from array\");\n\n        let parent_entry : JSONEntry = self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        let entry_index = (parent_entry.child_pointer + array_index) * valid as Field;\n\n        let entry : JSONEntry = self.json_entries_packed[entry_index].into();\n\n        assert(\n            (entry.entry_type - NUMERIC_TOKEN) * valid as Field == 0, \"get_number: entry exists but is not a number!\"\n        );\n\n        let mut parsed_string: [u8; U64_LENGTH_AS_BASE10_STRING] = self.extract_string_entry(entry);\n        let result = extract_number_from_array(parsed_string, entry.json_length);\n\n        Option { _is_some: valid, _value: result }\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract a numeric value given by the position of the target in the source array\n     * @description will revert if the number does not exist\n     **/\n    fn get_number_from_array_unchecked(self, array_index: Field) -> u64 {\n        assert(self.layer_type_of_root == ARRAY_LAYER, \"can only acceess array elements from array\");\n\n        let parent_entry : JSONEntry = self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        assert(valid, \"array overflow\");\n        let entry_index = (parent_entry.child_pointer + array_index);\n\n        let entry : JSONEntry = self.json_entries_packed[entry_index].into();\n\n        assert(entry.entry_type == NUMERIC_TOKEN, \"get_number: entry exists but is not a number!\");\n\n        let mut parsed_string: [u8; U64_LENGTH_AS_BASE10_STRING] = self.extract_string_entry(entry);\n        extract_number_from_array(parsed_string, entry.json_length)\n    }\n}\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_json_parserv0.2.0/src/get_number.nr"},"82":{"source":"\n\n/*\n\nwhen iterating from 0 to N, validate i < M efficiently\nwe have an array of flags that describe whether entry is valid\nflags start at 1 and at 0 more or less\n\nwe check:\n1. flag starts at 0 or 1\n2. flag transition cannot be 0 -> 1 i.e. new_flag * (1 - old_flag) == 0\n3. flag ends at 0 or 1\n\nthe above validates that only one transition point occurs\nwe still need to test the transition point\n\ntransition happens when we get 1 -> 0 i.e. tx = i * (old_flag * (1 - new_flag))\nin this case, i == M\n\n// o * (1 - n) = o - on\n// n * (1 - o) = n - on\n// i*(o - on) * (1/i) - o + n\n*/\n\n/**\n * @brief helper method that provides an array of Field elements `flags`, where `flags[i] = i < boundary`\n * @description this method is cheaper than querying `i < boundary` for `u16` and `u32` types\n *              cost = 3 gates + 2 gates per iteration \n **/\npub fn get_validity_flags<let N: u32>(boundary: u32) -> [Field; N] {\n    let flags: [Field; N] = __get_validity_flags(boundary);\n    get_validity_flags_inner(boundary, flags)\n}\n\nunconstrained fn __get_validity_flags<let N: u32>(boundary: u32) -> [Field; N] {\n    let mut result: [Field; N] = [0; N];\n    for i in 0..N {\n        if i < boundary {\n            result[i] = 1;\n        }\n    }\n    result\n}\n\n/**\n * @brief implementation of `get_validity_flags`\n * @description Given an array of `flags`, we apply the following checks to build an inductive proof about the validity of the flags array:\n *              1. the first element `flags[0]` is in the range [0,1]\n *              2. the last element `flags[N-1]` is in the range [0,1]\n *              3. for any two flags `old, new` where `old = flags[i-1], new = flags[i]` and `i>0, i <N`, we validate the following:\n *                  a. if `old` is 0, `new` *cannot* equal 1\n *                  b. if `old` is 1 and `new` is 0, set `transition_index = i`\n *  The value of `transition_index` will equal the value `i` where `i = boundary` (or `N` if `boundary > N`)\n *              4. we finally validate `transition_index == boundary` to prove the location where `flags[i-1] = 1` and `flags[i] = 0`\n *                 aligns with what is expected from testing `i < boundary`\n *  N.B. this method will revert if `boundary > N`\n **/\nfn get_validity_flags_inner<let N: u32>(boundary: u32, flags: [Field; N]) -> [Field; N] {\n    let initial_flag = flags[0];\n    let final_flag = flags[N - 1];\n\n    // check first and last flags are in the range [0, 1]\n    assert(initial_flag * initial_flag == initial_flag);\n    assert(final_flag * final_flag == final_flag);\n\n    let mut transition_index = 0;\n\n    for i in 1..N {\n        let old_flag = flags[i - 1];\n        let new_flag = flags[i];\n        assert(new_flag == old_flag * new_flag);\n\n        // old = a, new = b\n        let idx = (old_flag * (1 - new_flag)) * (i as Field);\n        transition_index = transition_index + idx;\n        std::as_witness(transition_index);\n    }\n\n    assert(transition_index == boundary as Field);\n    flags\n}\n\n#[test]\nfn test_get_validity_flags() {\n    for i in 0..32 {\n        let flags: [Field; 32] = get_validity_flags(i);\n        for j in 0..32 {\n            assert(flags[j] == (j < i) as Field);\n        }\n    }\n}\n\n#[test(should_fail)]\nfn test_get_validity_flags_fail() {\n    let _ = get_validity_flags(33);\n}\n\n#[test(should_fail)]\nfn test_get_validity_flags_bad_index_fail_a() {\n    let bad_flags: [Field; 10] = [1, 1, 1, 0, 0, 0, 1, 0, 0, 0];\n    let _ = get_validity_flags_inner(3, bad_flags);\n}\n#[test(should_fail)]\nfn test_get_validity_flags_bad_index_fail_b() {\n    let bad_flags: [Field; 10] = [1, 1, 1, 1, 0, 0, 0, 0, 0, 0];\n    let _ = get_validity_flags_inner(3, bad_flags);\n}\n\n#[test(should_fail)]\nfn test_get_validity_flags_bad_index_fail_c() {\n    let bad_flags: [Field; 10] = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0];\n    let _ = get_validity_flags_inner(3, bad_flags);\n}\n\n#[test]\nfn test_get_validity_flags_good_index_d() {\n    let bad_flags: [Field; 10] = [1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\n    let _ = get_validity_flags_inner(3, bad_flags);\n}\n\n#[test(should_fail)]\nfn test_get_validity_flags_bad_index_fail_e() {\n    let bad_flags: [Field; 10] = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n    let _ = get_validity_flags_inner(11, bad_flags);\n}\n\n// this test uses bad flags but manipulates transition_index to be satisfiable\n// nevertheless test will fail because our transition test (old * new = new) will fail\n#[test(should_fail)]\nfn test_get_validity_flags_bad_index_fail_f() {\n    let mut bad_flags: [Field; 10] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n    let fake_index_a = 2;\n    let fake_value_a = 100;\n\n    let fake_index_b = 4;\n    // 4 * Y = -2 * X\n    let fake_value_b = (-fake_value_a * fake_index_a) / fake_index_b;\n\n    bad_flags[fake_index_a] = fake_value_a;\n    bad_flags[fake_index_b] = fake_value_b;\n    let _ = get_validity_flags_inner(0, bad_flags);\n}\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_json_parserv0.2.0/src/_comparison_tools/bounds_checker.nr"},"83":{"source":"/**\n * @file helper methods that evaluate comparison operations on Field elements that are known to be of a fixed size (e.g. <2^16)\n **/\nunconstrained pub fn get_lt_predicate_f(x: Field, y: Field) -> bool {\n    let a = x as u32;\n    let b = y as u32;\n    let r = a < b;\n    r\n}\n\nunconstrained pub fn get_lte_predicate_large(x: Field, y: Field) -> bool {\n    let r = x.lt(y) | (x == y);\n    r\n}\n\npub fn lte_field_240_bit(x: Field, y: Field) -> bool {\n    let predicate = get_lte_predicate_large(x, y);\n    let delta = y as Field - x as Field;\n\n    // (x - y) * predicate \n    // if true, y - x >= 0\n    // if false, x <= y is wrong therefore x > y => x - y > 0 => x - y + 1 >= 0\n    // (y - x) * p + (1 - p) * (x - y + 1)\n    // (y - x) * p + x - y + 1 + p * (y - x)\n    let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta + 1;\n    lt_parameter.assert_max_bit_size(240);\n\n    predicate\n}\n\npub fn assert_lte_240_bit(x: Field, y: Field) {\n    let delta = y as Field - x as Field;\n\n    // (x - y) * predicate \n    // if true, y - x >= 0\n    // if false, x <= y is wrong therefore x > y => x - y > 0 => x - y + 1 >= 0\n    // (y - x) * p + (1 - p) * (x - y + 1)\n    // (y - x) * p + x - y + 1 + p * (y - x)\n    delta.assert_max_bit_size(240);\n}\n\npub fn lt_field_16_bit(x: Field, y: Field) -> bool {\n    let predicate = get_lt_predicate_f(x, y);\n    let delta = y as Field - x as Field;\n    let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta;\n    lt_parameter.assert_max_bit_size(16);\n\n    predicate\n}\n\npub fn lt_field_8_bit(x: Field, y: Field) -> bool {\n    let predicate = get_lt_predicate_f(x, y);\n    let delta = y as Field - x as Field;\n    let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta;\n    lt_parameter.assert_max_bit_size(8);\n\n    predicate\n}\n\npub fn assert_gt_240_bit(lhs: Field, rhs: Field) {\n    // lhs > rhs\n    // -> lhs - rhs > 0\n    // -> lhs - rhs - 1 >= 0\n    let diff = lhs - rhs - 1;\n    diff.assert_max_bit_size(240);\n}\n\npub fn assert_lt_240_bit(lhs: Field, rhs: Field) {\n    // lhs < rhs\n    // -> rhs - lhs > 0\n    // -> rhs - lhs - 1 >= 0\n    let diff = rhs - lhs - 1;\n    diff.assert_max_bit_size(240);\n}\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_json_parserv0.2.0/src/_comparison_tools/lt.nr"},"87":{"source":"use crate::_string_tools::slice_packed_field::slice_fields;\nuse crate::_string_tools::slice_field::slice_200_bits_from_field;\n\n/**\n * @brief utility struct that computes a 200-bit Poseidon hash of some bytes,\n *        when the bytes are represented as packed 31 byte Field elements\n * @note we wrap `get_keyhash` in a struct so that the KeyFields parameter can be defined ahead of time\n **/\nstruct FieldHasher<let KeyFields: u32>\n{}\n\nimpl<let KeyFields: u32> FieldHasher<KeyFields> {\n\n    fn get_keyhash<let NumPackedFields: u32>(\n        _: Self,\n        packed_fields: [Field; NumPackedFields],\n        body_index: Field,\n        key_length: Field\n    ) -> Field {\n        let key_fields: [Field; KeyFields] = slice_fields(packed_fields, body_index, key_length);\n        let hashed = dep::std::hash::poseidon2::Poseidon2::hash(key_fields, KeyFields as u32);\n        slice_200_bits_from_field(hashed)\n    }\n}\n\n/**\n * @brief utility struct that computes a 200-bit Poseidon hash of some bytes,\n *        when the bytes are represented as a substring in a byte array\n * @note we wrap `get_keyhash` in a struct so that the KeyFields parameter can be defined ahead of time\n * @note produces identical hash outputs when compared w. FieldHasher\n **/\nstruct ByteHasher<let KeyFields: u32>\n{}\n\nimpl<let KeyFields: u32> ByteHasher<KeyFields> {\n\n    fn get_keyhash_var<let N: u32>(\n        _: Self,\n        body_text: [u8; N],\n        body_index: u32,\n        key_length: u32\n    ) -> Field {\n        assert(key_length < KeyFields * 31, \"key too large\");\n\n        let mut key_fields: [Field; KeyFields] = [0; KeyFields];\n\n        let mut key_idx: u32 = 0;\n        let mut limb = 0;\n\n        for j in 0..KeyFields {\n            limb = 0;\n\n            for _ in 0..31 {\n                let valid = (key_idx < key_length) as Field;\n                limb *= 0x100;\n                let byte_index = (body_index as Field + key_idx as Field) * valid;\n                let byte = body_text[byte_index] as Field;\n                limb += byte * valid;\n                key_idx += 1;\n            }\n            key_fields[j] = limb;\n        }\n\n        let hashed_full = dep::std::hash::poseidon2::Poseidon2::hash(key_fields, KeyFields as u32);\n\n        let mut r = slice_200_bits_from_field(hashed_full);\n        r\n    }\n}\n\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_json_parserv0.2.0/src/keyhash.nr"},"88":{"source":"/**\n * @brief contains data we need to keep track when, in `create_json_entries`, we enter or exist from an object or array\n **/\nstruct JSONContextStackEntry {\n    num_entries: Field,\n    context: Field,\n    current_key_index_and_length: Field,\n    json_index: Field,\n    current_identity: Field\n}\nimpl JSONContextStackEntry {\n    unconstrained fn __from_field(f: Field) -> Self {\n        let bytes: [u8; 11] = f.to_be_bytes();\n        let context = bytes[0] as Field;\n        let num_entries = bytes[1] as Field * 0x100 + bytes[2] as Field;\n        let current_key_length = bytes[3] as Field * 0x100 + bytes[4] as Field;\n        let current_key_index = bytes[5] as Field * 0x100 + bytes[6] as Field;\n        let json_index = bytes[7] as Field * 0x100 + bytes[8] as Field;\n        let current_identity = bytes[9] as Field * 0x100 + bytes[10] as Field;\n        let current_key_index_and_length = current_key_index + current_key_length * 0x10000;\n        JSONContextStackEntry { num_entries, context, current_key_index_and_length, json_index, current_identity }\n    }\n\n    /**\n     * @brief we pack multiple values into a Field element in order to reduce the number of array read/write queries we need\n     *        (each query will be 3.5 gates as we read and write from/to unknown locations)\n     * @note method cost = 9.5 gates\n     **/\n    fn from_field(f: Field) -> Self {\n        let result = JSONContextStackEntry::__from_field(f);\n\n        result.context.assert_max_bit_size(8); // 1.25\n        result.num_entries.assert_max_bit_size(16); // 1.5\n        result.current_key_index_and_length.assert_max_bit_size(32); // 1.75\n        result.json_index.assert_max_bit_size(16); // 1.5\n        result.current_identity.assert_max_bit_size(16); // 1.5\n        assert(result.to_field() == f); // 2\n        result\n    }\n\n    /**\n     * @brief we pack multiple values into a Field element in order to reduce the number of array read/write queries we need\n     *        (each query will be 3.5 gates as we read and write from/to unknown locations)\n     * @note method cost = 2 gates\n     **/\n    fn to_field(self) -> Field {\n        self.current_identity\n            + self.json_index * 0x10000\n            + self.current_key_index_and_length * 0x100000000\n            + self.num_entries * 0x10000000000000000\n            + self.context * 0x100000000000000000000\n    }\n}\n\n/**\n * @brief describes a single array, object or value within our JSON\n **/\nstruct JSONEntry {\n    entry_type: Field, // is this an OBJECT_TOKEN, ARRAY_TOKEN, STRING_TOKEN, NUMERIC_TOKEN or LITERAL_TOKEN?\n    id: Field, // if this is an object or array, describes the unique identifier assigned to this item\n    parent_index: Field, // if parent is an object or array, describes the unique identifier assigned to our parent\n    array_pointer: Field, // if parent is an array, where in the array are we?\n    child_pointer: Field, // if this is an object or array, points to the location in `json_entries_packed` of this item's first child\n    num_children: Field, // if this is an object or array, how many child elements do we contain?\n    json_pointer: Field, // points to the json that describes the first byte of this entry\n    json_length: Field, // how many bytes in the json describes this item? (only for strings, numbers or literals)\n}\nimpl JSONEntry {\n    fn new() -> Self {\n        JSONEntry {\n            array_pointer: 0,\n            entry_type: 0,\n            child_pointer: 0,\n            num_children: 0,\n            json_pointer: 0,\n            json_length: 0,\n            parent_index: 0,\n            id: 0\n        }\n    }\n\n    unconstrained fn __extract_parent_index_from_field(f: Field) -> (Field, Field, Field) {\n        let entry = JSONEntry::from_field(f);\n        let low = entry.id;\n        let mid = entry.parent_index;\n        let hi = (f - low - mid * 0x10000) / 0x100000000;\n        (low, mid, hi)\n    }\n\n    fn add_child_pointer_into_field(f: Field, child_pointer: Field) -> Field {\n        f + child_pointer * 0x100000000000000000000\n    }\n    unconstrained fn __extract_entry_type_and_id_from_field(f: Field) -> (Field, Field, Field) {\n        let entry = JSONEntry::from_field(f);\n        let id = entry.id;\n        let entry_type = entry.entry_type;\n        let mid = (f - id - entry_type * 0x100000000000000000000000000000000000000) / 0x10000;\n        (id, mid, entry_type)\n    }\n    unconstrained fn __extract_entry_type_id_and_parent_index_from_field(f: Field) -> (Field, Field, Field, Field) {\n        let entry = JSONEntry::from_field(f);\n        let id = entry.id;\n        let entry_type = entry.entry_type;\n        let parent_index = entry.parent_index;\n        let mid = (f - id - parent_index * 0x10000 - entry_type * 0x100000000000000000000000000000000000000)\n            / 0x100000000;\n        (id, parent_index, mid, entry_type)\n    }\n\n    // 11.75 gates\n    fn extract_entry_type_id_and_parent_index_from_field(f: Field) -> (Field, Field, Field) {\n        let (id, parent_index, mid, entry_type) = JSONEntry::__extract_entry_type_id_and_parent_index_from_field(f);\n        id.assert_max_bit_size(8); // 1.25\n        parent_index.assert_max_bit_size(16); // 1.5\n        entry_type.assert_max_bit_size(16); // 1.5\n        mid.assert_max_bit_size(136); // 5.5\n\n        assert(\n            id\n            + parent_index * 0x10000\n            + mid * 0x100000000\n            + entry_type * 0x100000000000000000000000000000000000000\n            == f\n        );\n\n        (id, parent_index, entry_type)\n    }\n    fn extract_entry_type_and_id_from_field(f: Field) -> (Field, Field) {\n        let (id, mid, entry_type) = JSONEntry::__extract_entry_type_and_id_from_field(f);\n        id.assert_max_bit_size(8); // 1.25\n        entry_type.assert_max_bit_size(16); // 1.5\n        mid.assert_max_bit_size(136); // 5.5\n\n        assert(id + mid * 0x10000 + entry_type * 0x100000000000000000000000000000000000000 == f);\n        (id, entry_type)\n    }\n    fn extract_parent_index_from_field(f: Field) -> Field {\n        let (low, parent_index, hi) = JSONEntry::__extract_parent_index_from_field(f);\n\n        low.assert_max_bit_size(16); // 1.75\n        hi.assert_max_bit_size(128); // 5.5\n        parent_index.assert_max_bit_size(16); // 1.75\n        assert(low + parent_index * 0x10000 + hi * 0x100000000 == f); // 1\n        // 10 gates?\n        parent_index\n    }\n    unconstrained fn __from_field(f: Field) -> Self {\n        let bytes: [u8; 20] = f.to_be_bytes(); // 10.5 gates\n\n        let entry_type = bytes[0] as Field;\n\n        let json_length = bytes[2] as Field * 0x100 + bytes[3] as Field;\n        let json_pointer = bytes[4] as Field * 0x100 + bytes[5] as Field;\n        let num_children = bytes[6] as Field * 0x100 + bytes[7] as Field;\n        let child_pointer = bytes[8] as Field * 0x100 + bytes[9] as Field;\n        let array_pointer = bytes[10] as Field * 0x100 + bytes[11] as Field;\n        let parent_index = bytes[16] as Field * 0x100 + bytes[17] as Field; // 6 gates\n        let id = bytes[18] as Field * 0x100 + bytes[19] as Field; // 6 gates\n\n        JSONEntry { array_pointer, child_pointer, num_children, json_pointer, json_length, entry_type, parent_index, id }\n    }\n\n    fn to_field(self) -> Field {\n        self.id +\n        self.parent_index *    0x10000\n        + self.array_pointer * 0x10000000000000000                          // 2 bytes\n        + self.child_pointer * 0x100000000000000000000                      // 2 bytes\n        + self.num_children *  0x1000000000000000000000000                  // 2 bytes\n        + self.json_pointer *  0x10000000000000000000000000000              // 2 bytes\n        + self.json_length *   0x100000000000000000000000000000000          // 2 bytes\n        + self.entry_type *    0x100000000000000000000000000000000000000 // 1 byte\n        // 4 gates. oof\n    }\n    fn from_field(f: Field) -> Self {\n        let result = JSONEntry::__from_field(f);\n        result.entry_type.assert_max_bit_size(8);\n        result.json_length.assert_max_bit_size(16);\n        result.json_pointer.assert_max_bit_size(16);\n        result.num_children.assert_max_bit_size(16);\n        result.child_pointer.assert_max_bit_size(16);\n        result.array_pointer.assert_max_bit_size(16);\n        result.parent_index.assert_max_bit_size(16);\n        result.id.assert_max_bit_size(16);\n        assert(result.to_field() == f);\n        result\n    }\n}\n\nimpl std::convert::From<JSONEntryPacked> for JSONEntry {\n    fn from(JSONEntryPacked{ value: f }: JSONEntryPacked) -> Self {\n        let result = JSONEntry::__from_field(f);\n        result.entry_type.assert_max_bit_size(8);\n        result.json_length.assert_max_bit_size(16);\n        result.json_pointer.assert_max_bit_size(16);\n        result.num_children.assert_max_bit_size(16);\n        result.child_pointer.assert_max_bit_size(16);\n        result.array_pointer.assert_max_bit_size(16);\n        result.parent_index.assert_max_bit_size(16);\n        result.id.assert_max_bit_size(16);\n        assert(result.to_field() == f);\n        result\n    }\n}\n\nimpl std::cmp::Eq for JSONEntry {\n    // N.B. used for testing\n    fn eq(self, other: Self) -> bool {\n        let array_ptr = (self.array_pointer == other.array_pointer);\n        let entry = self.entry_type == other.entry_type;\n        let child = (self.child_pointer == other.child_pointer);\n        let num_children = (self.num_children == other.num_children);\n        let json_pointer = (self.json_pointer == other.json_pointer);\n        let json_length = (self.json_length == other.json_length);\n        array_ptr | entry | child | num_children | json_pointer | json_length\n    }\n}\n\n/**\n * @brief describes a JSONEntry object's data, but packed into a single field element.\n * @description We do this to minimize the number of array lookups we perform\n **/\nstruct JSONEntryPacked {\n    value: Field\n}\n\nimpl std::cmp::Eq for JSONEntryPacked {\n    fn eq(self, other: Self) -> bool {\n        self.value == other.value\n    }\n}\n\nimpl std::default::Default for JSONEntryPacked {\n    fn default() -> Self {\n        JSONEntryPacked { value: 0 }\n    }\n}\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_json_parserv0.2.0/src/json_entry.nr"},"89":{"source":"use crate::_comparison_tools::bounds_checker;\nuse crate::_comparison_tools::bounds_checker::get_validity_flags;\nuse crate::enums::Layer::{OBJECT_LAYER, ARRAY_LAYER, SINGLE_VALUE_LAYER};\nuse crate::enums::Token::{\n    BEGIN_OBJECT_TOKEN, END_OBJECT_TOKEN, BEGIN_ARRAY_TOKEN, END_ARRAY_TOKEN, KEY_SEPARATOR_TOKEN,\n    VALUE_SEPARATOR_TOKEN, STRING_TOKEN, NUMERIC_TOKEN, LITERAL_TOKEN, KEY_TOKEN, NUM_TOKENS\n};\nuse crate::enums::ScanMode::{GRAMMAR_SCAN, STRING_SCAN, NUMERIC_SCAN, LITERAL_SCAN};\nuse crate::get_literal::JSONLiteral;\nuse crate::json_entry::{JSONContextStackEntry, JSONEntry, JSONEntryPacked};\nuse crate::json_tables::{\n    TOKEN_VALIDATION_TABLE, PROCESS_RAW_TRANSCRIPT_TABLE, JSON_CAPTURE_TABLE, TOKEN_FLAGS_TABLE,\n    TOKEN_IS_ARRAY_OBJECT_OR_VALUE\n};\nuse crate::token_flags::TokenFlags;\nuse crate::transcript_entry::{ValidationFlags, TranscriptEntry, RawTranscriptEntry, ScanData, PostProcessScanData};\n\n/**\n * @brief records a value in a json blob\n **/\nstruct JSONValue<let MaxLength: u32> {\n    value: BoundedVec<u8, MaxLength>, // raw bytes that constitute the json value entry\n    value_type: Field // either STRING_TOKEN, NUMERIC_TOKEN or LITERAL_TOKEN\n}\n\nimpl<let MaxLength: u32> JSONValue<MaxLength> {\n    fn is_string(self) -> bool {\n        self.value_type == STRING_TOKEN\n    }\n    fn is_number(self) -> bool {\n        self.value_type == NUMERIC_TOKEN\n    }\n    fn is_literal(self) -> bool {\n        self.value_type == LITERAL_TOKEN\n    }\n}\n\n/**\n * @brief It's a JSON struct! Contains the raw and processed information required to extract data from a json blob\n * @description The \"root\" of the JSON refers to the parent object or array (or a value if the json is just a single value e.g. text = \"\\\"foo\\\": \\\"bar\\\"\")\n * @note text that describes just a single JSON value is not yet fully supported. Only use this library for processing objects or arrays for now\n **/\nstruct JSON<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> {\n    json: [u8; NumBytes], // the raw json bytes\n    json_packed: [Field; NumPackedFields], // raw bytes, but packed into 31-byte Field elements\n    raw_transcript: [Field; MaxNumTokens], // transcript of json tokens after basic processing\n    transcript: [Field; MaxNumTokens], // complete transcript of json tokens\n    transcript_length: u32, // how big is the transcript?\n    key_data: [Field; MaxNumValues], // description of each key, packed into a Field element\n    key_hashes: [Field; MaxNumValues], // a sorted list of key hashes\n    unsorted_json_entries_packed: [JSONEntryPacked; MaxNumValues], // a list of all the processed json values (objects, arrays, numerics, literals, strings)\n    json_entries_packed: [JSONEntryPacked; MaxNumValues], // a sorted list of all the processed json values (objects, arrays, numerics, literals, strings)\n    layer_type_of_root: Field, // is the root an OBJECT_LAYER, ARRAY_LAYER or SINGLE_VALUE_LAYER?\n    root_id: Field, // the unique identifier of the root (if an object or array)\n    root_index_in_transcript: Field // location in json_entries_packed of the root\n}\n\n/**\n * @brief are two JSON objects equal?\n * @note VERY EXPENSIVE! Currently only used in tests\n **/\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> std::cmp::Eq for JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n    fn eq(self, other: Self) -> bool {\n        (self.json == other.json)\n            & (self.raw_transcript == other.raw_transcript)\n            & (self.transcript == other.transcript)\n            & (self.transcript_length == other.transcript_length)\n            & (self.key_data == other.key_data)\n            & (self.key_hashes == other.key_hashes)\n            & (self.layer_type_of_root == other.layer_type_of_root)\n            & (self.root_id == other.root_id)\n            & (self.root_index_in_transcript\n                                            == other.root_index_in_transcript)\n            & (self.json_entries_packed == other.json_entries_packed)\n            & (self.json_packed == other.json_packed)\n    }\n}\n\n// TODO: casting entry_ptr to u16 is kind of expensive when generating witnesses, can we fix?\nunconstrained fn __check_entry_ptr_bounds(entry_ptr: Field, max: u32) {\n    // n.b. even though this assert is in an unconstrained function, an out of bounds error will be triggered when writing into self.key_data[entry_ptr]\n    assert(entry_ptr as u32 < max - 1, \"create_json_entries: MaxNumValues limit exceeded!\");\n}\n\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n\n    /**\n     * @brief pack the json bytes into Field elements, where each Field element represents 31 bytes\n     * @description we do this because we need to extract substrings from the json bytes, where the position and length of the substring are witness values.\n     *              Doing this on packed Field elements using `slice_string` is cheaper than the direct method of iterating byte-by-byte.\n     *              Also, by extracting data at unknown locations exclusively from the packed json, we do not need to represent the raw bytes `self.json` as a ROM table\n     *              (which would have an expensive initialization cost of 2*NumBytes gates)\n     **/\n    fn compute_json_packed(&mut self) {\n        let NumWholeLimbs = NumBytes / 31;\n        for i in 0..NumWholeLimbs {\n            let mut limb: Field = 0;\n            for j in 0..31 {\n                limb *= 0x100;\n                limb += self.json[i * 31 + j] as Field;\n            }\n            std::as_witness(limb);\n            self.json_packed[i] = limb;\n        }\n        let NumRemainingBytes = NumBytes - NumWholeLimbs * 31;\n        let mut limb: Field = 0;\n        for j in 0..NumRemainingBytes {\n            limb *= 0x100;\n            limb += self.json[NumWholeLimbs * 31 + j] as Field;\n        }\n        for _ in NumRemainingBytes..31 {\n            limb *= 0x100;\n        }\n        std::as_witness(limb);\n        self.json_packed[NumWholeLimbs + (NumRemainingBytes == 0) as u32] = limb;\n    }\n\n    // TODO: when impl is more mature, merge this into create_json_entries\n    fn keyswap(&mut self) {\n        // TODO: this won't work if 1st entry is a key!\n        let mut current= TranscriptEntry::from_field(self.transcript[0]);\n        let mut next: TranscriptEntry = TranscriptEntry::new();\n\n        for i in 0..MaxNumTokens - 1 {\n            next = TranscriptEntry::from_field(self.transcript[i + 1]);\n\n            let next_is_key = (next.token == KEY_SEPARATOR_TOKEN) as Field;\n\n            let valid_token = TOKEN_IS_ARRAY_OBJECT_OR_VALUE[current.token];\n            assert(\n                (valid_token * next_is_key) + (1 - next_is_key) == 1, \"Cannot find key/value straddling KEY_DELIMITER_TOKEN\"\n            );\n\n            let old_transcript = self.transcript[i];\n            let new_transcript = TranscriptEntry::to_field(TranscriptEntry { token: KEY_TOKEN, index: current.index, length: current.length });\n            let updated_transcript = (new_transcript - old_transcript) * next_is_key + old_transcript;\n            self.transcript[i] = updated_transcript;\n\n            current = next;\n        }\n    }\n\n    /**\n     * @brief Once we have processed the json into a transcript of tokens, validate these tokens represent valid JSON!\n     * @description To avoid a lot of painful if/else statements, we construct a state transition function out of the lookup table TOKEN_VALIDATION_TABLE\n     *              The inputs to TOKEN_VALIDATION_TABLE are:\n     *                  1. The current token (at some position `i` i.e. `self.transcript[i])\n     *                  2. The previous token (`self.transcript[i-1]`)\n     *                  3. The context of the previous token (i.e. is it within an object or an array?)\n     *              The lookup table maps these inputs into the following outputs:\n     *                  1. Are we moving into a new context? i.e. is current token a `{` or `[` character?\n     *                  2. If so, what context are we moving into? (`OBJECT_LAYER` or `ARRAY_LAYER`)\n     *                  3. Are we exiting from the current context? i.e. is the current token a `}` or `]` character?\n     *                  4. Have we entered an error state? e.g. a `[` token followed by a `,` token would be invalid JSON\n     * \n     * @note To shave some gates, we represent the error state in a nonstandard way.\n     *       If we have entered an error state, the value of `push_layer` will be 0x1000000\n     *       This will then update `depth` to a value that exceeds the size of `parent_layer_stack` (32),\n     *       which will trigger an out-of-bounds array access, which creates unsatisfiable constraints\n     **/\n    fn validate_tokens(self, tokens: [Field; MaxNumTokens]) {\n        let mut current_layer = self.layer_type_of_root;\n        let mut parent_layer_stack: [Field; 32] = [0; 32];\n        let mut depth = 0;\n        let mut previous_token = tokens[0];\n        let NN = NUM_TOKENS * NUM_TOKENS;\n\n        let is_object = previous_token == BEGIN_OBJECT_TOKEN;\n        let is_array = previous_token == BEGIN_ARRAY_TOKEN;\n\n        depth = is_object as Field + is_array as Field;\n\n        // todo is this correct?\n        parent_layer_stack[0] = is_object as Field * OBJECT_LAYER + is_array as Field * ARRAY_LAYER;\n        assert(\n            TOKEN_IS_ARRAY_OBJECT_OR_VALUE[previous_token] == 1, \"first json token does not describe an object, array or key\"\n        );\n\n        // 17 gates per iteration?\n        for i in 1..MaxNumTokens {\n            // 0 gates\n            let current_token = tokens[i];\n\n            // 1 gate\n            let index = current_layer * (NN as Field) + previous_token * (NUM_TOKENS as Field) + current_token;\n\n            // 5 gates\n            let  ValidationFlags{push_layer, push_layer_type_of_root, pop_layer} = ValidationFlags::from_field(TOKEN_VALIDATION_TABLE[index]);\n\n            // 3.5 gates\n            parent_layer_stack[depth] = current_layer;\n\n            // 1 gate\n            // we encode an error flag into `push_layer` by making its value such that `depth` will exceed the size of `parent_layer_stack`\n            depth = depth + push_layer - pop_layer;\n            std::as_witness(depth);\n\n            // 6.5 gates\n            let parent_layer = parent_layer_stack[depth];\n            let mut updated_layer = (1 - pop_layer - push_layer);\n            std::as_witness(updated_layer);\n            updated_layer = updated_layer * current_layer + push_layer_type_of_root;\n            std::as_witness(updated_layer);\n            updated_layer = updated_layer + parent_layer * pop_layer;\n            std::as_witness(updated_layer);\n            current_layer = updated_layer;\n\n            previous_token = current_token;\n        }\n        assert(depth == 0, \"validate_tokens: unclosed objects or arrays\");\n    }\n\n    /**\n     * @brief given a processed transcript of json tokens, compute a list of json entries that describes the values within the JSON blob\n     * @details a 'value' here is either an Object, Array, String, Numeric or Literal.\n     *          e.g. \"[ 1, 2, 3 ]\" contains 4 values (3 Numeric types and the Array that contains them)\n     *\n     *          To avoid branches and if statements, we construct a state transition function out of the lookup table TOKEN_FLAGS_TABLE\n     *          This table takes as an input the following:\n     *              1. The token value of an element in the transcript\n     *              2. The layer type the previous token is located in (i.e. are we in an array or an object?)\n     *          The table outputs the following data:\n     *              1. Should we create a new json entry? (i.e. is the token a STRING_TOKEN, LITERAL_TOKEN, NUMERIC_TOKEN, END_ARRAY_TOKEN, END_OBJECT_TOKEN)\n     *              2. Is the token `}` or `]`?\n     *              3. Is the token `{` or `[`?\n     *              4. Given the current layer type and the token being queried, what should the new layer type be?\n     *              5. Is the token `KEY_TOKEN`?\n     *              6. Is the token a `STRING_TOKEN`, `NUMERIC_TOKEN` OR `VALUE_TOKEN`?\n     *              7. Is the token one that we should skip over? `,` or `:`\n     **/\n    fn create_json_entries(&mut self) {\n        let mut entry_ptr = 0;\n        let mut depth: Field = 1;\n        let mut num_entries_at_current_depth: Field = 0;\n        let mut next_identity_value: Field = 1;\n        let mut current_identity_value: Field = 0;\n        let mut context = OBJECT_LAYER;\n\n        let mut current_key_index_and_length: Field = 0;\n\n        let mut parent_context_stack: [Field; 32] = [0; 32];\n        let mut tokens: [Field; MaxNumTokens] = [0; MaxNumTokens];\n        //  maybe 71.75 gates per iteration\n        for i in 0..MaxNumTokens {\n            __check_entry_ptr_bounds(entry_ptr, MaxNumValues);\n            // 5.25 gates\n            let TranscriptEntry{token, index, length} = TranscriptEntry::from_field(self.transcript[i]);\n\n            tokens[i] = token;\n            // 13 gates\n            let TokenFlags{\n                create_json_entry,\n                is_end_of_object_or_array,\n                is_start_of_object_or_array,\n                new_context,\n                is_key_token: update_key,\n                is_value_token,\n                preserve_num_entries\n            } = TokenFlags::from_field(TOKEN_FLAGS_TABLE[token + context * (NUM_TOKENS as Field)]);\n\n            // 2 gates\n            let diff = (index + length * 0x10000) - current_key_index_and_length;\n            std::as_witness(diff);\n            current_key_index_and_length = diff * update_key + current_key_index_and_length;\n            std::as_witness(current_key_index_and_length);\n\n            // 2 gates\n            let new_context_stack_entry = JSONContextStackEntry::to_field(\n                JSONContextStackEntry {\n                num_entries: num_entries_at_current_depth,\n                context,\n                current_key_index_and_length,\n                json_index: index,\n                current_identity: current_identity_value\n            }\n            );\n            // subtotal 22.25\n\n            // 1 gate\n            let depth_index: Field = (depth - 1);\n            // 3.5 gates\n            let previous_stack_entry_packed = parent_context_stack[depth_index];\n\n            // 9.5 gates\n            let previous_stack_entry = JSONContextStackEntry::from_field(previous_stack_entry_packed);\n\n            let object_or_array_entry: JSONEntry = JSONEntry {\n                array_pointer: previous_stack_entry.num_entries,\n                entry_type: token,\n                child_pointer: 0,\n                num_children: num_entries_at_current_depth,\n                json_pointer: previous_stack_entry.json_index,\n                json_length: length,\n                parent_index: previous_stack_entry.current_identity,\n                id: current_identity_value\n            };\n            // 0\n            let value_entry: JSONEntry = JSONEntry {\n                array_pointer: num_entries_at_current_depth,\n                entry_type: token,\n                child_pointer: 0,\n                num_children: 0,\n                json_pointer: index,\n                json_length: length,\n                parent_index: current_identity_value,\n                id: 0\n            };\n\n            // 3 gates\n            let object_or_array_entry_packed = object_or_array_entry.to_field();\n            // 2 gates\n            let value_entry_packed = value_entry.to_field();\n\n            // 2 gates\n            let diff = object_or_array_entry_packed - value_entry_packed;\n            std::as_witness(diff);\n            let new_entry = diff * is_end_of_object_or_array + value_entry_packed;\n            std::as_witness(new_entry);\n\n            // 3 gates\n            // subtotal 24 + 22.25 = 46.25\n            let old = current_identity_value;\n            current_identity_value = (next_identity_value * is_start_of_object_or_array);\n            std::as_witness(current_identity_value);\n            current_identity_value = current_identity_value + (previous_stack_entry.current_identity * is_end_of_object_or_array);\n            std::as_witness(current_identity_value);\n            current_identity_value = current_identity_value + old * preserve_num_entries;\n            std::as_witness(current_identity_value);\n\n            // 2 gates\n            num_entries_at_current_depth = num_entries_at_current_depth * preserve_num_entries + is_value_token;\n            std::as_witness(num_entries_at_current_depth);\n            num_entries_at_current_depth = num_entries_at_current_depth +\n            (previous_stack_entry.num_entries + 1) * is_end_of_object_or_array;\n            std::as_witness(num_entries_at_current_depth);\n\n            // 1 gate\n            // if `is_end_of_object_or_array == 1`, `new_context = 0` so we can do something cheaper than a conditional select:\n            context = previous_stack_entry.context * is_end_of_object_or_array + new_context;\n            std::as_witness(context);\n            // 3 gates\n            let common_term = current_identity_value + context * (num_entries_at_current_depth - 1) * 0x1000000000000;\n            std::as_witness(common_term);\n            let mut new_key_data = current_key_index_and_length * is_value_token * 0x10000 + common_term;\n            std::as_witness(new_key_data);\n            new_key_data = new_key_data + previous_stack_entry.current_key_index_and_length * is_end_of_object_or_array * 0x10000;\n            std::as_witness(new_key_data);\n\n            // 3.5 gates\n            self.key_data[entry_ptr] = new_key_data * create_json_entry;\n\n            // 3.5 gates\n            parent_context_stack[depth] = new_context_stack_entry;\n\n            // 4.5 gates\n            self.json_entries_packed[entry_ptr] = JSONEntryPacked{ value: new_entry * create_json_entry };\n\n            // 1 gate\n            next_identity_value = next_identity_value + is_start_of_object_or_array;\n            std::as_witness(next_identity_value);\n\n            // 1 gate\n            depth = depth + is_start_of_object_or_array - is_end_of_object_or_array;\n\n            // 1 gate\n            // 2105 + 46.25\n            // subtotal 66.75?\n            entry_ptr += create_json_entry;\n            std::as_witness(entry_ptr);\n        }\n        self.validate_tokens(tokens);\n    }\n\n    /**\n     * @brief Perform the 1st transcript processing step as an unconstrained function\n     *        We will validate this transcript is correct via a constrained function\n     *        This is a bit cheaper than doing everything in a constrained function,\n     *        because we can use ROM arrays instead of RAM arrays\n     *        (i.e. we're only reading from our arrays, we don't write to them in constrained functions)\n     **/\n    unconstrained fn __build_transcript(self) -> [Field; MaxNumTokens] {\n        let mut raw_transcript: [Field; MaxNumTokens] = [0; MaxNumTokens];\n        let mut transcript_ptr: u32 = 0;\n        let mut scan_mode = GRAMMAR_SCAN as Field;\n        let mut length: Field = 0;\n        let mut previous_was_potential_escape_sequence = 0;\n        for i in 0..NumBytes {\n            // while this assert is in an unconstrained function, the out of bounds accesss `raw_transcript[transcript_ptr]` in build_transcript also generates failing constraints\n            assert(transcript_ptr < MaxNumTokens, \"build_transcript: MaxNumTokens limit exceeded!\");\n            let ascii = self.json[i];\n\n            let encoded_ascii = previous_was_potential_escape_sequence * 1024 + scan_mode * 256 + ascii as Field;\n            let ScanData{ scan_token, push_transcript, increase_length, is_potential_escape_sequence } = ScanData::from_field(JSON_CAPTURE_TABLE[encoded_ascii]);\n            let mut push_transcript = push_transcript;\n            let mut scan_token = scan_token;\n            let mut increase_length = increase_length;\n\n            let new_entry = RawTranscriptEntry::to_field(RawTranscriptEntry { encoded_ascii, index: i as Field - length, length });\n\n            raw_transcript[transcript_ptr] = new_entry;\n            length = length * (1 - push_transcript) + increase_length;\n            transcript_ptr += (push_transcript as bool) as u32;\n\n            previous_was_potential_escape_sequence = is_potential_escape_sequence;\n\n            scan_mode = scan_token;\n        }\n\n        // ensure an error isn't hiding in the last scanned token\n        scan_mode.assert_max_bit_size(2);\n        raw_transcript\n    }\n\n    /**\n     * @brief Construct a token transcript by iterating through self.json and using a lookup table `JSON_CAPTURE_TABLE` to define a state transition function\n     * @details JSON_CAPTURE_TABLE takes the following as input:\n     *          1. the ascii byte at the current location in the json\n     *          2. the current scan mode (are we searching for grammar, strings, numbers or literals?)\n     *          3. could this byte potentially be an escape sequence? (i.e. the previous byte was a backslash character \"\\\" and scan_mode == STRING_SCAN)\n     *          The table outputs the following flags:\n     *          1. what token have we scanned? (listed in enums::Token)\n     *          2. should we push this token to the transcript (no push if token == NO_TOKEN)\n     *          3. should we increase the length of the current entry we're evaluating?\n     *              (i.e. if token == STRING_TOKEN and scan_mode == STRING_SCAN, then increase the length because we're in the process of scanning a string)\n     *          4. is this scanned ascii character a potential escape sequence? i.e. scan_mode == STRING_SCAN and ascii = \"\\\"\n     *          5. have we entered an error state? (i.e. invalid grammar e.g. \":\" is followed by \"}\")\n     *\n     * NOTE: we represent error states in a nonstandard way to reduce gate count. Instead of handling an error flag,\n     *       an error state will increase the value of `scan_token` by 0x100000000. This will cause the next access into `JSON_CAPTURE_TABLE` to trigger an out of bounds error\n     *\n     * NOTE: the scanned transcript will be missing some edge cases that are caught via `swap_keys` and `capture_missing_tokens`:\n     *          1. If the scan mode is NUMERIC_SCAN or LITERAL_SCAN and the next character is a \",\" or \"}\" or \"]\",\n     *             we will push a NUMERIC_TOKEN or LITERAL_TOKEN into the transcript but we will MISS the VALUE_SEPARATOR_TOKEN, END_OBJECT_TOKEN or END_ARRAY_TOKEN\n     *             (accomodating this edge case requires conditionally pushing two transcript entries per iteration, so we do this in a separate step where we iterate over the transcript and not the json bytes)\n     *          2. We can't yet tell if an entry is a KEY_TOKEN or a STRING_TOKEN. All keys are represented as STRING_TOKEN. This gets fixed after `swap_keys` is evaluated\n     **/\n    fn build_transcript(self) -> Self {\n        let mut raw_transcript: [Field; MaxNumTokens] = [0; MaxNumTokens];\n        let mut transcript_ptr: Field = 0;\n        let mut scan_mode = GRAMMAR_SCAN;\n        let mut length: Field = 0;\n\n        let raw_transcript = self.__build_transcript();\n\n        // 14 gates per iteration, plus fixed cost for initing 2,048 size lookup table (4,096 gates)\n        let mut previous_was_potential_escape_sequence = 0;\n        for i in 0..NumBytes {\n            let ascii = self.json[i];\n\n            // 1 gate\n            let encoded_ascii = previous_was_potential_escape_sequence * 1024 + scan_mode * 256 + ascii as Field;\n            std::as_witness(encoded_ascii);\n\n            // 2 gates\n            let capture_flags = JSON_CAPTURE_TABLE[encoded_ascii];\n            // 5 gates\n            let ScanData{ scan_token, push_transcript, increase_length, is_potential_escape_sequence } = ScanData::from_field(capture_flags);\n\n            // 2 gates\n            let raw = raw_transcript[transcript_ptr];\n\n            // 1 gate\n            let diff = raw\n                - RawTranscriptEntry::to_field(RawTranscriptEntry { encoded_ascii, index: i as Field - length, length });\n            std::as_witness(diff);\n            // 1 gate\n            assert(diff * push_transcript == 0);\n\n            // 1 gate\n            length = length * (1 - push_transcript) + increase_length;\n            std::as_witness(length);\n\n            // 1 gate\n            transcript_ptr += push_transcript;\n\n            previous_was_potential_escape_sequence = is_potential_escape_sequence;\n            scan_mode = scan_token;\n        }\n\n        // we encode error flag into the scan_token value, which must be less than 4\n        // the lookup into JSON_CAPTURE_TABLE applies an implicit 2-bit range check on `scan_token`\n        // however this does not get triggered if the final byte scanned produces an error state\n        length.assert_max_bit_size(2);\n\n        JSON {\n            json: self.json,\n            raw_transcript,\n            transcript: self.transcript,\n            transcript_length: transcript_ptr as u32,\n            key_data: self.key_data,\n            key_hashes: self.key_hashes,\n            layer_type_of_root: self.layer_type_of_root,\n            root_id: 1,\n            root_index_in_transcript: 0,\n            json_entries_packed: self.json_entries_packed,\n            unsorted_json_entries_packed: self.unsorted_json_entries_packed,\n            json_packed: self.json_packed\n        }\n    }\n\n    /**\n     * @brief We compute the output of `capture_missing_tokens` via an unconstrained function, then validate the result is correct.\n     *        Saves some gates for same reason as in __build_transcript\n     **/\n    unconstrained fn __capture_missing_tokens(self) -> [Field; MaxNumTokens] {\n        let mut updated_transcript: [Field; MaxNumTokens] = [0; MaxNumTokens];\n        let mut transcript_ptr: u32 = 0;\n        // TODO: do we need a null transcript value?!?!\n\n        for i in 0..MaxNumTokens {\n            let RawTranscriptEntry{ encoded_ascii, index, length} = RawTranscriptEntry::from_field(self.raw_transcript[i]);\n\n            let PostProcessScanData{ token, new_grammar, scan_token } = PostProcessScanData::from_field(PROCESS_RAW_TRANSCRIPT_TABLE[encoded_ascii]);\n\n            let entry = TranscriptEntry::to_field(TranscriptEntry { token, index, length });\n            updated_transcript[transcript_ptr] = entry;\n\n            let index_valid: u32 = (i < self.transcript_length) as u32;\n            transcript_ptr += index_valid;\n\n            let index_of_possible_grammar = (index + length);\n            let new_entry = TranscriptEntry { token: scan_token, index: index_of_possible_grammar, length: 0 };\n\n            let update = new_grammar * index_valid as Field;\n            let new_transcript = TranscriptEntry::to_field(new_entry);\n            assert(transcript_ptr < MaxNumTokens, \"capture_missing_tokens: MaxNumTokens limit exceeded!\");\n            updated_transcript[transcript_ptr] = new_transcript;\n            transcript_ptr += update as bool as u32;\n        }\n        updated_transcript\n    }\n\n    /**\n     * @brief Check for missing tokens that we could have missed in `build_transcript`\n     * @details If we had a json string where a NUMERIC_TOKEN or LITERAL_TOKEN is directly succeeded by a VALUE_SEPARATOR_TOKEN, END_OBJECT_TOKEN, END_ARRAY_TOKEN,\n     *          we will have missed the latter token.\n     *          We pick these up via the lookup table PROCESS_RAW_TRANSCRIPT_TABLE\n     **/\n    fn capture_missing_tokens(&mut self) {\n        let mut transcript_ptr: Field = 0;\n        // hmm probably need a null transcript value?!?!\n        let updated_transcript = self.__capture_missing_tokens();\n        // 26? gates per iteration\n        let range_valid: [Field; MaxNumTokens] = get_validity_flags(self.transcript_length);\n        for i in 0..MaxNumTokens {\n            // 5.25 gates\n            let RawTranscriptEntry{ encoded_ascii, index, length} = RawTranscriptEntry::from_field(self.raw_transcript[i]);\n            // 6.75 gates\n            let PostProcessScanData{ token, new_grammar, scan_token } = PostProcessScanData::from_field(PROCESS_RAW_TRANSCRIPT_TABLE[encoded_ascii]);\n            // 2 gates\n            let index_valid: Field = range_valid[i];\n            // 1 gate\n            let entry = TranscriptEntry::to_field(TranscriptEntry { token, index, length });\n            // 2 gates\n            let diff = updated_transcript[transcript_ptr] - entry;\n            std::as_witness(diff);\n            assert(diff * index_valid == 0);\n            // 1 gate\n            transcript_ptr += index_valid;\n            // 0 gate (merged into TranscriptEntry::to_field)\n            let index_of_possible_grammar = (index + length);\n            // 0 gates\n            let new_entry = TranscriptEntry { token: scan_token, index: index_of_possible_grammar, length: 0 };\n            // 2 gates\n            let update = new_grammar as Field * index_valid;\n            std::as_witness(update);\n            // 1 gate\n            let new_transcript = TranscriptEntry::to_field(new_entry);\n            // 4 gates\n            let diff = updated_transcript[transcript_ptr] - new_transcript;\n            std::as_witness(diff);\n            assert(diff * update == 0);\n            // 1 gate\n            transcript_ptr += update;\n        }\n        self.transcript = updated_transcript;\n\n        // TODO we could make this more efficient...probably not a big deal though\n        let first = TranscriptEntry::from_field(self.transcript[0]);\n        if (first.token == BEGIN_OBJECT_TOKEN) {\n            self.layer_type_of_root = OBJECT_LAYER;\n        } else if (first.token == BEGIN_ARRAY_TOKEN) {\n            self.layer_type_of_root = ARRAY_LAYER;\n        } else if (first.token == STRING_TOKEN) {\n            self.layer_type_of_root = SINGLE_VALUE_LAYER as Field;\n        }\n    }\n\n    fn parse_json<let StringBytes: u32>(stringbytes: [u8; StringBytes]) -> Self {\n        assert(StringBytes <= NumBytes, \"json length exceeds NumBytes!\");\n        let mut text: [u8; NumBytes] = [0; NumBytes];\n        for i in 0..StringBytes {\n            text[i] = stringbytes[i];\n        }\n        for i in StringBytes..NumBytes {\n            text[i] = 32; // whitespace character\n        }\n        let mut json = JSON {\n            json: text,\n            raw_transcript: [0; MaxNumTokens],\n            transcript: [0; MaxNumTokens],\n            transcript_length: 0,\n            key_data: [0; MaxNumValues],\n            key_hashes: [0; MaxNumValues],\n            layer_type_of_root: 0,\n            root_id: 1,\n            root_index_in_transcript: 0,\n            json_entries_packed: [JSONEntryPacked::default(); MaxNumValues],\n            unsorted_json_entries_packed: [JSONEntryPacked::default(); MaxNumValues],\n            json_packed: [0; NumPackedFields]\n        };\n\n        json = json.build_transcript();\n        json.capture_missing_tokens();\n        json.keyswap();\n        json.compute_json_packed();\n        json.create_json_entries();\n\n        json.compute_keyhash_and_sort_json_entries();\n\n        json\n    }\n\n    fn parse_json_from_string<let StringBytes: u32>(s: str<StringBytes>) -> Self {\n        JSON::parse_json(s.as_bytes())\n    }\n}\n\n// TODO: our capture tables are not correctly set up to process a JSON blob that does not begin with an object or array\n// #[test]\n// fn test_single_value() {\n//     let text = \"100\";\n//     let mut json: JSON<3, 10, 20, 20> = JSON::parse_json_from_string(text);\n//\n//     assert(json.get_length() == 0);\n//     assert(json.get_array_element_as_number(0) == 100);\n// }\n\n#[test]\nfn test_numbers() {\n    let text = \"{ \\\"a\\\": 9, \\\"b\\\": 99, \\\"c\\\": 999, \\\"d\\\": 9999, \\\"e\\\": 99999, \\\"f\\\": 999999, \\\"g\\\": 9999999, \\\"h\\\": 99999999, \\\"i\\\": 999999999, \\\"j\\\": 9999999999, \\\"k\\\": 99999999999, \\\"l\\\": 999999999999, \\\"m\\\": 9999999999999, \\\"n\\\": 99999999999999, \\\"o\\\": 999999999999999, \\\"p\\\": 999999999999999,\\\"q\\\": 9999999999999999, \\\"r\\\": 99999999999999999, \\\"s\\\": 999999999999999999, \\\"t\\\": 9999999999999999999, \\\"u\\\": 18446744073709551615}\";\n    let mut json: JSON<372, 16, 100, 24, 2> = JSON::parse_json_from_string(text);\n\n    let a = json.get_number_unchecked(\"a\".as_bytes());\n    let b = json.get_number_unchecked(\"b\".as_bytes());\n    let c = json.get_number_unchecked(\"c\".as_bytes());\n    let d = json.get_number_unchecked(\"d\".as_bytes());\n    let e = json.get_number_unchecked(\"e\".as_bytes());\n    let f = json.get_number_unchecked_var(BoundedVec { storage: \"ftrololol\".as_bytes(), len: 1 });\n    let g = json.get_number(\"g\".as_bytes()).unwrap();\n    let h = json.get_number_var(BoundedVec { storage: \"h\".as_bytes(), len: 1 }).unwrap();\n    let i = json.get_number_unchecked(\"i\".as_bytes());\n    let j = json.get_number_unchecked(\"j\".as_bytes());\n    let k = json.get_number_unchecked(\"k\".as_bytes());\n    let l = json.get_number_unchecked(\"l\".as_bytes());\n    let m = json.get_number_unchecked(\"m\".as_bytes());\n    let n = json.get_number_unchecked(\"n\".as_bytes());\n    let o = json.get_number_unchecked(\"o\".as_bytes());\n    let p = json.get_number_unchecked(\"p\".as_bytes());\n    let q = json.get_number_unchecked(\"q\".as_bytes());\n    let r = json.get_number_unchecked(\"r\".as_bytes());\n    let s = json.get_number_unchecked(\"s\".as_bytes());\n    let t = json.get_number_unchecked(\"t\".as_bytes());\n    let u = json.get_number_unchecked(\"u\".as_bytes());\n\n    assert(a == 9);\n    assert(b == 99);\n    assert(c == 999);\n    assert(d == 9999);\n    assert(e == 99999);\n    assert(f == 999999);\n    assert(g == 9999999);\n    assert(h == 99999999);\n    assert(i == 999999999);\n    assert(j == 9999999999);\n    assert(k == 99999999999);\n    assert(l == 999999999999);\n    assert(m == 9999999999999);\n    assert(n == 99999999999999);\n    assert(o == 999999999999999);\n    assert(p == 999999999999999);\n    assert(q == 9999999999999999);\n    assert(r == 99999999999999999);\n    assert(s == 999999999999999999);\n    assert(t == 9999999999999999999);\n    assert(u == 18446744073709551615);\n}\n\n#[test]\nfn test_parent_array() {\n    let text = \"[0,10,21,32,44]\";\n    let mut json: JSON<15, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n    assert(json.get_length() == 5);\n    assert(json.get_number_from_array_unchecked(0) == 0);\n    assert(json.get_number_from_array_unchecked(1) == 10);\n    assert(json.get_number_from_array_unchecked(2) == 21);\n    assert(json.get_number_from_array_unchecked(3) == 32);\n    assert(json.get_number_from_array_unchecked(4) == 44);\n}\n\n#[test]\nfn test_escaped_strings() {\n    let text = \"{   \\\"name\\\": \\\"\\\\\\\"Ade\\\\nel Solangi\\\\\\\"\\\", \\\"testA\\\": false, \\\"testB\\\": true, \\\"testC\\\": null }                                                                   \";\n    let mut json: JSON<148, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n    let result: BoundedVec<u8,19>  = json.get_string_unchecked(\"name\".as_bytes());\n    assert(result.storage == BoundedVec::from_array(\"\\\"Ade\\nel Solangi\\\"\".as_bytes()).storage);\n    assert(result.len == 16);\n}\n\n#[test]\nfn test_parse_json() {\n    let text= \"{ \\\"foo\\\": 1234, \\\"bar\\\": { \\\"foo\\\": 9876, \\\"bar\\\": true }, \\\"baz\\\": \\\"hello\\\" }\";\n    let mut json: JSON<68, 7, 30, 30, 2> = JSON::parse_json_from_string(text);\n\n    let result = json.get_string_unchecked(\"baz\".as_bytes());\n    assert(result.storage == \"hello\".as_bytes());\n\n    let result: Option<BoundedVec<u8, 5>> = json.get_string(\"baz\".as_bytes());\n    assert(result.is_some());\n    assert(result.unwrap().storage == \"hello\".as_bytes());\n\n    let result: Option<BoundedVec<u8, 1>> = json.get_string(\"wibble\".as_bytes());\n    assert(result.is_some() == false);\n\n    let result: u64 = json.get_number_unchecked(\"foo\".as_bytes());\n    assert(result == 1234);\n\n    let result: Option<u64> = json.get_number(\"foo\".as_bytes());\n    assert(result.is_some());\n    assert(result.unwrap() == 1234);\n\n    let result: Option<u64> = json.get_number(\"fooo\".as_bytes());\n    assert(result.is_some() == false);\n\n    let mut nested_json = json.get_object(\"bar\".as_bytes()).unwrap();\n    let result: Option<u64> = nested_json.get_number_var(BoundedVec { storage: \"foounusedkeybyteslolol\".as_bytes(), len: 3 });\n    assert(result.is_some() == true);\n    assert(result.unwrap() == 9876);\n\n    let key0: BoundedVec<u8, 3> = BoundedVec::from_array(\"bar\".as_bytes());\n    let key1: BoundedVec<u8, 3> = BoundedVec::from_array(\"baz\".as_bytes());\n\n    let result: Option<BoundedVec<u8, 10>> = json.get_string_from_path([key0, key1]);\n    assert(result.is_some() == false);\n}\n\n#[test]\nfn test_literal() {\n    let text = \"{   \\\"name\\\": \\\"Adeel Solangi\\\", \\\"testA\\\": false, \\\"testB\\\": true, \\\"testC\\\": null }                                                                   \";\n    let mut json: JSON<142, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n\n    let result: JSONLiteral = json.get_literal_unchecked(\"testA\".as_bytes());\n    assert(result.is_false() == true);\n    assert(result.is_true() == false);\n    assert(result.is_null() == false);\n    assert(result.to_bool() == false);\n\n    let result_option: Option<JSONLiteral> = json.get_literal(\"testA\".as_bytes());\n    assert(result_option.is_some());\n    assert(result_option.unwrap().value == result.value);\n}\n\n#[test]\nfn test_arrays() {\n    let text = \"{   \\\"name\\\": \\\"Adeel Solangi\\\", \\\"age\\\": 62, \\\"portfolio\\\": { \\\"vibe_ratings\\\": [1,2],\\\"elemental_lorem\\\": false }}                                                 \";\n    let mut json: JSON<153, 10, 60, 60, 2> = JSON::parse_json_from_string(text);\n\n    assert(json.key_exists(BoundedVec { storage: \"foo\".as_bytes(), len: 3 }) == false);\n    assert(json.key_exists(BoundedVec { storage: \"name\".as_bytes(), len: 4 }));\n    assert(json.key_exists(BoundedVec { storage: \"age\".as_bytes(), len: 3 }));\n    assert(json.key_exists(BoundedVec { storage: \"portfolio\".as_bytes(), len: 9 }));\n}\n\n#[test(should_fail_with = \"build_transcript: MaxNumTokens limit exceeded!\")]\nfn test_json_not_enough_tokens_fails() {\n    let text = \"{ \\\"hello \\\": \\\"world\\\" }\";\n    let _: JSON<26, 10, 2, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"capture_missing_tokens: MaxNumTokens limit exceeded!\")]\nfn test_json_not_enough_tokens_fails_2() {\n    // we should exceed the limit of 8 tokens here, when capturing the `,` token missed by build_transcript\n    let text = \"{ \\\"hello \\\": false,\\\"world\\\": true }\";\n    let _: JSON<33, 10, 8, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"create_json_entries: MaxNumValues limit exceeded!\")]\nfn test_json_not_enough_values_fails() {\n    let text = \"{ \\\"hello \\\": false,\\\"world\\\": true }\";\n    let _: JSON<33, 10, 10, 4, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_object_without_key_fails() {\n    let text = \"{ \\\"hello \\\": \\\"world\\\", 100 }\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_array_with_key_fails() {\n    let text = \"[ \\\"hello \\\": \\\"world\\\" ]\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_unclosed_object_fails() {\n    let text = \"{ \\\"hello \\\": \\\"world\\\" \";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_object_closed_with_array_fails() {\n    let text = \"{ \\\"hello \\\": \\\"world\\\" ]\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_object_with_trailing_comma_fails() {\n    let text = \"{ \\\"hello \\\" : \\\"world\\\", }\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_unclosed_array_fails() {\n    let text = \"[ \\\"hello \\\", \\\"world\\\"\";\n    let _: JSON<19, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"validate_tokens: unclosed objects or arrays\")]\nfn test_json_unclosed_array_fails_2() {\n    let text = \"[ \\\"hello \\\", \\\"world\\\", [1,2,3,4] \";\n    let _: JSON<31, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_array_with_trailing_comma_fails() {\n    let text = \"[ \\\"hello \\\", \\\"world\\\", ]\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_array_closed_with_object_fails() {\n    let text = \"[ \\\"hello \\\": \\\"world\\\" }\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ScanData: Invalid token\")]\nfn test_json_key_not_wrapped_in_quotes_fails() {\n    let text = \"{ false: \\\"world\\\" }\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ScanData: Invalid token\")]\nfn test_json_string_not_wrapped_in_quotes_fails() {\n    let text = \"{ \\\"hello \\\": world }\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ScanData: Invalid token\")]\nfn test_json_char_outside_of_string_fails() {\n    let text = \"{ \\\"hello \\\", \\\"world\\\" a}\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_char_outside_of_string_fails_2() {\n    // n could be the start of the literal \"null\", so this passes the ScanData check but fails ValidationFlags\n    let text = \"{ \\\"hello \\\", \\\"world\\\" n}\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_array_with_invalid_tokens_fails() {\n    // n could be the start of the literal \"null\", so this passes the ScanData check but fails ValidationFlags\n    let text = \"[,,,]\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"Cannot find key/value straddling KEY_DELIMITER_TOKEN\")]\nfn test_json_object_with_invalid_tokens_fails() {\n    // n could be the start of the literal \"null\", so this passes the ScanData check but fails ValidationFlags\n    let text = \"{:::}\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test]\nfn test_json_empty_object_passes() {\n    // n could be the start of the literal \"null\", so this passes the ScanData check but fails ValidationFlags\n    let text = \"{}\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test]\nfn test_json_empty_array_passes() {\n    // n could be the start of the literal \"null\", so this passes the ScanData check but fails ValidationFlags\n    let text = \"[]\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_json_parserv0.2.0/src/json.nr"},"91":{"source":"use crate::_string_tools::slice_packed_field::slice_fields;\n\nstruct StringChopper<let NeedlePackedFields: u32> {}\n\nimpl<let NeedlePackedFields: u32> StringChopper<NeedlePackedFields> {\n    fn slice_string<let StringBytes: u32, let HaystackPackedFields: u32>(\n        _: Self,\n        haystack: [Field; HaystackPackedFields],\n        start_bytes: Field,\n        num_bytes: Field\n    ) -> [u8; StringBytes] {\n        let mut parsed_string: [u8; StringBytes] = [0; StringBytes];\n\n        let sliced: [Field; NeedlePackedFields] = slice_fields(haystack, start_bytes, num_bytes);\n\n        let sliced_bytes = sliced.map(|x: Field| { let r: [u8; 31] = x.to_be_bytes(); r });\n\n        let num_slices = StringBytes / 31;\n        let overflow = StringBytes % 31;\n        for i in 0..num_slices {\n            for j in 0..31 {\n                parsed_string[i * 31 + j] = sliced_bytes[i][j];\n            }\n        }\n        for j in 0..overflow {\n            parsed_string[num_slices * 31 + j] = sliced_bytes[num_slices][j];\n        }\n        parsed_string\n    }\n}\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_json_parserv0.2.0/src/_string_tools/string_chopper.nr"},"92":{"source":"global PLO: Field = 0x2833E84879B9709143E1F593F0000001;\nglobal PHI: Field = 0x30644E72E131A029B85045B68181585D;\n\nglobal PLO_200_felt: Field = 0x29B85045B68181585D2833E84879B9709143E1F593F0000001;\nglobal PHI_54_felt: Field = 0x30644E72E131A0;\nglobal TWO_POW_200 = 0x100000000000000000000000000000000000000000000000000;\nstruct Slice200 {\n    hihi: u64, // 7 bytes\n    hilo: u64, // 7 bytes\n    lohi: u64, // 7 bytes\n    lolo: u32 // 4 bytes\n}\nglobal PHI_54: u64 = 0x30644E72E131A0;\nglobal PLO_200: Slice200 = Slice200 {\n    hihi: 0x29B85045B68181,\n    hilo: 0x585D2833E84879,\n    lohi: 0xB9709143E1F593,\n    lolo: 0xF0000001,\n};\n\nunconstrained fn __slice_200_bits_from_field(f: Field) -> (Field, Field, bool) {\n    let b: [u8; 32] = f.to_be_bytes();\n\n    let mut res200: Slice200 = Slice200 { hihi: 0, hilo: 0, lohi: 0, lolo: 0 };\n    let mut res54: u64 = 0;\n    for i in 0..7 {\n        res200.hihi <<= 8;\n        res200.hilo <<= 8;\n        res200.lohi <<= 8;\n        res200.hihi += b[i + 7] as u64;\n        res200.hilo += b[i + 14] as u64;\n        res200.lohi += b[i + 21] as u64;\n    }\n    for i in 0..4 {\n        res200.lolo <<= 8;\n        res200.lolo += b[28 + i] as u32;\n    }\n    for i in 0..7 {\n        res54 <<= 8;\n        res54 += b[i] as u64;\n    }\n\n    let mut lo: Field = res200.hihi as Field; // 56 bits\n    lo *= 0x100000000000000; // 56 + 56 bits\n    lo += res200.hilo as Field; // 56 + 56 bits\n    lo *= 0x100000000000000; // 56 + 56 + 56 bits\n    lo += res200.lohi as Field; // 56 + 56 + 56 bits = 168 bits\n    lo *= 0x100000000; // 56 + 56 + 56 + 32 bits = 200 bits?\n    lo += res200.lolo as Field;\n\n    let mut hi = res54 as Field;\n\n    let mut PLO = PLO_200;\n    let mut borrow: bool = false;\n    // p - x\n    borrow = PLO.lolo < res200.lolo;\n    PLO.lohi -= borrow as u64;\n    borrow = PLO.lohi < res200.lohi;\n    PLO.hilo -= borrow as u64;\n    borrow = PLO.hilo < res200.hilo;\n    PLO.hihi -= borrow as u64;\n    borrow = PLO.hihi < res200.hihi;\n    (lo, hi, borrow)\n}\n\npub fn slice_200_bits_from_field(f: Field) -> Field {\n    let (lo, hi, borrow) = __slice_200_bits_from_field(f);\n    assert(hi * TWO_POW_200 + lo == f);\n    lo.assert_max_bit_size(200);\n    hi.assert_max_bit_size(56);\n    let lo_diff = PLO_200_felt - lo + (borrow as Field * TWO_POW_200);\n    let hi_diff = PHI_54_felt - hi - borrow as Field;\n    lo_diff.assert_max_bit_size(200);\n    hi_diff.assert_max_bit_size(56);\n    lo\n}\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_json_parserv0.2.0/src/_string_tools/slice_field.nr"},"94":{"source":"/**\n * @file methods to extract data efficiently from Field elements that represent 31 bytes of packed data\n **/\n\n// #############################################################\n// ### GLOBAL VARIABLES AND LOOKUP TABLES\n// #############################################################\nglobal two_pow_128 = 0x100000000000000000000000000000000;\nglobal two_pow_64 = 0x10000000000000000;\nglobal two_pow_32 = 0x100000000;\nglobal two_pow_16 = 0x10000;\n\nglobal path_multipliers_chunk4: [Field; 32] = [\n    /* 0  (00000) */ 0,\n    /* 1  (00001) */ 0,\n    /* 2  (00010) */ 0,\n    /* 3  (00011) */ 0,\n    /* 4  (00100) */ 0,\n    /* 5  (00101) */ 0,\n    /* 6  (00110) */ 0,\n    /* 7  (00111) */ 0,\n    /* 8  (01000) */ 0,\n    /* 9  (01001) */ 0,\n    /* 10 (01010) */ 0,\n    /* 11 (01011) */ 0,\n    /* 12 (01100) */ 0,\n    /* 13 (01101) */ 0,\n    /* 14 (01110) */ 0,\n    /* 15 (01111) */ 0,\n    /* 16 (10000) */ 1,\n    /* 17 (10001) */ 1,\n    /* 18 (10010) */ 1,\n    /* 19 (10011) */ 1,\n    /* 20 (10100) */ 1,\n    /* 21 (10101) */ 1,\n    /* 22 (10110) */ 1,\n    /* 23 (10111) */ 1,\n    /* 24 (11000) */ 1,\n    /* 25 (11001) */ 1,\n    /* 26 (11010) */ 1,\n    /* 27 (11011) */ 1,\n    /* 28 (11100) */ 1,\n    /* 29 (11101) */ 1,\n    /* 30 (11110) */ 1,\n    /* 31 (11111) */ 1\n];\n\n// this represents an 8 byte chunk. what do we multiply by?\nglobal path_multipliers_chunk3: [Field; 32] = [\n    /* 0  (00000) */ 0,\n    /* 1  (00001) */ 0,\n    /* 2  (00010) */ 0,\n    /* 3  (00011) */ 0,\n    /* 4  (00100) */ 0,\n    /* 5  (00101) */ 0,\n    /* 6  (00110) */ 0,\n    /* 7  (00111) */ 0,\n    /* 8  (01000) */ 1,\n    /* 9  (01001) */ 1,\n    /* 10 (01010) */ 1,\n    /* 11 (01011) */ 1,\n    /* 12 (01100) */ 1,\n    /* 13 (01101) */ 1,\n    /* 14 (01110) */ 1,\n    /* 15 (01111) */ 1,\n    /* 16 (10000) */ 0,\n    /* 17 (10001) */ 0,\n    /* 18 (10010) */ 0,\n    /* 19 (10011) */ 0,\n    /* 20 (10100) */ 0,\n    /* 21 (10101) */ 0,\n    /* 22 (10110) */ 0,\n    /* 23 (10111) */ 0,\n    /* 24 (11000) */ two_pow_128,\n    /* 25 (11001) */ two_pow_128,\n    /* 26 (11010) */ two_pow_128,\n    /* 27 (11011) */ two_pow_128,\n    /* 28 (11100) */ two_pow_128,\n    /* 29 (11101) */ two_pow_128,\n    /* 30 (11110) */ two_pow_128,\n    /* 31 (11111) */ two_pow_128\n];\n\n// what do we multiply 4 byte chunk by\nglobal path_multipliers_chunk2: [Field; 32] = [\n    /* 0  (00000) */ 0,\n    /* 1  (00001) */ 0,\n    /* 2  (00010) */ 0,\n    /* 3  (00011) */ 0,\n    /* 4  (00100) */ 1,\n    /* 5  (00101) */ 1,\n    /* 6  (00110) */ 1,\n    /* 7  (00111) */ 1,\n    /* 8  (01000) */ 0,\n    /* 9  (01001) */ 0,\n    /* 10 (01010) */ 0,\n    /* 11 (01011) */ 0,\n    /* 12 (01100) */ two_pow_64,\n    /* 13 (01101) */ two_pow_64,\n    /* 14 (01110) */ two_pow_64,\n    /* 15 (01111) */ two_pow_64,\n    /* 16 (10000) */ 0,\n    /* 17 (10001) */ 0,\n    /* 18 (10010) */ 0,\n    /* 19 (10011) */ 0,\n    /* 20 (10100) */ two_pow_128,\n    /* 21 (10101) */ two_pow_128,\n    /* 22 (10110) */ two_pow_128,\n    /* 23 (10111) */ two_pow_128,\n    /* 24 (11000) */ 0,\n    /* 25 (11001) */ 0,\n    /* 26 (11010) */ 0,\n    /* 27 (11011) */ 0,\n    /* 28 (11100) */ two_pow_128 * two_pow_64,\n    /* 29 (11101) */ two_pow_128 * two_pow_64,\n    /* 30 (11110) */ two_pow_128 * two_pow_64,\n    /* 31 (11111) */ two_pow_128 * two_pow_64\n];\n\n// what do we multiply 2 byte chunk by\nglobal path_multipliers_chunk1: [Field; 32] = [\n    /* 0  (00000) */ 0,\n    /* 1  (00001) */ 0,\n    /* 2  (00010) */ 1,\n    /* 3  (00011) */ 1,\n    /* 4  (00100) */ 0,\n    /* 5  (00101) */ 0,\n    /* 6  (00110) */ two_pow_32,\n    /* 7  (00111) */ two_pow_32,\n    /* 8  (01000) */ 0,\n    /* 9  (01001) */ 0,\n    /* 10 (01010) */ two_pow_64,\n    /* 11 (01011) */ two_pow_64,\n    /* 12 (01100) */ 0,\n    /* 13 (01101) */ 0,\n    /* 14 (01110) */ two_pow_64 * two_pow_32,\n    /* 15 (01111) */ two_pow_64 * two_pow_32,\n    /* 16 (10000) */ 0,\n    /* 17 (10001) */ 0,\n    /* 18 (10010) */ two_pow_128,\n    /* 19 (10011) */ two_pow_128,\n    /* 20 (10100) */ 0,\n    /* 21 (10101) */ 0,\n    /* 22 (10110) */ two_pow_128 * two_pow_32,\n    /* 23 (10111) */ two_pow_128 * two_pow_32,\n    /* 24 (11000) */ 0,\n    /* 25 (11001) */ 0,\n    /* 26 (11010) */ two_pow_128 * two_pow_64,\n    /* 27 (11011) */ two_pow_128 * two_pow_64,\n    /* 28 (11100) */ 0,\n    /* 29 (11101) */ 0,\n    /* 30 (11110) */ two_pow_128 * two_pow_64 * two_pow_32,\n    /* 31 (11111) */ two_pow_128 * two_pow_64 * two_pow_32\n];\n\n// what do we multiply 1 byte chunk by\nglobal path_multipliers_chunk0: [Field; 32] = [\n    /* 0  (00000) */ 0,\n    /* 1  (00001) */ 1,\n    /* 2  (00010) */ 0,\n    /* 3  (00011) */ two_pow_16,\n    /* 4  (00100) */ 0,\n    /* 5  (00101) */ two_pow_32,\n    /* 6  (00110) */ 0,\n    /* 7  (00111) */ two_pow_16 * two_pow_32,\n    /* 8  (01000) */ 0,\n    /* 9  (01001) */ two_pow_64,\n    /* 10 (01010) */ 0,\n    /* 11 (01011) */ two_pow_64 * two_pow_16,\n    /* 12 (01100) */ 0,\n    /* 13 (01101) */ two_pow_64 * two_pow_32,\n    /* 14 (01110) */ 0,\n    /* 15 (01111) */ two_pow_64 * two_pow_32 * two_pow_16,\n    /* 16 (10000) */ 0,\n    /* 17 (10001) */ two_pow_128,\n    /* 18 (10010) */ 0,\n    /* 19 (10011) */ two_pow_128 * two_pow_16,\n    /* 20 (10100) */ 0,\n    /* 21 (10101) */ two_pow_128 * two_pow_32,\n    /* 22 (10110) */ 0,\n    /* 23 (10111) */ two_pow_128 * two_pow_32 * two_pow_16,\n    /* 24 (11000) */ 0,\n    /* 25 (11001) */ two_pow_128 * two_pow_64,\n    /* 26 (11010) */ 0,\n    /* 27 (11011) */ two_pow_128 * two_pow_64 * two_pow_16,\n    /* 28 (11100) */ 0,\n    /* 29 (11101) */ two_pow_128 * two_pow_64 * two_pow_32,\n    /* 30 (11110) */ 0,\n    /* 31 (11111) */ two_pow_128 * two_pow_64 * two_pow_32 * two_pow_16\n];\n\n// these are `head_path_multipliers` but in reverse order\nglobal tail_path_multipliers_chunk3: [Field; 32] = [0x0100000000000000000000000000000000, 0x0100000000000000000000000000000000, 0x0100000000000000000000000000000000, 0x0100000000000000000000000000000000, 0x0100000000000000000000000000000000, 0x0100000000000000000000000000000000, 0x0100000000000000000000000000000000, 0x0100000000000000000000000000000000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\nglobal tail_path_multipliers_chunk2: [Field; 32] = [0x01000000000000000000000000000000000000000000000000, 0x01000000000000000000000000000000000000000000000000, 0x01000000000000000000000000000000000000000000000000, 0x01000000000000000000000000000000000000000000000000, 0x00, 0x00, 0x00, 0x00, 0x0100000000000000000000000000000000, 0x0100000000000000000000000000000000, 0x0100000000000000000000000000000000, 0x0100000000000000000000000000000000, 0x00, 0x00, 0x00, 0x00, 0x010000000000000000, 0x010000000000000000, 0x010000000000000000, 0x010000000000000000, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00];\nglobal tail_path_multipliers_chunk1: [Field; 32] = [0x0100000000000000000000000000000000000000000000000000000000, 0x0100000000000000000000000000000000000000000000000000000000, 0x00, 0x00, 0x01000000000000000000000000000000000000000000000000, 0x01000000000000000000000000000000000000000000000000, 0x00, 0x00, 0x010000000000000000000000000000000000000000, 0x010000000000000000000000000000000000000000, 0x00, 0x00, 0x0100000000000000000000000000000000, 0x0100000000000000000000000000000000, 0x00, 0x00, 0x01000000000000000000000000, 0x01000000000000000000000000, 0x00, 0x00, 0x010000000000000000, 0x010000000000000000, 0x00, 0x00, 0x0100000000, 0x0100000000, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00];\nglobal tail_path_multipliers_chunk0: [Field; 32] = [0x01000000000000000000000000000000000000000000000000000000000000, 0x00, 0x0100000000000000000000000000000000000000000000000000000000, 0x00, 0x010000000000000000000000000000000000000000000000000000, 0x00, 0x01000000000000000000000000000000000000000000000000, 0x00, 0x0100000000000000000000000000000000000000000000, 0x00, 0x010000000000000000000000000000000000000000, 0x00, 0x01000000000000000000000000000000000000, 0x00, 0x0100000000000000000000000000000000, 0x00, 0x010000000000000000000000000000, 0x00, 0x01000000000000000000000000, 0x00, 0x0100000000000000000000, 0x00, 0x010000000000000000, 0x00, 0x01000000000000, 0x00, 0x0100000000, 0x00, 0x010000, 0x00, 0x01, 0x00];\n\nglobal LIMB_VALID_PATH: [Field; 35] = [\n0x000000000, // 0 0 0 0 0 0 0 0 0\n0x000000001, // 0 0 0 0 0 0 0 0 1\n0x000000003, // 0 0 0 0 0 0 0 1 1\n0x000000007, // 0 0 0 0 0 0 1 1 1\n0x000000008, // 0 0 0 0 0 1 1 1 1\n0x000000010, // 0 0 0 0 1 0 0 0 0\n0x000000020, // 0 0 0 1 0 0 0 0 0\n0x000000040, // 0 0 1 0 0 0 0 0 0\n0x000000080, // 0 1 0 0 0 0 0 0 0\n0x000000100, // 1 0 0 0 0 0 0 0 0\n0x000000200, // 0 0 0 0 0 0 0 1 0\n0x000000400, // 0 0 0 0 0 0 1 0 0\n0x000000800, // 0 0 0 0 0 1 0 0 0\n0x000001000, // 0 0 0 0 1 0 0 0 0\n0x000002000, // 0 0 0 1 0 0 0 0 0\n0x000004000, // 0 0 1 0 0 0 0 0 0\n0x000008000, // 0 1 0 0 0 0 0 0 0\n0x000010000, // 0 0 0 0 0 0 0 0 1\n0x000020000, // 0 0 0 0 0 0 0 1 0\n0x000040000, // 0 0 0 0 0 0 1 0 0\n0x000080000, // 0 0 0 0 0 1 0 0 0\n0x000100000, // 0 0 0 0 1 0 0 0 0\n0x000200000, // 0 0 0 1 0 0 0 0 0\n0x000400000, // 0 0 1 0 0 0 0 0 0\n0x000800000, // 0 1 0 0 0 0 0 0 0\n0x001000000, // 0 0 0 0 0 0 0 0 1\n0x002000000, // 0 0 0 0 0 0 0 1 0\n0x004000000, // 0 0 0 0 0 0 1 0 0\n0x008000000, // 0 0 0 0 0 1 0 0 0\n0x010000000, // 0 0 0 0 1 0 0 0 0\n0x020000000, // 0 0 0 1 0 0 0 0 0\n0x040000000, // 0 0 1 0 0 0 0 0 0\n0x080000000, // 0 1 0 0 0 0 0 0 0\n0x100000000,\n0x200000000\n];\n\n// these path variables describe the location of a limb in an array\n// e.g. LAST_LIMB_PATH[5] produces 2^{5-1},\n// which is decomposed into 1 0 0 0 0, and the decompositions turned into an array M\n// M[4] = 1 i.e. the limbs[4] should contain the last limb\n// array extends to 0x200000000 which is 2^33 => 33 31 byte limbs = 1,023 bytes\n// this puts a hard limit on the max size of a key that this program supports.\nglobal LAST_LIMB_PATH: [Field; 36] = [\n0x000000000, // 0 0 0 0 0 0 0 0 0 <-- edge case because sometimes array index is -1, so we offset by 1 TODO explain better\n0x000000000, // 0 0 0 0 0 0 0 0 1\n0x000000001, // 0 0 0 0 0 0 0 1 0\n0x000000003, // 0 0 0 0 0 0 1 0 0\n0x000000007, // 0 0 0 0 0 1 0 0 0\n0x00000000f, // 0 0 0 0 1 0 0 0 0\n0x00000001f, // 0 0 0 1 0 0 0 0 0\n0x00000003f, // 0 0 1 0 0 0 0 0 0\n0x00000007f, // 0 1 0 0 0 0 0 0 0\n0x0000000ff, // 1 0 0 0 0 0 0 0 0\n0x0000001ff, // 0 0 0 0 0 0 0 1 0\n0x0000003ff, // 0 0 0 0 0 0 1 0 0\n0x0000007ff, // 0 0 0 0 0 1 0 0 0\n0x000000fff, // 0 0 0 0 1 0 0 0 0\n0x000001fff, // 0 0 0 1 0 0 0 0 0\n0x000003fff, // 0 0 1 0 0 0 0 0 0\n0x000007fff, // 0 1 0 0 0 0 0 0 0\n0x00000ffff, // 0 0 0 0 0 0 0 0 1\n0x00001ffff, // 0 0 0 0 0 0 0 1 0\n0x00003ffff, // 0 0 0 0 0 0 1 0 0\n0x00007ffff, // 0 0 0 0 0 1 0 0 0\n0x0000fffff, // 0 0 0 0 1 0 0 0 0\n0x0001fffff, // 0 0 0 1 0 0 0 0 0\n0x0003fffff, // 0 0 1 0 0 0 0 0 0\n0x0007fffff, // 0 1 0 0 0 0 0 0 0\n0x000ffffff, // 0 0 0 0 0 0 0 0 1\n0x001ffffff, // 0 0 0 0 0 0 0 1 0\n0x003ffffff, // 0 0 0 0 0 0 1 0 0\n0x007ffffff, // 0 0 0 0 0 1 0 0 0\n0x00fffffff, // 0 0 0 0 1 0 0 0 0\n0x01fffffff, // 0 0 0 1 0 0 0 0 0\n0x03fffffff, // 0 0 1 0 0 0 0 0 0\n0x07fffffff, // 0 1 0 0 0 0 0 0 0\n0x0ffffffff,\n0x1ffffffff,\n0x3ffffffff\n];\n\nglobal INTEGER_UP_TO_62_IS_GREATER_THAN_31: [Field; 63] = [\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\n];\nglobal NUM_BYTES_MOD_31_IS_ZERO: [Field; 31] = [\n    1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n];\nglobal BYTE_SHIFT: [Field; 32] = [\n        1,\n        0x1000000000000000000000000000000000000000000000000000000000000,\n        0x10000000000000000000000000000000000000000000000000000000000,\n        0x100000000000000000000000000000000000000000000000000000000,\n        0x1000000000000000000000000000000000000000000000000000000,\n        0x10000000000000000000000000000000000000000000000000000,\n        0x100000000000000000000000000000000000000000000000000,\n        0x1000000000000000000000000000000000000000000000000,\n        0x10000000000000000000000000000000000000000000000,\n        0x100000000000000000000000000000000000000000000,\n        0x1000000000000000000000000000000000000000000,\n        0x10000000000000000000000000000000000000000,\n        0x100000000000000000000000000000000000000,\n        0x1000000000000000000000000000000000000,\n        0x10000000000000000000000000000000000,\n        0x100000000000000000000000000000000,\n        0x1000000000000000000000000000000,\n        0x10000000000000000000000000000,\n        0x100000000000000000000000000,\n        0x1000000000000000000000000,\n        0x10000000000000000000000,\n        0x100000000000000000000,\n        0x1000000000000000000,\n        0x10000000000000000,\n        0x100000000000000,\n        0x1000000000000,\n        0x10000000000,\n        0x100000000,\n        0x1000000,\n        0x10000,\n        0x100,\n        1\n    ];\n\nglobal PATH_LOOKUP: [[bool; 5]; 32] = [\n        [false, false, false, false, false],\n        [true, false, false, false, false],\n        [false, true, false, false, false],\n        [true, true, false, false, false],\n        [false, false, true, false, false],\n        [true, false, true, false, false],\n        [false, true, true, false, false],\n        [true, true, true, false, false],\n        [false, false, false, true, false],\n        [true, false, false, true, false],\n        [false, true, false, true, false],\n        [true, true, false, true, false],\n        [false, false, true, true, false],\n        [true, false, true, true, false],\n        [false, true, true, true, false],\n        [true, true, true, true, false],\n        [false, false, false, false, true],\n        [true, false, false, false, true],\n        [false, true, false, false, true],\n        [true, true, false, false, true],\n        [false, false, true, false, true],\n        [true, false, true, false, true],\n        [false, true, true, false, true],\n        [true, true, true, false, true],\n        [false, false, false, true, true],\n        [true, false, false, true, true],\n        [false, true, false, true, true],\n        [true, true, false, true, true],\n        [false, false, true, true, true],\n        [true, false, true, true, true],\n        [false, true, true, true, true],\n        [true, true, true, true, true]\n    ];\n\n// #############################################################\n// ### METHODS\n// #############################################################\n\n/**\n * slice a field that represents bytes [0, ..., 31] into 5 chunks where:\n * chunk[0] = 1 byte\n * chunk[1] = 2 bytes\n * chunk[2] = 4 bytes\n * chunk[3] = 8 bytes\n * chunk[4] = 16 bytes\n *\n * some of the chunks will describe the bytes [0, ..., num_bytes - 1]\n * some of the chunks will describe the bytes [num_bytes, ..., 31]\n **/\nunconstrained fn __slice_field(f: Field, num_bytes: Field) -> [Field; 5] {\n    let head_path = PATH_LOOKUP[num_bytes];\n    let bytes: [u8; 32] = f.to_be_bytes();\n    let bytes = bytes.map(|b: u8| b as Field);\n\n    let mut chunks: [Field; 5] = [0; 5];\n    let mut head_ptr = 1;\n    let mut tail_ptr = num_bytes + 1;\n    if head_path[0] {\n        chunks[0] = bytes[head_ptr] as Field;\n        head_ptr += 1;\n    } else {\n        chunks[0] = bytes[tail_ptr] as Field;\n        tail_ptr += 1;\n    }\n    if head_path[1] {\n        chunks[1] = bytes[head_ptr] * 0x100 + bytes[head_ptr + 1];\n        head_ptr += 2;\n    } else {\n        chunks[1] = bytes[tail_ptr] * 0x100 + bytes[tail_ptr + 1];\n        tail_ptr += 2;\n    }\n    if head_path[2] {\n        chunks[2] = bytes[head_ptr] * 0x1000000 + bytes[head_ptr + 1] * 0x10000\n        + bytes[head_ptr + 2] * 0x100 + bytes[head_ptr + 3];\n        head_ptr += 4;\n    } else {\n        chunks[2] = bytes[tail_ptr] * 0x1000000 + bytes[tail_ptr + 1] * 0x10000\n        + bytes[tail_ptr + 2] * 0x100 + bytes[tail_ptr + 3];\n        tail_ptr += 4;\n    }\n    if head_path[3] {\n        chunks[3] =\n        bytes[head_ptr] * 0x100000000000000 + bytes[head_ptr + 1] * 0x1000000000000\n        + bytes[head_ptr + 2] * 0x10000000000 + bytes[head_ptr + 3] * 0x100000000\n        + bytes[head_ptr + 4] * 0x1000000 + bytes[head_ptr + 5] * 0x10000\n        + bytes[head_ptr + 6] * 0x100 + bytes[head_ptr + 7];\n        head_ptr += 8;\n    } else {\n        chunks[3] =\n        bytes[tail_ptr] * 0x100000000000000 + bytes[tail_ptr + 1] * 0x1000000000000\n        + bytes[tail_ptr + 2] * 0x10000000000 + bytes[tail_ptr + 3] * 0x100000000\n        + bytes[tail_ptr + 4] * 0x1000000 + bytes[tail_ptr + 5] * 0x10000\n        + bytes[tail_ptr + 6] * 0x100 + bytes[tail_ptr + 7];\n        tail_ptr += 8;\n    }\n    if head_path[4] {\n        chunks[4] =\n        bytes[head_ptr] *       0x1000000000000000000000000000000 + bytes[head_ptr + 1] * 0x10000000000000000000000000000\n        + bytes[head_ptr + 2] * 0x100000000000000000000000000 + bytes[head_ptr + 3] *      0x1000000000000000000000000\n        + bytes[head_ptr + 4] * 0x10000000000000000000000 + bytes[head_ptr + 5] * 0x100000000000000000000\n        + bytes[head_ptr + 6] * 0x1000000000000000000 + bytes[head_ptr + 7] * 0x10000000000000000\n        + bytes[head_ptr + 8] * 0x100000000000000 + bytes[head_ptr + 9] * 0x1000000000000\n        + bytes[head_ptr + 10] * 0x10000000000 + bytes[head_ptr + 11] * 0x100000000\n        + bytes[head_ptr + 12] * 0x1000000 + bytes[head_ptr + 13] * 0x10000\n        + bytes[head_ptr + 14] * 0x100 + bytes[head_ptr + 15];\n    } else {\n        chunks[4] =\n        bytes[tail_ptr] * 0x1000000000000000000000000000000 + bytes[tail_ptr + 1] * 0x10000000000000000000000000000\n        + bytes[tail_ptr + 2] * 0x100000000000000000000000000 + bytes[tail_ptr + 3] * 0x1000000000000000000000000\n        + bytes[tail_ptr + 4] * 0x10000000000000000000000 + bytes[tail_ptr + 5] * 0x100000000000000000000\n        + bytes[tail_ptr + 6] * 0x1000000000000000000 + bytes[tail_ptr + 7] * 0x10000000000000000\n        + bytes[tail_ptr + 8] * 0x100000000000000 + bytes[tail_ptr + 9] * 0x1000000000000\n        + bytes[tail_ptr + 10] * 0x10000000000 + bytes[tail_ptr + 11] * 0x100000000\n        + bytes[tail_ptr + 12] * 0x1000000 + bytes[tail_ptr + 13] * 0x10000\n        + bytes[tail_ptr + 14] * 0x100 + bytes[tail_ptr + 15];\n    }\n\n    chunks\n}\n\nunconstrained fn __divmod(numerator: Field, denominator: Field) -> (Field, Field) {\n    let quotient = numerator as u32 / denominator as u32;\n    let remainder = numerator as u32 % denominator as u32;\n    (quotient as Field, remainder as Field)\n}\n\n/**\n * @brief cheeky divmod method for dividing a u16 by 31\n *        we know the quotient will fit into a 14 bit range check which will save us some fractional gates\n **/\nfn divmod_31(numerator: Field) -> (Field, Field) {\n    let (quotient, remainder) = __divmod(numerator, 31);\n\n    let qf = quotient as Field;\n    let rf = remainder as Field;\n\n    // note: these range checks are because we know the denominator is 31\n    // TODO: need more checks, atm remainder could equal 31\n    qf.assert_max_bit_size(14);\n    rf.assert_max_bit_size(5);\n\n    // n / d = q\n    // d * q + r = n\n    assert(qf * 31 as Field + rf == numerator as Field);\n    (quotient, remainder)\n}\n\n/**\n * @brief converts a 16 bit value into 16 fake bools (Field elements that are 0 or 1)\n **/\nunconstrained fn decompose(val: Field) -> [Field; 16] {\n    let mut r: [Field; 16] = [0; 16];\n\n    let mut it = val as u32;\n    for i in 0..16 {\n        r[i] = (it & 1) as Field;\n        it >>= 1;\n    }\n    r\n}\n\n// 5 gates?\npub fn get_last_limb_path<let OutputFields: u32>(last_limb_index: Field) -> [Field; OutputFields] {\n    // TODO we offset by 1 explain why (0 byte length produces 0 - 1 which = invalid array index. we just add 1 and increase array length by 1 to compensate)\n    let path = LAST_LIMB_PATH[last_limb_index + 1]; // 2\n\n    let path_valid_bits = decompose(path);\n    let mut path_valid_sum: Field = 0;\n    let mut path_valid_output: [Field; OutputFields] = [0; OutputFields];\n    for i in 0..OutputFields {\n        assert(path_valid_bits[i] * path_valid_bits[i] - path_valid_bits[i] == 0);\n        path_valid_sum += (path_valid_bits[i] * (1 << i as u8) as Field);\n        path_valid_output[i] = path_valid_bits[i];\n    }\n    assert(path_valid_sum == path);\n    path_valid_output\n}\n\n/**\n * @brief slice a Field `f`, that represents 31-bytes, into two outputs `head, tail`\n *        where `head = f.slice(0, num_bytes)`, `tail = f.slice(num_bytes, 31)`\n * @details cost 46 gates\n **/\npub fn slice_field(f: Field, num_bytes: Field) -> (Field, Field) {\n    let chunks = __slice_field(f, num_bytes);\n    chunks[0].assert_max_bit_size(8); // 1.25 gates\n    chunks[1].assert_max_bit_size(16); // 1.5 gates\n    chunks[2].assert_max_bit_size(32); // 1.75 gates\n    chunks[3].assert_max_bit_size(64); // 3.25 gates\n    chunks[4].assert_max_bit_size(128); // 7.5 gates\n\n    let mut head: Field = 0;\n    let mut tail: Field = 0;\n\n    // 15 gates\n    let temp = path_multipliers_chunk4[num_bytes];\n    head = chunks[4] * temp;\n    std::as_witness(head);\n    head += chunks[3] * path_multipliers_chunk3[num_bytes];\n    std::as_witness(head);\n    head += chunks[2] * path_multipliers_chunk2[num_bytes];\n    std::as_witness(head);\n    head += chunks[1] * path_multipliers_chunk1[num_bytes];\n    std::as_witness(head);\n    head += chunks[0] * path_multipliers_chunk0[num_bytes];\n\n    // 13 gates\n    tail = chunks[4] * (1 - temp);\n    std::as_witness(tail);\n    tail += chunks[3] * tail_path_multipliers_chunk3[num_bytes];\n    std::as_witness(tail);\n    tail += chunks[2] * tail_path_multipliers_chunk2[num_bytes];\n    std::as_witness(tail);\n    tail += chunks[1] * tail_path_multipliers_chunk1[num_bytes];\n    std::as_witness(tail);\n    tail += chunks[0] * tail_path_multipliers_chunk0[num_bytes];\n    std::as_witness(tail);\n\n    // 3 gates\n    let total = tail + head * BYTE_SHIFT[num_bytes];\n    assert(total == f);\n\n    // total 46.25 gates\n    (head, tail)\n}\n\n/**\n * @brief Given an array of fields that pack 31 bytes, return an array that slices the packed byte array at a given index for a given number of bytes\n * @description Some serious dark black magic nonsense going on here. TODO: document\n **/\npub fn slice_fields<let InputFields: u32, let OutputFields: u32>(\n    data: [Field; InputFields],\n    start_byte: Field,\n    num_bytes: Field\n) -> [Field; OutputFields] {\n    // 3.5\n    let (start_index, start_mod_31) = divmod_31(start_byte);\n    let num_underflow_bytes = start_mod_31;\n    // 3.5, 7\n    let (num_bytes_div_31, num_bytes_mod_31) = divmod_31(num_bytes);\n\n    // 2, 9\n    let num_bytes_mod_31_is_0 = NUM_BYTES_MOD_31_IS_ZERO[num_bytes_mod_31];\n    // 2, 11\n    let num_bytes_div_31_is_0 = NUM_BYTES_MOD_31_IS_ZERO[num_bytes_div_31];\n\n    // 1, 12\n    let lookup = (-num_bytes_div_31_is_0 * num_bytes) - start_mod_31 + 62;\n    std::as_witness(lookup);\n    // 3, 15\n    let bytes_fit_into_limb = INTEGER_UP_TO_62_IS_GREATER_THAN_31[lookup] * num_bytes_div_31_is_0;\n    std::as_witness(bytes_fit_into_limb);\n\n    // 2, 17\n    let num_unused_bytes_in_start_limb = (num_bytes + start_mod_31 - 31) * bytes_fit_into_limb + (31 - start_mod_31);\n    std::as_witness(num_unused_bytes_in_start_limb);\n    let num_remaining_bytes = num_bytes - num_unused_bytes_in_start_limb;\n\n    // 4.5, 21.5\n    let mut (num_whole_limbs, num_overflow_bytes) = divmod_31(num_remaining_bytes);\n    // 44, 65.5\n    let (_, tail) = slice_field(data[start_index], num_underflow_bytes);\n\n    let mut previous = tail;\n\n    let mut result = [0; OutputFields];\n\n    // 4, 69.5\n    let extra_head_section = INTEGER_UP_TO_62_IS_GREATER_THAN_31[num_overflow_bytes - start_mod_31 + 31]\n        * (1 - bytes_fit_into_limb);\n\n    // 1, 70.5\n    let index_of_output_limb: Field = (num_bytes_div_31 - num_bytes_mod_31_is_0);\n    // 5, 75.5\n    let path_valid_output: [Field; OutputFields] = get_last_limb_path(index_of_output_limb);\n\n    // 2, 77.5\n    let tail_shift = BYTE_SHIFT[num_unused_bytes_in_start_limb];\n\n    // 51, 128.5\n    for i in 0..(OutputFields - 1) {\n        // 0\n        let slice_valid = path_valid_output[i];\n        // 1\n        let data_index = (start_index + 1 + i as Field);\n        // 2, 3\n        let input_slice = data[data_index];\n        // 44, 47\n        let (head, tail) = slice_field(input_slice, num_underflow_bytes);\n        // 1, 48\n        let combined = previous * tail_shift + head;\n        // 1, 49\n        result[i] = combined * slice_valid;\n        // 2, 51\n        previous = (tail - previous) * slice_valid + previous;\n    }\n\n    // 2, 130.5\n    let slice_size = (num_bytes + start_mod_31) * bytes_fit_into_limb + num_overflow_bytes;\n\n    // 1, 131.5\n    let use_previous_for_last_limb: Field = extra_head_section + bytes_fit_into_limb;\n\n    // 1, 132.5\n    let mut index_of_overflow_limb = start_index + num_whole_limbs + 1;\n    // 2, 134.5\n    let last_limb_from_data = data[index_of_overflow_limb];\n    // 2, 136.5\n    let slice_source = (previous - last_limb_from_data) * use_previous_for_last_limb + last_limb_from_data;\n\n    // 44, 180.5\n    let (head, _) = slice_field(slice_source, slice_size);\n\n    // 3, 183.5\n    let previous_shift = BYTE_SHIFT[31 - num_overflow_bytes]; // could save 1 gate by making different shift table\n    // 2, 185.5\n    let last_limb_shift = BYTE_SHIFT[num_bytes_mod_31];\n    // 1, 186.5\n    let mut last_limb = (previous * previous_shift);\n    std::as_witness(last_limb);\n    // 1, 187.5\n    last_limb = last_limb * (-use_previous_for_last_limb) + last_limb + head;\n    std::as_witness(last_limb);\n    // 1, 188.5\n    last_limb = last_limb * last_limb_shift;\n    std::as_witness(last_limb);\n\n    let mut path: [Field; OutputFields] = [0; OutputFields];\n    // 2, 190.5\n    for i in 1..OutputFields {\n        path[i] = path_valid_output[i] * -path_valid_output[i-1] + path_valid_output[i-1];\n    }\n    // 1, 191.5\n    path[0] = (1 - path_valid_output[0]);\n\n    // 4, 195.5\n    // actual valud = 182, missing gates?\n    for i in 0..OutputFields {\n        // 2\n        result[i] = (last_limb - result[i]) * path[i] + result[i];\n        // std::as_witness(result[i]);\n    }\n    // actual value = 182?\n    result\n}\n\nmod test {\n    use crate::_string_tools::slice_packed_field::slice_field;\n    use crate::_string_tools::slice_packed_field::slice_fields;\n\n    unconstrained fn build_slices_for_test<let N: u32>(\n        bytes: [u8; N],\n        start: u32,\n        num_bytes: u32\n    ) -> [Field; 3] {\n        let mut slices: [Field; 3] = [0; 3];\n        for i in 0..3 {\n            for k in 0..31 {\n                let mut idx = i * 31 + k;\n                slices[i] *= 0x100;\n                if (idx < num_bytes) {\n                    slices[i] += bytes[idx + start] as Field;\n                }\n            }\n        }\n        slices\n    }\n\n    #[test]\nfn test_slice_fields_nolength() {\n        let text: [u8; 1405] = \"Charlie is genius, right. He's made from a million pieces of old bubble gum. Imagine that! In the summer of 1976, on his way home from an Alice Cooper concert, Charlie started to melt onto the pavement. It was too hot in L.A., and he melted like a pink bitch. Luckily though, there was Eric Phillips, a local crocodile who dabbled in black magic. He took pity on Charlie and scraped him off the floor with a pair of fish slicers. He poured him into an antique soup ladle, and boarded his magic carpet. Destination: Alaska! Eric Phillips decided to refreeze Charlie, but in his cold-blooded reptilian haste, he refroze him into to the shape of a Hoover. Charlie wasn't fazed though, he just zoomed about the place, sucking up Inuits. Ha ha! Oh. The Inuits didn't mind; they loved it in Charlie's pink, tight warm belly pouch, and they refused to come out. Charlie said, \\\"I'm cool with that,\\\" and set fire to a posh hammer to make it official. he downside was that the Inuits suffocated immediately. It was air-tight in there. Charlie panicked and fired the tiny Inuit bullets into Eric's crocodile peepers. The green shape was frozen. After a quick drink, Charlie stole Eric Phillips's magic carpet and left for Seattle. Charlie was racked with guilt: he'd killed 50 Inuits, noone needs that. He decided to spend the rest of his life putting small hairstyles onto boots, monkey nuts, trumpets and spanners.\".as_bytes();\n        println(f\"text = {text}\");\n        let mut slices: [Field; 46 + 3] = [0; 46 + 3];\n        for i in 0..46 {\n            for j in 0..31 {\n                let mut idx = i * 31 + j;\n                slices[i] *= 0x100;\n                if (idx < 1405) {\n                    slices[i] += text[idx] as Field;\n                }\n            }\n        }\n        // let start_byte = 26;\n\n        let num_bytes = 0;\n        let start_byte: u32 = 0;\n        let mut expected_slices: [Field; 3] = build_slices_for_test(text, start_byte, num_bytes);\n        let result_slices: [Field; 3] = slice_fields(slices, start_byte as Field, num_bytes as Field);\n        assert(result_slices == expected_slices);\n    }\n\n    #[test]\nfn test_slice_fields() {\n        let text: [u8; 1405] = \"Charlie is genius, right. He's made from a million pieces of old bubble gum. Imagine that! In the summer of 1976, on his way home from an Alice Cooper concert, Charlie started to melt onto the pavement. It was too hot in L.A., and he melted like a pink bitch. Luckily though, there was Eric Phillips, a local crocodile who dabbled in black magic. He took pity on Charlie and scraped him off the floor with a pair of fish slicers. He poured him into an antique soup ladle, and boarded his magic carpet. Destination: Alaska! Eric Phillips decided to refreeze Charlie, but in his cold-blooded reptilian haste, he refroze him into to the shape of a Hoover. Charlie wasn't fazed though, he just zoomed about the place, sucking up Inuits. Ha ha! Oh. The Inuits didn't mind; they loved it in Charlie's pink, tight warm belly pouch, and they refused to come out. Charlie said, \\\"I'm cool with that,\\\" and set fire to a posh hammer to make it official. he downside was that the Inuits suffocated immediately. It was air-tight in there. Charlie panicked and fired the tiny Inuit bullets into Eric's crocodile peepers. The green shape was frozen. After a quick drink, Charlie stole Eric Phillips's magic carpet and left for Seattle. Charlie was racked with guilt: he'd killed 50 Inuits, noone needs that. He decided to spend the rest of his life putting small hairstyles onto boots, monkey nuts, trumpets and spanners.\".as_bytes();\n        println(f\"text = {text}\");\n        let mut slices: [Field; 46 + 3] = [0; 46 + 3];\n        for i in 0..46 {\n            for j in 0..31 {\n                let mut idx = i * 31 + j;\n                slices[i] *= 0x100;\n                if (idx < 1405) {\n                    slices[i] += text[idx] as Field;\n                }\n            }\n        }\n        // let start_byte = 26;\n\n        let byte_sizes: [u32; 10] = [\n            0,\n            1,\n            5,\n            30,\n            31,\n            32,\n            47,\n            61,\n            62,\n            90\n        ];\n\n        let byte_positions: [u32; 18] = [\n            0,\n            1,\n            14,\n            15,\n            16,\n            20,\n            28,\n            29,\n            30,\n            31,\n            32,\n            33,\n            38,\n            40,\n            55,\n            60,\n            61,\n            62\n        ];\n\n        for i in 0..10 {\n            let num_bytes = byte_sizes[i];\n            for j in 0..18 {\n                let start_byte: u32 = byte_positions[j];\n                let mut expected_slices: [Field; 3] = build_slices_for_test(text, start_byte, num_bytes);\n                let result_slices: [Field; 3] = slice_fields(slices, start_byte as Field, num_bytes as Field);\n                assert(result_slices == expected_slices);\n            }\n\n            for j in 0..18 {\n                let start_byte: u32 = text.len() - num_bytes - byte_positions[j];\n                let mut expected_slices: [Field; 3] = build_slices_for_test(text, start_byte, num_bytes);\n                let result_slices: [Field; 3] = slice_fields(slices, start_byte as Field, num_bytes as Field);\n                assert(result_slices == expected_slices);\n            }\n        }\n    }\n\n    #[test]\nfn test_slice_field() {\n        let input = 0xffeebbccbbaa99887766554433221100112233445566778899aabbccddeeff;\n\n        let input_bytes: [u8; 32] = input.to_be_bytes();\n\n        for i in 0..32 {\n            println(f\"i = {i}\");\n            let num_bytes = i as Field;\n            let (head, tail) = slice_field(input, num_bytes);\n            let mut expected_head: Field = 0;\n            let mut expected_tail: Field = 0;\n            for j in 0..num_bytes as u32 {\n                expected_head *= 0x100;\n                expected_head += input_bytes[j + 1] as Field;\n            }\n            for j in 0..(31 - num_bytes as u32) {\n                expected_tail *= 0x100;\n                expected_tail += input_bytes[j as Field + num_bytes + 1] as Field;\n            }\n            assert(expected_head == head);\n            assert(expected_tail == tail);\n        }\n        let (head, tail) = slice_field(input, 11);\n        let head_expected = 0xffeebbccbbaa9988776655;\n        let tail_expected = 0x4433221100112233445566778899aabbccddeeff;\n        assert(head_expected == head);\n        assert(tail_expected == tail);\n    }\n}\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_json_parserv0.2.0/src/_string_tools/slice_packed_field.nr"},"95":{"source":"use crate::enums::Token::NUM_TOKENS_MUL_2;\n\nglobal TOKEN_ENDS_OBJECT_OR_ARRAY : [Field; 11] = [0,0,1,0,1,0,0,0,0,0,0];\nglobal TOKEN_IS_ARRAY_OBJECT_OR_VALUE: [Field; 11] = [0,1,0,1,0,0,0,1,1,1,0];\nglobal TOKEN_FLAGS_TABLE: [Field; NUM_TOKENS_MUL_2] = [0x01, 0x0100000000, 0x01010000000000, 0x0101000000, 0x01010000000000, 0x01, 0x01, 0x01000000000101, 0x01000000000101, 0x01000000000101, 0x010001, 0x01000001, 0x0100000000, 0x01010000000000, 0x0101000000, 0x01010000000000, 0x01000001, 0x01000001, 0x01000001000101, 0x01000001000101, 0x01000001000101, 0x01010001];\nglobal PROCESS_RAW_TRANSCRIPT_TABLE: [Field; 1024] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x060006, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x050005, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x030003, 0x00, 0x040004, 0x00, 0x00, 0x00, 0x090009, 0x00, 0x00, 0x00, 0x090009, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x090009, 0x00, 0x090009, 0x00, 0x00, 0x00, 0x090009, 0x090009, 0x090009, 0x090009, 0x00, 0x00, 0x00, 0x00, 0x00, 0x010001, 0x00, 0x020002, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x060000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x050000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x030000, 0x00, 0x040000, 0x00, 0x00, 0x00, 0x090000, 0x00, 0x00, 0x00, 0x090000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x090000, 0x00, 0x090000, 0x00, 0x00, 0x00, 0x090000, 0x090000, 0x090000, 0x090000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x010000, 0x00, 0x020000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x060108, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x050000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x030000, 0x00, 0x040108, 0x00, 0x00, 0x00, 0x090000, 0x00, 0x00, 0x00, 0x090000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x090000, 0x00, 0x090000, 0x00, 0x00, 0x00, 0x090000, 0x090000, 0x090000, 0x090000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x010000, 0x00, 0x020108, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x09, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x060109, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x050000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x030000, 0x00, 0x040109, 0x00, 0x00, 0x00, 0x090000, 0x00, 0x00, 0x00, 0x090000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x090000, 0x00, 0x090000, 0x00, 0x00, 0x00, 0x090000, 0x090000, 0x090000, 0x090000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x010000, 0x00, 0x020109, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\nglobal ASCII_TO_TOKEN_TABLE: [Field; 1024] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x09, 0x09, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x09, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\nglobal JSON_CAPTURE_TABLE: [Field; 2048] = [0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x00, 0x00, 0x0100000004, 0x0100000004, 0x00, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x00, 0x0100000004, 0x01, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000004, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x0100, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100010004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100010004, 0x010003, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100010004, 0x0100000004, 0x010003, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100010004, 0x010003, 0x0100010004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x01, 0x01, 0x0100000004, 0x0100000004, 0x01, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x010001, 0x010001, 0x0100, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x01010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x0100000004, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100000104, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000004, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100000104, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000004, 0x010003, 0x0100000004, 0x0100000004, 0x0100000004, 0x010003, 0x0100010003, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x010003, 0x0100000004, 0x0100010003, 0x0100000004, 0x0100000004, 0x0100000004, 0x010003, 0x010003, 0x0100010004, 0x010003, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x00, 0x00, 0x0100000004, 0x0100000004, 0x00, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x00, 0x0100000004, 0x010001, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000004, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x0100, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100010004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100010004, 0x010003, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100010004, 0x0100000004, 0x010003, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100010004, 0x010003, 0x0100010004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x01, 0x01, 0x0100000004, 0x0100000004, 0x01, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x01010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x010001, 0x0100000004, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x010001, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000004, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x010002, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x010001, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000004, 0x010003, 0x0100000004, 0x0100000004, 0x0100000004, 0x010003, 0x0100010003, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x010003, 0x0100000004, 0x0100010003, 0x0100000004, 0x0100000004, 0x0100000004, 0x010003, 0x010003, 0x0100010004, 0x010003, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100000004, 0x0100, 0x0100000004, 0x0100000004, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000, 0x0100000000];\nglobal TOKEN_VALIDATION_TABLE: [Field; 363] = [0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x010000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x00, 0x01000000, 0x010000, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x010000, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01, 0x01000000, 0x0101, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x00, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x010000, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x010000, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x010000, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x010000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01, 0x01000000, 0x0101, 0x010000, 0x01000000, 0x01000000, 0x00, 0x00, 0x00, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x010000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01, 0x01000000, 0x0101, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x00, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x010000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x010000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x010000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01, 0x01000000, 0x0101, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x00, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x00, 0x01000000, 0x01000000, 0x01000000, 0x01000000, 0x01000000];\nglobal ASCII_TO_NUMBER: [u8; 128] = [\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        /*   */ 0,\n        /*\"!\"*/ 0,\n        /* \" */ 0,\n        /*\"#\"*/ 0,\n        /*\"$\"*/ 0,\n        /*\"%\"*/ 0,\n        /*\"&\"*/ 0,\n        /*\"'\"*/ 0,\n        /*\"(\"*/ 0,\n        /*\")\"*/ 0,\n        /*\"*\"*/ 0,\n        /*\"+\"*/ 0,\n        /*\",\"*/ 0,\n        /*\"-\"*/ 0,\n        /*\".\"*/ 0,\n        /*\"/\"*/ 0,\n        /*\"0\"*/ 0,   // numeric value\n        /*\"1\"*/ 1,   // numeric value\n        /*\"2\"*/ 2,   // numeric value\n        /*\"3\"*/ 3,   // numeric value\n        /*\"4\"*/ 4,   // numeric value\n        /*\"5\"*/ 5,   // numeric value\n        /*\"6\"*/ 6,   // numeric value\n        /*\"7\"*/ 7,   // numeric value\n        /*\"8\"*/ 8,   // numeric value\n        /*\"9\"*/ 9,   // numeric value\n        /*\":\"*/ 0,\n        /*\";\"*/ 0,\n        /*\"<\"*/ 0,\n        /*\"=\"*/ 0,\n        /*\">\"*/ 0,\n        /*\"?\"*/ 0,\n        /*\"@\"*/ 0,\n        /*\"A\"*/ 0,\n        /*\"B\"*/ 0,\n        /*\"C\"*/ 0,\n        /*\"D\"*/ 0,\n        /*\"E\"*/ 0,\n        /*\"F\"*/ 0,\n        /*\"G\"*/ 0,\n        /*\"H\"*/ 0,\n        /*\"I\"*/ 0,\n        /*\"J\"*/ 0,\n        /*\"K\"*/ 0,\n        /*\"L\"*/ 0,\n        /*\"M\"*/ 0,\n        /*\"N\"*/ 0,\n        /*\"O\"*/ 0,\n        /*\"P\"*/ 0,\n        /*\"Q\"*/ 0,\n        /*\"R\"*/ 0,\n        /*\"S\"*/ 0,\n        /*\"T\"*/ 0,\n        /*\"U\"*/ 0,\n        /*\"V\"*/ 0,\n        /*\"W\"*/ 0,\n        /*\"X\"*/ 0,\n        /*\"Y\"*/ 0,\n        /*\"Z\"*/ 0,\n        /*\"[\"*/ 0,   // an array\n        /*\"\\\"*/ 0,\n        /*\"]\"*/ 0,\n        /*\"^\"*/ 0,\n        /*\"_\"*/ 0,\n        /*\"`\"*/ 0,\n        /*\"a\"*/ 0,\n        /*\"b\"*/ 0,\n        /*\"c\"*/ 0,\n        /*\"d\"*/ 0,\n        /*\"e\"*/ 0,\n        /*\"f\"*/ 0,   // \"0\"\n        /*\"g\"*/ 0,\n        /*\"h\"*/ 0,\n        /*\"i\"*/ 0,\n        /*\"j\"*/ 0,\n        /*\"k\"*/ 0,\n        /*\"l\"*/ 0,\n        /*\"m\"*/ 0,\n        /*\"n\"*/ 0,\n        /*\"o\"*/ 0,\n        /*\"p\"*/ 0,\n        /*\"q\"*/ 0,\n        /*\"r\"*/ 0,\n        /*\"s\"*/ 0,\n        /*\"t\"*/ 0,   // \"0\"\n        /*\"u\"*/ 0,\n        /*\"v\"*/ 0,\n        /*\"w\"*/ 0,\n        /*\"x\"*/ 0,\n        /*\"y\"*/ 0,\n        /*\"z\"*/ 0,\n        /*\"{\"*/ 0,   // an object\n        /*\"|\"*/ 0,\n        /*\"}\"*/ 0,\n        /*\"~\"*/ 0,\n        /*DEL*/ 0,\n    ];\n\nglobal ESCAPE_SEQUENCE_END_CHARS: [bool; 128] = [\n        /* NULL */ false,\n        /* SOH */ false,\n        /* TXT */ false,\n        /* ETX */ false,\n        /* EOT */ false,\n        /* ENQ */ false,\n        /* ACK */ false,\n        /* BEL */ false,\n        /* BS */ false,\n        /* TAB */ false,\n        /* NL */ false,\n        /* VT */ false,\n        /* FF */ false,\n        /* CR */ false,\n        /* SI */ false,\n        /* SO */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /* SPACE */ false,\n        /*\"!\"*/ false,\n        /* \" */ true,   // replace \\\" with double quote\n        /*\"#\"*/ false,\n        /*\"$\"*/ false,\n        /*\"%\"*/ false,\n        /*\"&\"*/ false,\n        /*\"'\"*/ false,\n        /*\"(\"*/ false,\n        /*\")\"*/ false,\n        /*\"*\"*/ false,\n        /*\"+\"*/ false,\n        /*\",\"*/ false,\n        /*\"-\"*/ false,\n        /*\".\"*/ false,\n        /*\"/\"*/ false,\n        /*\"0\"*/ false,\n        /*\"1\"*/ false,\n        /*\"2\"*/ false,\n        /*\"3\"*/ false,\n        /*\"4\"*/ false,\n        /*\"5\"*/ false,\n        /*\"6\"*/ false,\n        /*\"7\"*/ false,\n        /*\"8\"*/ false,\n        /*\"9\"*/ false,\n        /*\":\"*/ false,\n        /*\";\"*/ false,\n        /*\"<\"*/ false,\n        /*\"=\"*/ false,\n        /*\">\"*/ false,\n        /*\"?\"*/ false,\n        /*\"@\"*/ false,\n        /*\"A\"*/ false,\n        /*\"B\"*/ false,\n        /*\"C\"*/ false,\n        /*\"D\"*/ false,\n        /*\"E\"*/ false,\n        /*\"F\"*/ false,\n        /*\"G\"*/ false,\n        /*\"H\"*/ false,\n        /*\"I\"*/ false,\n        /*\"J\"*/ false,\n        /*\"K\"*/ false,\n        /*\"L\"*/ false,\n        /*\"M\"*/ false,\n        /*\"N\"*/ false,\n        /*\"O\"*/ false,\n        /*\"P\"*/ false,\n        /*\"Q\"*/ false,\n        /*\"R\"*/ false,\n        /*\"S\"*/ false,\n        /*\"T\"*/ false,\n        /*\"U\"*/ false,\n        /*\"V\"*/ false,\n        /*\"W\"*/ false,\n        /*\"X\"*/ false,\n        /*\"Y\"*/ false,\n        /*\"Z\"*/ false,\n        /*\"[\"*/ false,\n        /*\"\\\"*/ true, // replace \\\\ with \\\n        /*\"]\"*/ false,\n        /*\"^\"*/ false,\n        /*\"_\"*/ false,\n        /*\"`\"*/ false,\n        /*\"a\"*/ false,\n        /*\"b\"*/ true,  // replace \\b with backspace\n        /*\"c\"*/ false,\n        /*\"d\"*/ false,\n        /*\"e\"*/ false,\n        /*\"f\"*/ true, // replace \\f with form feed\n        /*\"g\"*/ false,\n        /*\"h\"*/ false,\n        /*\"i\"*/ false,\n        /*\"j\"*/ false,\n        /*\"k\"*/ false,\n        /*\"l\"*/ false,\n        /*\"m\"*/ false,\n        /*\"n\"*/ true, // replace \\n with line feed\n        /*\"o\"*/ false,\n        /*\"p\"*/ false,\n        /*\"q\"*/ false,\n        /*\"r\"*/ true, // replace \\r with carriage return\n        /*\"s\"*/ false,\n        /*\"t\"*/ true,  // replace \\t with tab\n        /*\"u\"*/ false,\n        /*\"v\"*/ false,\n        /*\"w\"*/ false,\n        /*\"x\"*/ false,\n        /*\"y\"*/ false,\n        /*\"z\"*/ false,\n        /*\"{\"*/ false,\n        /*\"|\"*/ false,\n        /*\"}\"*/ false,\n        /*\"~\"*/ false,\n        /*DEL*/ false,\n    ];\n\nglobal ESCAPE_SEQUENCE_START_CHARS: [bool; 128] = [\n        /* NULL */ false,\n        /* SOH */ false,\n        /* TXT */ false,\n        /* ETX */ false,\n        /* EOT */ false,\n        /* ENQ */ false,\n        /* ACK */ false,\n        /* BEL */ false,\n        /* BS */ false,\n        /* TAB */ false,\n        /* NL */ false,\n        /* VT */ false,\n        /* FF */ false,\n        /* CR */ false,\n        /* SI */ false,\n        /* SO */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /*  */ false,\n        /* SPACE */ false,\n        /*\"!\"*/ false,\n        /* \" */ false,\n        /*\"#\"*/ false,\n        /*\"$\"*/ false,\n        /*\"%\"*/ false,\n        /*\"&\"*/ false,\n        /*\"'\"*/ false,\n        /*\"(\"*/ false,\n        /*\")\"*/ false,\n        /*\"*\"*/ false,\n        /*\"+\"*/ false,\n        /*\",\"*/ false,\n        /*\"-\"*/ false,\n        /*\".\"*/ false,\n        /*\"/\"*/ false,\n        /*\"0\"*/ false,\n        /*\"1\"*/ false,\n        /*\"2\"*/ false,\n        /*\"3\"*/ false,\n        /*\"4\"*/ false,\n        /*\"5\"*/ false,\n        /*\"6\"*/ false,\n        /*\"7\"*/ false,\n        /*\"8\"*/ false,\n        /*\"9\"*/ false,\n        /*\":\"*/ false,\n        /*\";\"*/ false,\n        /*\"<\"*/ false,\n        /*\"=\"*/ false,\n        /*\">\"*/ false,\n        /*\"?\"*/ false,\n        /*\"@\"*/ false,\n        /*\"A\"*/ false,\n        /*\"B\"*/ false,\n        /*\"C\"*/ false,\n        /*\"D\"*/ false,\n        /*\"E\"*/ false,\n        /*\"F\"*/ false,\n        /*\"G\"*/ false,\n        /*\"H\"*/ false,\n        /*\"I\"*/ false,\n        /*\"J\"*/ false,\n        /*\"K\"*/ false,\n        /*\"L\"*/ false,\n        /*\"M\"*/ false,\n        /*\"N\"*/ false,\n        /*\"O\"*/ false,\n        /*\"P\"*/ false,\n        /*\"Q\"*/ false,\n        /*\"R\"*/ false,\n        /*\"S\"*/ false,\n        /*\"T\"*/ false,\n        /*\"U\"*/ false,\n        /*\"V\"*/ false,\n        /*\"W\"*/ false,\n        /*\"X\"*/ false,\n        /*\"Y\"*/ false,\n        /*\"Z\"*/ false,\n        /*\"[\"*/ false,\n        /*\"\\\"*/ true, // replace \\\\ with \\\n        /*\"]\"*/ false,\n        /*\"^\"*/ false,\n        /*\"_\"*/ false,\n        /*\"`\"*/ false,\n        /*\"a\"*/ false,\n        /*\"b\"*/ false, \n        /*\"c\"*/ false,\n        /*\"d\"*/ false,\n        /*\"e\"*/ false,\n        /*\"f\"*/ false,\n        /*\"g\"*/ false,\n        /*\"h\"*/ false,\n        /*\"i\"*/ false,\n        /*\"j\"*/ false,\n        /*\"k\"*/ false,\n        /*\"l\"*/ false,\n        /*\"m\"*/ false,\n        /*\"n\"*/ false,\n        /*\"o\"*/ false,\n        /*\"p\"*/ false,\n        /*\"q\"*/ false,\n        /*\"r\"*/ false,\n        /*\"s\"*/ false,\n        /*\"t\"*/ false,\n        /*\"u\"*/ false,\n        /*\"v\"*/ false,\n        /*\"w\"*/ false,\n        /*\"x\"*/ false,\n        /*\"y\"*/ false,\n        /*\"z\"*/ false,\n        /*\"{\"*/ false,\n        /*\"|\"*/ false,\n        /*\"}\"*/ false,\n        /*\"~\"*/ false,\n        /*DEL*/ false,\n    ];\n\nglobal ESCAPE_SEQUENCE_REPLACEMENT: [u8; 128] = [\n        /* NULL */ 0,\n        /* SOH */ 0,\n        /* TXT */ 0,\n        /* ETX */ 0,\n        /* EOT */ 0,\n        /* ENQ */ 0,\n        /* ACK */ 0,\n        /* BEL */ 0,\n        /* BS */ 0,\n        /* TAB */ 0,\n        /* NL */ 0,\n        /* VT */ 0,\n        /* FF */ 0,\n        /* CR */ 0,\n        /* SI */ 0,\n        /* SO */ 0,\n        /*  */ 0,\n        /*  */ 0,\n        /*  */ 0,\n        /*  */ 0,\n        /*  */ 0,\n        /*  */ 0,\n        /*  */ 0,\n        /*  */ 0,\n        /*  */ 0,\n        /*  */ 0,\n        /*  */ 0,\n        /*  */ 0,\n        /*  */ 0,\n        /*  */ 0,\n        /*  */ 0,\n        /*  */ 0,\n        /* SPACE */ 0,\n        /*\"!\"*/ 0,\n        /* \" */ 34,   // replace \\\" with double quote\n        /*\"#\"*/ 0,\n        /*\"$\"*/ 0,\n        /*\"%\"*/ 0,\n        /*\"&\"*/ 0,\n        /*\"'\"*/ 0,\n        /*\"(\"*/ 0,\n        /*\")\"*/ 0,\n        /*\"*\"*/ 0,\n        /*\"+\"*/ 0,\n        /*\",\"*/ 0,\n        /*\"-\"*/ 0,\n        /*\".\"*/ 0,\n        /*\"/\"*/ 0,\n        /*\"0\"*/ 0,\n        /*\"1\"*/ 0,\n        /*\"2\"*/ 0,\n        /*\"3\"*/ 0,\n        /*\"4\"*/ 0,\n        /*\"5\"*/ 0,\n        /*\"6\"*/ 0,\n        /*\"7\"*/ 0,\n        /*\"8\"*/ 0,\n        /*\"9\"*/ 0,\n        /*\":\"*/ 0,\n        /*\";\"*/ 0,\n        /*\"<\"*/ 0,\n        /*\"=\"*/ 0,\n        /*\">\"*/ 0,\n        /*\"?\"*/ 0,\n        /*\"@\"*/ 0,\n        /*\"A\"*/ 0,\n        /*\"B\"*/ 0,\n        /*\"C\"*/ 0,\n        /*\"D\"*/ 0,\n        /*\"E\"*/ 0,\n        /*\"F\"*/ 0,\n        /*\"G\"*/ 0,\n        /*\"H\"*/ 0,\n        /*\"I\"*/ 0,\n        /*\"J\"*/ 0,\n        /*\"K\"*/ 0,\n        /*\"L\"*/ 0,\n        /*\"M\"*/ 0,\n        /*\"N\"*/ 0,\n        /*\"O\"*/ 0,\n        /*\"P\"*/ 0,\n        /*\"Q\"*/ 0,\n        /*\"R\"*/ 0,\n        /*\"S\"*/ 0,\n        /*\"T\"*/ 0,\n        /*\"U\"*/ 0,\n        /*\"V\"*/ 0,\n        /*\"W\"*/ 0,\n        /*\"X\"*/ 0,\n        /*\"Y\"*/ 0,\n        /*\"Z\"*/ 0,\n        /*\"[\"*/ 0,\n        /*\"\\\"*/ 92, // replace \\\\ with \\\n        /*\"]\"*/ 0,\n        /*\"^\"*/ 0,\n        /*\"_\"*/ 0,\n        /*\"`\"*/ 0,\n        /*\"a\"*/ 0,\n        /*\"b\"*/ 8,  // replace \\b with backspace\n        /*\"c\"*/ 0,\n        /*\"d\"*/ 0,\n        /*\"e\"*/ 0,\n        /*\"f\"*/ 12, // replace \\f with form feed\n        /*\"g\"*/ 0,\n        /*\"h\"*/ 0,\n        /*\"i\"*/ 0,\n        /*\"j\"*/ 0,\n        /*\"k\"*/ 0,\n        /*\"l\"*/ 0,\n        /*\"m\"*/ 0,\n        /*\"n\"*/ 10, // replace \\n with line feed\n        /*\"o\"*/ 0,\n        /*\"p\"*/ 0,\n        /*\"q\"*/ 0,\n        /*\"r\"*/ 13, // replace \\r with carriage return\n        /*\"s\"*/ 0,\n        /*\"t\"*/ 9,  // replace \\t with tab\n        /*\"u\"*/ 0,\n        /*\"v\"*/ 0,\n        /*\"w\"*/ 0,\n        /*\"x\"*/ 0,\n        /*\"y\"*/ 0,\n        /*\"z\"*/ 0,\n        /*\"{\"*/ 0,\n        /*\"|\"*/ 0,\n        /*\"}\"*/ 0,\n        /*\"~\"*/ 0,\n        /*DEL*/ 0,\n    ];\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_json_parserv0.2.0/src/json_tables.nr"},"100":{"source":"mod quicksort;\nuse crate::quicksort::quicksort::quicksort as quicksort;\nuse crate::quicksort::quicksort_explicit::quicksort as quicksort_explicit;\nuse dep::check_shuffle::{check_shuffle, get_shuffle_indices};\n\n/**\n * Given an input array of type T, return a sorted array.\n * Type `T` must satisfy the Ord and Eq trait\n * The Eq function is used within an unconstrained function so its constraint-efficiently is not relevant\n * Note: sort_extended is likely more efficient as constraining `x < y` can typically be described\n *       more efficiently than returning a boolean that describes whether `x < y`\n **/\npub fn sort<T, let N: u32>(input: [T; N]) -> [T; N] where T: std::cmp::Ord + std::cmp::Eq {\n    let sorted = quicksort(input);\n\n    for i in 0..N - 1 {\n        assert(sorted[i] <= sorted[i + 1]);\n    }\n    check_shuffle(input, sorted);\n    sorted\n}\n\n/**\n * Given an input array of type T, return a sorted array.\n * Type `T` must satisfy the Eq trait\n * The Eq function is used within an unconstrained function so its constraint-efficiently is not relevant\n *\n * The `sortfn` parameter is a function that descibes whether, given two elements `a, b` of type T, `a <= b`\n * Note: sort_extended is likely more efficient as constraining `x < y` can typically be described\n *       more efficiently than returning a boolean that describes whether `x < y`\n **/\npub fn sort_via<T, let N: u32>(input: [T; N], sortfn: fn(T, T) -> bool) -> [T; N] where T: std::cmp::Eq {\n    let sorted = quicksort_explicit(input, sortfn);\n\n    for i in 0..N - 1 {\n        assert(sortfn(sorted[i], sorted[i + 1]));\n    }\n    check_shuffle(input, sorted);\n    sorted\n}\n\n/**\n * Given an input array of type T, return a sorted array.\n * Type `T` must satisfy the Eq trait\n * The Eq function is used within an unconstrained function so its constraint-efficiently is not relevant\n *\n * The `sortfn` parameter is a function that descibes whether, given two elements `a, b` of type T, `a <= b`\n * The `sortfn_assert` parameter is a function that *asserts* that `a <= b`\n *\n * `sortfn` is used in unconstrained functions only\n * `sortfn_assert` is used in constrained functions\n\n * Note: This is likely the most efficient sort function as constraining `x < y` can typically be described\n *       more efficiently than returning a boolean that describes whether `x < y`\n **/\npub fn sort_extended<T, let N: u32>(\n    input: [T; N],\n    sortfn: fn(T, T) -> bool,\n    sortfn_assert: fn(T, T) -> ()\n) -> [T; N] where T: std::cmp::Eq {\n    let sorted = quicksort_explicit(input, sortfn);\n\n    for i in 0..N - 1 {\n        sortfn_assert(sorted[i], sorted[i + 1]);\n    }\n    check_shuffle(input, sorted);\n    sorted\n}\n\nstruct SortResult<T, let N: u32>{\n    sorted: [T; N],\n    sort_indices: [Field; N]\n}\npub fn sort_advanced<T, let N: u32>(\n    input: [T; N],\n    sortfn: fn(T, T) -> bool,\n    sortfn_assert: fn(T, T) -> ()\n) -> SortResult<T, N> where T: std::cmp::Eq {\n    let sorted = quicksort_explicit(input, sortfn);\n\n    let sort_indices = get_shuffle_indices(input, sorted);\n\n    for i in 0..N - 1 {\n        sortfn_assert(sorted[i], sorted[i + 1]);\n    }\n    SortResult { sorted, sort_indices }\n}\n\nmod test {\n    use crate::sort;\n    use crate::sort_via;\n    use crate::sort_extended;\n\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    // unconditional_lt will cost fewer constraints than the `<=` operator\n    // as we do not need to constrain the case where `a > b`, and assign a boolean variable to the result\n    fn unconditional_lt(_a: u32, _b: u32) {\n        let a = _a as Field;\n        let b = _b as Field;\n\n        let diff = b - a;\n        diff.assert_max_bit_size(32);\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = sort(arr);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = sort_via(arr, sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_extended() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = sort_extended(arr, sort_u32, unconditional_lt);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n}\n\nfn sort_u32(a: u32, b: u32) -> bool {\n    a <= b\n}\n\nfn lt_u32(a: u32, b: u32) -> bool {\n    a < b\n}\n// unconditional_lt will cost fewer constraints than the `<=` operator\n// as we do not need to constrain the case where `a > b`, and assign a boolean variable to the result\nfn unconditional_lt(_a: u32, _b: u32) {\n    let a = _a as Field;\n    let b = _b as Field;\n\n    let diff = b - a;\n    diff.assert_max_bit_size(32);\n}\n\nstruct TestStruct {\n    a: bool,\n    b: u32,\n    c: Field\n}\n\nimpl std::cmp::Eq for TestStruct {\n    fn eq(self, other: Self) -> bool {\n        \n        (self.a == other.a)\n        & (self.b == other.b)\n        & (self.c == other.c)\n    }\n}\n\nunconstrained pub fn get_lt_predicate_f(x: Field, y: Field) -> bool {\n    let a = x as u32;\n    let b = y as u32;\n    let r = a < b;\n    r\n}\n\npub fn lt_f(x: Field, y: Field) -> bool {\n    let predicate = get_lt_predicate_f(x, y);\n    let delta = y as Field - x as Field;\n    let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta;\n    lt_parameter.assert_max_bit_size(32);\n\n    predicate\n}\n\nfn less_than_for_test_struct(lhs: TestStruct, rhs: TestStruct) -> bool {\n    let a_lt = lhs.a < rhs.a;\n    let b_lt = lhs.b < rhs.b;\n    let c_lt = lt_f(lhs.c, rhs.c);\n\n    let a_eq = lhs.a == rhs.a;\n    let b_eq = lhs.b == rhs.b;\n\n    let b_flag = a_eq;\n\n    let c_flag = a_eq & b_eq;\n    let result = a_lt | (b_flag & b_lt) | (c_flag & c_lt);\n\n    result\n}\n\nfn unconditional_lte(lhs: TestStruct, rhs: TestStruct) {\n    // lhs < rhs implies:\n    // a == false, b == false\n    // a == false, b == true\n    // a == true, b == true\n    // i.e. a == true, b == false is not allowed\n    assert(lhs.a as Field * (1 - rhs.a as Field) == 0);\n\n    // a < b as u32 implies\n    // b - a > 0\n    let diff = lhs.b as Field - rhs.b as Field;\n    diff.assert_max_bit_size(32);\n\n    // a < b as Field (32 bit condition)\n    let diff = lhs.c as Field - rhs.c as Field;\n    diff.assert_max_bit_size(32);\n}\n\nglobal Num: u32 = 100;\n\n// // size 100: 7,638\n// // size 1,000: 51,738\n// // diff = 49\n// fn main2(x: [TestStruct; Num]) {\n//     let sorted = sort_extended(x, less_than_for_test_struct, unconditional_lte);\n//     println(f\"{sorted}\");\n// }\n\n// // size 100: 9,321\n// // size 1,000: 68,721\n// // diff = 59,400 = 66 per\n// fn main3(x: [TestStruct; Num]) {\n//     let sorted = sort_via(x, less_than_for_test_struct);\n//     println(f\"{sorted}\");\n// }\n\nfn unconditional_lt_f(a: Field, b: Field) {\n    let diff = b - a;\n    diff.assert_max_bit_size(32);\n}\n\n// 5,089\nfn main20(x: [Field; Num]) {\n    let sorted = sort_via(x, lt_f);\n    println(f\"{sorted}\");\n}\n\n// 4,891\nfn main000(x: [Field; Num]) {\n    let sorted = sort_extended(x, lt_f, unconditional_lt_f);\n    println(f\"{sorted}\");\n}\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_sortv0.1.0/src/lib.nr"},"102":{"source":"trait Swap {\n    fn swap(&mut self, i: u32, j: u32);\n}\n\nimpl<T, let N: u32> Swap for [T; N] {\n    fn swap(&mut self, i: u32, j: u32) {\n        let temp = self[i];\n        self[i] = self[j];\n        self[j] = temp;\n    }\n}\n\nunconstrained fn partition<T, let N: u32>(arr: &mut [T; N], low: u32, high: u32) -> u32 where T: std::cmp::Ord {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (arr[j] < arr[pivot]) {\n            arr.swap(i, j);\n            i += 1;\n        }\n    }\n    arr.swap(i, pivot);\n    i\n}\n\nunconstrained fn quicksort_recursive<T, let N: u32>(arr: &mut [T; N], low: u32, high: u32) where T: std::cmp::Ord {\n    if low < high {\n        let pivot_index = partition(arr, low, high);\n        if pivot_index > 0 {\n            quicksort_recursive(arr, low, pivot_index - 1);\n        }\n        quicksort_recursive(arr, pivot_index + 1, high);\n    }\n}\n\nunconstrained pub fn quicksort<T, let N: u32>(_arr: [T; N]) -> [T; N] where T: std::cmp::Ord {\n    let mut arr: [T; N] = _arr;\n    if arr.len() <= 1 {} else {\n        quicksort_recursive(&mut arr, 0, arr.len() - 1);\n    }\n    arr\n}\n\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_sortv0.1.0/src/quicksort/quicksort.nr"},"103":{"source":"trait Swap {\n    fn swap(&mut self, i: u32, j: u32);\n}\n\nimpl<T, let N: u32> Swap for [T; N] {\n    fn swap(&mut self, i: u32, j: u32) {\n        let temp = self[i];\n        self[i] = self[j];\n        self[j] = temp;\n    }\n}\n\nunconstrained fn partition<T, let N: u32>(arr: &mut [T; N], low: u32, high: u32, sortfn: fn(T, T) -> bool) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            arr.swap(i, j);\n            i += 1;\n        }\n    }\n    arr.swap(i, pivot);\n    i\n}\n\nunconstrained fn quicksort_recursive<T, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn(T, T) -> bool\n) {\n    if low < high {\n        let pivot_index = partition(arr, low, high, sortfn);\n        if pivot_index > 0 {\n            quicksort_recursive(arr, low, pivot_index - 1, sortfn);\n        }\n        quicksort_recursive(arr, pivot_index + 1, high, sortfn);\n    }\n}\n\nunconstrained pub fn quicksort<T, let N: u32>(_arr: [T; N], sortfn: fn(T, T) -> bool) -> [T; N] {\n    let mut arr: [T; N] = _arr;\n    if arr.len() <= 1 {} else {\n        quicksort_recursive(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_sortv0.1.0/src/quicksort/quicksort_explicit.nr"},"104":{"source":"unconstrained fn __get_shuffle_indices<T, let N: u32>(\n    lhs: [T; N],\n    rhs: [T; N]\n) -> [Field; N] where T: std::cmp::Eq {\n    let mut shuffle_indices: [Field;N ] = [0; N];\n\n    let mut shuffle_mask: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut found = false;\n        for j in 0..N {\n            if ((shuffle_mask[j] == false) & (!found)) {\n                if (lhs[i] == rhs[j]) {\n                    found = true;\n                    shuffle_indices[i] = j as Field;\n                    shuffle_mask[j] = true;\n                }\n            }\n            if (found) {\n                continue;\n            }\n        }\n        assert(found == true, \"check_shuffle, lhs and rhs arrays do not contain equivalent values\");\n    }\n\n    shuffle_indices\n}\n\nunconstrained fn __get_index<let N: u32>(indices: [Field; N], idx: Field) -> Field {\n    let mut result = 0;\n    for i in 0..N {\n        if (indices[i] == idx) {\n            result = i as Field;\n            break;\n        }\n    }\n    result\n}\n\npub fn check_shuffle<T, let N: u32>(lhs: [T; N], rhs: [T; N]) where T: std::cmp::Eq {\n    let shuffle_indices = __get_shuffle_indices(lhs, rhs);\n\n    for i in 0..N {\n        let idx = __get_index(shuffle_indices, i as Field);\n        assert_eq(shuffle_indices[idx], i as Field);\n    }\n    for i in 0..N {\n        let idx = shuffle_indices[i];\n        let expected = rhs[idx];\n        let result = lhs[i];\n        assert_eq(expected, result);\n    }\n}\n\npub fn get_shuffle_indices<T, let N: u32>(lhs: [T; N], rhs: [T; N]) -> [Field; N] where T: std::cmp::Eq {\n    let shuffle_indices = __get_shuffle_indices(lhs, rhs);\n    for i in 0..N {\n        let idx = __get_index(shuffle_indices, i as Field);\n        assert_eq(shuffle_indices[idx], i as Field);\n    }\n    for i in 0..N {\n        let idx = shuffle_indices[i];\n        let expected = rhs[idx];\n        let result = lhs[i];\n        assert_eq(expected, result);\n    }\n    shuffle_indices\n}\n\nmod test {\n    struct CompoundStruct {\n        a: bool,\n        b: Field,\n        c: u64\n    }\n    impl std::cmp::Eq for CompoundStruct {\n        fn eq(self, other: Self) -> bool {\n            (self.a == other.a) & (self.b == other.b) & (self.c == other.c)\n        }\n    }\n\n    use crate::check_shuffle;\n    #[test]\n    fn test_shuffle() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [2, 0, 3, 1, 4];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test]\n    fn test_shuffle_identity() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 4];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test(should_fail_with = \"check_shuffle, lhs and rhs arrays do not contain equivalent values\")]\n    fn test_shuffle_fail() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 5];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test(should_fail_with = \"check_shuffle, lhs and rhs arrays do not contain equivalent values\")]\n    fn test_shuffle_duplicates() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 3];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test]\n    fn test_shuffle_compound_struct() {\n        let lhs: [CompoundStruct; 5] = [\n            CompoundStruct { a: false, b: 0, c: 12345 },\n            CompoundStruct { a: false, b: -100, c: 54321 },\n            CompoundStruct { a: true, b: 5, c: 0xffffffffffffffff },\n            CompoundStruct { a: true, b: 9814, c: 0xeeffee0011001133 },\n            CompoundStruct { a: false, b: 0x155, c: 0 }\n        ];\n        let rhs: [CompoundStruct; 5] = [\n            CompoundStruct { a: false, b: 0x155, c: 0 },\n            CompoundStruct { a: false, b: 0, c: 12345 },\n            CompoundStruct { a: false, b: -100, c: 54321 },\n            CompoundStruct { a: true, b: 9814, c: 0xeeffee0011001133 },\n            CompoundStruct { a: true, b: 5, c: 0xffffffffffffffff }\n        ];\n        check_shuffle(lhs, rhs);\n    }\n}\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_check_shufflev0.1.0/src/lib.nr"}},"names":["main"],"brillig_names":["main"]}