{"transpiled":true,"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-aarch64","name":"LinkedinModule","functions":[{"name":"is_admin","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIRAAAJAAEAAMkAAQABB8AAAAABAAAAAMAAAhDIgAAAAgrAAADCEM5AAAACEMAAAABHgAAAAQeAAAABTAAAAAABAAAAAUAAAAGJAACAQUKAAIGBQQhAAAPAAQ6AQAAKgAABiQABAIFAAAEAAUAJAEEAQYAAAQGAgUqAAUEJAAHAAcqAgcEKgEGBQAABAUCBSoCBQYqAAAFAAAEAAIAKgIGBSQABAEHJAAEAAYkAAcBBCoABgMgACIKAAQDBgghAAAtAAggACUqAQUEAAAEBAIDAAAEAwYHKgEHBR4AAgAGCgAHBQYEKgAEAyMqAQUIHAAHAwkAAAcECQosAAAAAAoAAAAJJAAEAQsMAAQDCwwhAAA1AAw6AQAAKwAACAgDJQAEAAIIBCIAAABDKwAIBQAKAAAECgIMAAAEDAMLKgIJCwAABAMHCQ4ABAMJCCEAAEAACDoBAAAqAgoFKgAJAyAAIisBCAMIBgsABAgGAAIIByEAAEcIByAASSsACAMIBSAAVysAAAAIBQEABAAACAQAACUABAAACAkNAAQICQgECAoXAAgKCAohAABVCAoBAAQIAwgJCAsrAQgLCAgBAAQIBQgJCAsrAggICAsBAAQICQACCAkgAEwlAQQAAQgFIABXIysAGMoYyg==","debug_symbols":"1ZrdbsIwDIXfJddcxHb+zKtM01Q2mCpVZQI2aUK8+8rWpB1U6QVjim8QaY/sL6nTU1c9qpf16v31qW43271aPhxVs32uDvW27UbH00KtdnXT1K9P48NKn3/Ct3z/VrXn0f5Q7Q5qCR7NQq3bl/NfMl2ATd2s1dLr0+JKzOR7LVufpGBpQmsQuBcbxJDUjBNiF4B6sQvIY/HjQvHN4KAhifVIfHd00Lcvuo/xmecWHdBEMSBznjyAjRQBRqF7cvhD8m7Rf6OfE+C9E9C9E5h7J7CTCdDzcJH9XOX7EMVdiiGDdxNqyy6Gtsw6Xz/WE0SxJ7ysHyeY3QtmD4LZWS47asHsIJgdBbOTYHYjmF2wr6JgX0XBvoqCfZUK36s2JHZ72UFR4TXjTWIP+pL9/2smtXROa5tnB81uCD2ISbtveBYMb7Rk+OnHMdKpVySEPLyhgPEVBs0VsWOX2NlfbkAz+4BFGmdoME7XOLiabeFmnLs5mbLNOEAyhTCqmJ698Btr2iJT7IWbcaCBHfNi7rZqfL9n/NVEC++Ic+5nC++Is+yFd8RZ9sI74ix74R1xlt0IZi/chLPshXfEWXbB3Y0t3ISz7IJ91Qn2VSfYV51gX3WCfdWJ9dVTN/qodnW1atb95xmb9/Z59LXG4fPt50wn/gI=","brillig_names":["is_admin"],"assert_messages":{"52":"Array index out of bounds","14":"Not initialized","63":"attempt to add with overflow"}},{"name":"verify","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"header_array","type":{"kind":"array","length":768,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"header_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"pubkey_modulus","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"pubkey_redc","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"signature","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"from_header_sequence_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"from_header_sequence_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"from_address_sequence_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"from_address_sequence_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"to_header_sequence_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"to_header_sequence_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"to_address_sequence_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"to_address_sequence_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"email_array","type":{"kind":"array","length":320,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"","brillig_names":["get_public_storage_hints","get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","split_60_bits","__mul_impl","__compute_quadratic_expression_with_borrow_flags","pack_arguments_oracle_wrapper","call_private_function_internal","unpack_returns","pack_arguments_oracle_wrapper","directive_integer_quotient","directive_invert"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"12265343917440897559":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":6,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"],"assert_messages":{"512":"Function get_admin_public can only be called statically","3072":"attempt to add with overflow","3273":"attempt to add with overflow","3450":"attempt to add with overflow","2804":"Array index out of bounds","2194":"Array index out of bounds","2962":"Array index out of bounds","1579":"Array index out of bounds","2603":"attempt to add with overflow","1701":"Array index out of bounds","3170":"Array index out of bounds","457":"attempt to add with overflow","2182":"attempt to add with overflow","2371":"attempt to add with overflow","2134":"Array index out of bounds","2701":"Array index out of bounds","3029":"Array index out of bounds","1543":"Array index out of bounds","2689":"attempt to add with overflow","1964":"attempt to add with overflow","3244":"Array index out of bounds","3232":"attempt to add with overflow","471":"Not initialized","2007":"Array index out of bounds","2519":"Array index out of bounds","2574":"Array index out of bounds","203":"attempt to add with overflow","2641":"attempt to add with overflow","1861":"Array index out of bounds","2952":"attempt to add with overflow","3019":"attempt to add with overflow","2550":"Array index out of bounds","2739":"attempt to add with overflow","2995":"attempt to add with overflow","1837":"attempt to add with overflow","490":"Aztec Passport: Unauthorized Admin Change","3050":"attempt to add with overflow","3184":"attempt to add with overflow","1057":"attempt to add with overflow","2337":"Array index out of bounds","2849":"Array index out of bounds","2392":"Array index out of bounds","3428":"Array index out of bounds","1935":"Array index out of bounds","2825":"attempt to add with overflow","1923":"attempt to add with overflow","1722":"attempt to add with overflow","3124":"Array index out of bounds","1777":"Array index out of bounds","2155":"attempt to add with overflow","2923":"Array index out of bounds","3301":"Array index out of bounds","2210":"Array index out of bounds","2911":"attempt to add with overflow","1619":"Array index out of bounds","1808":"Array index out of bounds","1875":"attempt to add with overflow","3088":"Array index out of bounds","2052":"Array index out of bounds","1729":"attempt to add with overflow","2174":"Array index out of bounds","3454":"Array index out of bounds","1784":"Array index out of bounds","181":"attempt to add with overflow","2229":"Array index out of bounds","2863":"attempt to add with overflow","2028":"attempt to add with overflow","2540":"attempt to add with overflow","2796":"Array index out of bounds","547":"Not initialized","1571":"Array index out of bounds","1693":"Array index out of bounds","2717":"Array index out of bounds","2973":"attempt to add with overflow","2772":"Array index out of bounds","401":"Initializer address is not the contract deployer","1681":"attempt to add with overflow","2126":"Array index out of bounds","3040":"attempt to add with overflow","2437":"Array index out of bounds","1346":"attempt to add with overflow","2114":"attempt to add with overflow","3260":"Array index out of bounds","3461":"Array index out of bounds","3320":"Array index out of bounds","2413":"attempt to add with overflow","1633":"attempt to add with overflow","2590":"Array index out of bounds","987":"call to assert_max_bit_size","2066":"attempt to add with overflow","2511":"Array index out of bounds","1999":"Array index out of bounds","2499":"attempt to add with overflow","1987":"attempt to add with overflow","3011":"Array index out of bounds","2743":"Array index out of bounds","2609":"Array index out of bounds","3054":"Array index out of bounds","1951":"Array index out of bounds","604":"Not initialized","2329":"Array index out of bounds","1238":"attempt to add with overflow","147":"attempt to add with overflow","2384":"Array index out of bounds","2451":"attempt to add with overflow","3152":"Array index out of bounds","3420":"Array index out of bounds","769":"attempt to add with overflow","2561":"attempt to add with overflow","2750":"Array index out of bounds","1592":"attempt to add with overflow","2360":"Array index out of bounds","2939":"Array index out of bounds","3061":"Array index out of bounds","3116":"Array index out of bounds","1824":"Array index out of bounds","3293":"Array index out of bounds","2202":"Array index out of bounds","508":"Not initialized","185":"Array index out of bounds","2812":"Array index out of bounds","1843":"Array index out of bounds","1709":"Array index out of bounds","2142":"Array index out of bounds","1563":"Array index out of bounds","405":"Aztec Passport: Invalid Address","82":"attempt to add with overflow","783":"Not initialized","1740":"Array index out of bounds","1551":"attempt to add with overflow","1350":"attempt to add with overflow","1795":"attempt to add with overflow","192":"Array index out of bounds","2709":"Array index out of bounds","1338":"attempt to add with overflow","2831":"Array index out of bounds","3252":"Array index out of bounds","3441":"attempt to add with overflow","2350":"attempt to add with overflow","2984":"Array index out of bounds","1759":"attempt to add with overflow","2015":"Array index out of bounds","2527":"Array index out of bounds","2582":"Array index out of bounds","1747":"Array index out of bounds","2783":"attempt to add with overflow","3472":"attempt to add with overflow","3338":"Array index out of bounds","2247":"Array index out of bounds","1601":"Array index out of bounds","3137":"attempt to add with overflow","1979":"Array index out of bounds","1333":"attempt to multiply with overflow","2034":"Array index out of bounds","2223":"attempt to add with overflow","3314":"attempt to add with overflow","2400":"Array index out of bounds","1242":"attempt to add with overflow","1943":"Array index out of bounds","3412":"Array index out of bounds","2321":"Array index out of bounds","1230":"attempt to add with overflow","395":"Initialization hash does not match","3400":"attempt to add with overflow","2309":"attempt to add with overflow","2419":"Array index out of bounds","2931":"Array index out of bounds","2730":"attempt to add with overflow","3108":"Array index out of bounds","3096":"attempt to add with overflow","3352":"attempt to add with overflow","3285":"Array index out of bounds","1816":"Array index out of bounds","2261":"attempt to add with overflow","1225":"attempt to multiply with overflow","2761":"attempt to add with overflow","2627":"Array index out of bounds"}},{"name":"set_admin","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"new_admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAAQIRAAAJAAEAQQkAAQABR8AAAAABQAAAAQAAAhDKwAIQwADIgAAAAg5AAAACEQAAAAAHgAAAAUeAAAABjAAAAAABQAAAAYAAAAHJAACAQUKAAIHBQYhAAAPAAY6AQAAKgAABSQABAIHAAAEAAcAJAEEAQUAAAQFAgcqAAcGJAAHAAgqAggGKgEFBwAABAcCByoCBwUqAAAHAAAEAAIAKgIFByQABAAFJAAHAQgkAAQBBioABQQgACIKAAQEBQkhAABKAAkgACUqAQcJAAAECQIKAAAECgULKgELBx4AAgAJCgAHBwkKIQAALQAKOgEAACoABQQgAC8KAAQEBQchAAAzAAcgADIjHAAHBAcAAAcIBwkqAAAHJAAEAgoAAAQACgAkAQQBBwAABAcCCioACgsqAgMLJAAEAQsMAAQECwwhAABAAAw6AQAAAAAEBwIMAAAEDAQLKgELCi0AAAAACgAAAAkAAAQEBgkOAAQECQohAABIAAo6AQAAKgAJBCAALyoBBwkcAAcECgAABwgKCywAAAAACwAAAAokAAQBDAwABAQMDSEAAFIADToBAAArAAAJCAMlAAQAAggEIgAAAGArAAgFAAsAAAQLAg0AAAQNBAwqAgoMAAAEBAYJDgAEBAkKIQAAXQAKOgEAACoCCwcqAAkEIAAiKwEIAwgGCwAECAYAAggHIQAAZAgHIABmKwAIAwgFIAB0KwAAAAgFAQAEAAAIBAAAJQAEAAAICQ0ABAgJCAQIChcACAoICiEAAHIICgEABAgDCAkICysBCAsICAEABAgFCAkICysCCAgICwEABAgJAAIICSAAaSUBBAABCAUgAHQjKwAYyhjK","debug_symbols":"1ZvdbuIwEIXfJddceMZ/M7zKalVBC1UkFCqgK60Q775ON3HSNHVUdVnN3CACx+MvzsCJx861etptX58f6mZ/PFfrH9fqcHzcXOpjk46ut1W1PdWHQ/38MP64Mu0LvcnPL5umPTpfNqdLtYaIblXtmqf2rXUpwL4+7Kp1NLfVBzHb2GnZxywFb2e0DoE7sUOkrGacEQcC24kDIY/FP1cVfxscDGSxGYnvjg7m+4Me+/jMS4MO6HoxIHOZnMD3FASj0B05/EPyNOjv0dsO8N4d2Ht34O7dgZ/rgCPPJMQneR+pj586GOLHMKP2HPrIntmUs8dHC704WpxmT1BLHtWSk1py1kqORi05qCVHteRWLblTS67WQ1Gth6JaD0W1HmpF/0I9ZXI/nSNZ0dkSXSYnMyX/39mSJ2zBGF8mB8NhCD2IrQlv6KwW3Rm96POTamOGWSBCGd5Zwr44YZfSN3DI7GmAJunrFm6kEsy76WvbxH69ift6kzg/TGRym1FxY/4aY8BcCSFauMbBQl/ZCtYu1E1Cit2LAad1Ew+y2SNkdoIpO8pm96HAbmWzU64SAk+92zvF7F4xe1DMLvw/sshOitlZL3switmF+2qRXbivFtkV+2pQ7KtBsa8Gxb4ahPuqw4HdlsVp4jqs1xNNT1S4CX96oi27cBMusUfhJlxkF27CRXantUAaJS9hEOSiNOF0Uh5FL2HkUt0cueiidDawRI4LJpAKhj2zix9OU/R6R6n2HkXvGSiRk+g9A0Vy0XsGiuSi9wwUyUXvGSiSizbcIrnoPQNFctGGWyRXuwpMaj2U1Hooq/VQVuuhrNZDWamH3tLRr82p3mwPu+7xjv1r8zh62uPy++XvN0n8Bw==","brillig_names":["set_admin"],"assert_messages":{"81":"Array index out of bounds","63":"Array index out of bounds","92":"attempt to add with overflow","44":"Aztec Passport: Unauthorized Admin Change","71":"attempt to add with overflow","14":"Not initialized"}},{"name":"get_passport_address","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_passport_address"],"assert_messages":{"256":"Array index out of bounds","346":"Array index out of bounds","14":"Not initialized","203":"Array index out of bounds","232":"attempt to add with overflow","238":"Array index out of bounds","270":"attempt to add with overflow","211":"Array index out of bounds","179":"Array index out of bounds","330":"Array index out of bounds","359":"attempt to add with overflow","190":"attempt to add with overflow","219":"Array index out of bounds","318":"attempt to add with overflow","338":"Array index out of bounds"}},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"_admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"],"assert_messages":{"128":"attempt to add with overflow","448":"Array index out of bounds","698":"Array index out of bounds","110":"Array index out of bounds","366":"Array index out of bounds","616":"Array index out of bounds","430":"Array index out of bounds","415":"attempt to add with overflow","598":"Array index out of bounds","592":"attempt to add with overflow","394":"Array index out of bounds","522":"Array index out of bounds","510":"attempt to add with overflow","571":"Array index out of bounds","117":"Array index out of bounds","690":"Array index out of bounds","678":"attempt to add with overflow","538":"Array index out of bounds","340":"Initializer address is not the contract deployer","334":"Initialization hash does not match","462":"attempt to add with overflow","72":"attempt to add with overflow","386":"Array index out of bounds","706":"Array index out of bounds","374":"attempt to add with overflow","563":"Array index out of bounds","630":"attempt to add with overflow","106":"attempt to add with overflow","551":"attempt to add with overflow","344":"Aztec Passport: Invalid Address","402":"Array index out of bounds","530":"Array index out of bounds","719":"attempt to add with overflow","579":"Array index out of bounds"}},{"name":"set_passport_address","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"_passport_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["set_passport_address"],"assert_messages":{"1152":"Array index out of bounds","1609":"Array index out of bounds","890":"attempt to add with overflow","1335":"Array index out of bounds","1530":"Array index out of bounds","518":"attempt to add with overflow","1518":"attempt to add with overflow","1323":"attempt to add with overflow","1646":"Array index out of bounds","902":"Array index out of bounds","1628":"Array index out of bounds","1622":"attempt to add with overflow","1939":"attempt to add with overflow","842":"attempt to add with overflow","1799":"Array index out of bounds","1025":"Array index out of bounds","1470":"attempt to add with overflow","1275":"attempt to add with overflow","1208":"Array index out of bounds","1403":"Array index out of bounds","1720":"Array index out of bounds","1391":"attempt to add with overflow","1196":"attempt to add with overflow","1580":"attempt to add with overflow","1708":"attempt to add with overflow","1836":"Array index out of bounds","1818":"Array index out of bounds","788":"Array index out of bounds","337":"attempt to add with overflow","14":"Not initialized","910":"Array index out of bounds","1160":"Array index out of bounds","1812":"attempt to add with overflow","1538":"Array index out of bounds","1343":"Array index out of bounds","1660":"attempt to add with overflow","1593":"Array index out of bounds","630":"attempt to add with overflow","1910":"Array index out of bounds","752":"Array index out of bounds","618":"attempt to add with overflow","1770":"attempt to add with overflow","1898":"attempt to add with overflow","801":"attempt to add with overflow","1569":"Array index out of bounds","1173":"attempt to add with overflow","1033":"Array index out of bounds","1411":"Array index out of bounds","1216":"Array index out of bounds","1728":"Array index out of bounds","1850":"attempt to add with overflow","1783":"Array index out of bounds","1070":"Array index out of bounds","613":"attempt to multiply with overflow","1759":"Array index out of bounds","1052":"Array index out of bounds","918":"Array index out of bounds","1046":"attempt to add with overflow","522":"attempt to add with overflow","1351":"Array index out of bounds","772":"Array index out of bounds","1546":"Array index out of bounds","510":"attempt to add with overflow","1601":"Array index out of bounds","760":"attempt to add with overflow","949":"Array index out of bounds","626":"attempt to add with overflow","1144":"Array index out of bounds","1004":"attempt to add with overflow","1132":"attempt to add with overflow","1918":"Array index out of bounds","931":"attempt to add with overflow","986":"Array index out of bounds","1559":"attempt to add with overflow","1364":"attempt to add with overflow","267":"call to assert_max_bit_size","968":"attempt to add with overflow","1224":"Array index out of bounds","1419":"Array index out of bounds","1791":"Array index out of bounds","1736":"Array index out of bounds","828":"Array index out of bounds","505":"attempt to multiply with overflow","956":"Array index out of bounds","1017":"Array index out of bounds","1084":"attempt to add with overflow","1261":"Array index out of bounds","810":"Array index out of bounds","938":"attempt to add with overflow","1188":"Array index out of bounds","993":"Array index out of bounds","1383":"Array index out of bounds","1243":"Array index out of bounds","1749":"attempt to add with overflow","1432":"attempt to add with overflow","1237":"attempt to add with overflow","1438":"Array index out of bounds","1456":"Array index out of bounds","1926":"Array index out of bounds","780":"Array index out of bounds"}},{"name":"get_admin_public","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIRAAAJAAEAAMkAAQABB8AAAAABAAAAAMAAAhDIgAAAAgrAAADCEM5AAAACEMAAAABHgAAAAQeAAAABTAAAAAABAAAAAUAAAAGJAACAQUKAAIGBQQhAAAPAAQ6AQAAHgALAAYkAAcBBQoABwYFBCEAABQABDoBAAAqAAAGJAAEAgQAAAQABAAkAQQBBgAABAYCBCoABAckAAcACCoCCAcqAQYEAAAEBAIEKgIEBioAAAQAAAQAAgAqAgYEJAAEAQgkAAQABioABgMgACYKAAQDBgchAAAvAAcgACkqAQQFAAAEBQIDAAAEAwYHKgEHBCoABAMjKgEEBxwABwMJAAAHBQkKLAAAAAAKAAAACSQABAELDAAEAwsMIQAANwAMOgEAACsAAAcIAyUABAACCAQiAAAARSsACAUACgAABAoCDAAABAwDCyoCCQsAAAQDCAkOAAQDCQchAABCAAc6AQAAKgIKBCoACQMgACYrAQgDCAYLAAQIBgACCAchAABJCAcgAEsrAAgDCAUgAFkrAAAACAUBAAQAAAgEAAAlAAQAAAgJDQAECAkIBAgKFwAICggKIQAAVwgKAQAECAMICQgLKwEICwgIAQAECAUICQgLKwIICAgLAQAECAkAAggJIABOJQEEAAEIBSAAWSMrABjKGMo=","debug_symbols":"1ZrbbsIwDIbfJddcxHEONq8yTVPZYKpUlQnYpAnx7mu3NnSlCgLGFN8gAn/irzn4d6vu1cty8f76VNar9VbNH/aqWj8Xu3JdN639YaYWm7Kqyten4c9Ktx/0Ld++FXXb2u6KzU7NIRg7U8v6pf2KthlgVVZLNQ/6MDsRM4ZOyy5EKTic0FoD3ImtMRTVbCbEngA7sSfDQ/HjTPHN4KAhivVAfHd00LdPeujHZz436WBsLwbDnCYncD0FwWDojhz+kLyZ9N/obQBz7wB47wD23gHczQGc4z6C8/rMjghkXCcOZGm8I/yFNG2fcEUfuqIPX97HTJ9NYB2PkKZzeSVQL24W8Lh+wU+tBfs+rzhmnV4LFxB6cUAzWgsDgtmNYHYUzG4FszvB7F4wexDMToLZWS47CvZVFOyrKNhXUbCvYuZ5xlFkd+P7U5v5fg82spMes///fo83zF5rl2YHzf449FGM2n/Do2R4Kxk+85ImeVzzTjUEMU2SgTF75iVN3DQT7C7zkobwyG7SYrbYc7ANJxcq2A9c5vVPkj3z+ifJbgWzZ/5cIcme+XOFJHvmJpxkz7zeT7JnbsIpdp+5CSfZBfuqF+yrXrCvesG+6gX7qhfrq4em9VFsymJRLbvXQVbv9fPg7ZDd59vPP434Cw==","brillig_names":["get_admin_public"],"assert_messages":{"14":"Not initialized","65":"attempt to add with overflow","54":"Array index out of bounds","19":"Function get_admin_public can only be called statically"}}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"},{"fields":[{"name":"value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"},{"fields":[{"name":"value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"AztecPassport"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"total_services","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"services","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"service_indexes","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"scores","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"LinkedinModule"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"passport_address","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"header_array","type":{"kind":"array","length":768,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"header_length","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"pubkey_modulus","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"pubkey_redc","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"signature","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"from_header_sequence_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"from_header_sequence_length","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"from_address_sequence_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"from_address_sequence_length","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"to_header_sequence_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"to_header_sequence_length","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"to_address_sequence_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"to_address_sequence_length","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"email_array","type":{"kind":"array","length":320,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"LinkedinModule::verify_parameters"}}],"kind":"struct","path":"LinkedinModule::verify_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"new_admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"LinkedinModule::set_admin_parameters"}}],"kind":"struct","path":"LinkedinModule::set_admin_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"LinkedinModule::get_admin_public_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"LinkedinModule::get_admin_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"LinkedinModule::is_admin_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"LinkedinModule::is_admin_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"LinkedinModule::get_passport_address_parameters"}},{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"LinkedinModule::get_passport_address_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"_admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"LinkedinModule::constructor_parameters"}}],"kind":"struct","path":"LinkedinModule::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"_passport_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"LinkedinModule::set_passport_address_parameters"}}],"kind":"struct","path":"LinkedinModule::set_passport_address_abi"}]}},"file_map":{"114":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"115":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"118":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_returns_oracle_wrapper(returns)\n    };\n}\n\nunconstrained pub fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"121":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_oracle_wrapper(args)\n    };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_array_oracle_wrapper(args)\n    };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"},"122":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(address: Field, storage_slot: Field, block_number: Field, length: Field) -> [Field; N] {}\n\nunconstrained pub fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field\n    )\n}\n\nunconstrained pub fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> T where T: Deserialize<N> {\n    T::deserialize(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::address::AztecAddress;\n\n    use std::test::OracleMock;\n    use crate::test::mocks::mock_struct::MockStruct;\n\n    global address = AztecAddress::from_field(29);\n    global slot = 7;\n    global block_number = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"},"126":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"127":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"148":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"153":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"154":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"159":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n"},"169":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_value_change.nr","source":"use dep::protocol_types::traits::{Serialize, Deserialize, FromField, ToField};\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to represent a value that changes from `pre` to `post` at some block\n// called the `block_of_change`. The value can only be made to change by scheduling a change event at some future block\n// of change after some minimum delay measured in blocks has elapsed. This means that at any given block number we know\n// both the current value and the smallest block number at which the value might change - this is called the\n// 'block horizon'.\npub struct ScheduledValueChange<T> {\n    pre: T,\n    post: T,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n}\n\nimpl<T> ScheduledValueChange<T> {\n    pub fn new(pre: T, post: T, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the value stored in the data structure at a given block. This function can be called both in public\n    /// (where `block_number` is simply the current block number, i.e. the number of the block in which the current\n    /// transaction will be included) and in private (where `block_number` is the historical block number that is used\n    /// to construct the proof).\n    /// Reading in private is only safe if the transaction's `max_block_number` property is set to a value lower or\n    /// equal to the block horizon (see `get_block_horizon()`).\n    pub fn get_current_at(self, block_number: u32) -> T {\n        // The post value becomes the current one at the block of change. This means different things in each realm:\n        // - in public, any transaction that is included in the block of change will use the post value\n        // - in private, any transaction that includes the block of change as part of the historical state will use the\n        //   post value (barring any follow-up changes)\n\n        if block_number < self.block_of_change {\n            self.pre\n        } else {\n            self.post\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change value and the block at which it will become the current\n    /// value. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (T, u32) {\n        (self.post, self.block_of_change)\n    }\n\n    /// Returns the largest block number at which the value returned by `get_current_at` is known to remain the current\n    /// value. This value is only meaningful in private when constructing a proof at some `historical_block_number`,\n    /// since due to its asynchronous nature private execution cannot know about any later scheduled changes.\n    /// The caller of this function must know how quickly the value can change due to a scheduled change in the form of\n    /// `minimum_delay`. If the delay itself is immutable, then this is just its duration. If the delay is mutable\n    /// however, then this value is the 'effective minimum delay' (obtained by calling\n    /// `ScheduledDelayChange.get_effective_minimum_delay_at`), which equals the minimum number of blocks that need to\n    /// elapse from the next block until the value changes, regardless of further delay changes.\n    /// The value returned by `get_current_at` in private when called with a historical block number is only safe to use\n    /// if the transaction's `max_block_number` property is set to a value lower or equal to the block horizon computed\n    /// using the same historical block number.\n    pub fn get_block_horizon(self, historical_block_number: u32, minimum_delay: u32) -> u32 {\n        // The block horizon is the very last block in which the current value is known. Any block past the horizon\n        // (i.e. with a block number larger than the block horizon) may have a different current value. Reading the\n        // current value in private typically requires constraining the maximum valid block number to be equal to the\n        // block horizon.\n\n        if historical_block_number >= self.block_of_change {\n            // Once the block of change has been mined, the current value (post) will not change unless a new value\n            // change is scheduled. This did not happen at the historical block number (or else it would not be\n            // greater or equal to the block of change), and therefore could only happen after the historical block\n            // number. The earliest would be the immediate next block, and so the smallest possible next block of change\n            // equals `historical_block_number + 1 + minimum_delay`. Our block horizon is simply the previous block to\n            // that one.\n            //\n            //      block of      historical\n            //       change         block            block horizon\n            //   =======|=============N===================H===========>\n            //                         ^                   ^\n            //                         ---------------------\n            //                             minimum delay\n\n            historical_block_number + minimum_delay\n        } else {\n            // If the block of change has not yet been mined however, then there are two possible scenarios.\n            //   a) It could be so far into the future that the block horizon is actually determined by the minimum\n            //      delay, because a new change could be scheduled and take place _before_ the currently scheduled one.\n            //      This is similar to the scenario where the block of change is in the past: the time horizon is the\n            //      block prior to the earliest one in which a new block of change might land.\n            //\n            //         historical\n            //           block                        block horizon      block of change\n            //        =====N=================================H=================|=========>\n            //              ^                                 ^\n            //              |                                 |\n            //              -----------------------------------\n            //                        minimum delay\n            //\n            //   b) It could be fewer than `minimum_delay` blocks away from the historical block number, in which case\n            //      the block of change would become the limiting factor for the time horizon, which would equal the\n            //      block right before the block of change (since by definition the value changes at the block of\n            //      change).\n            //\n            //           historical                         block horizon\n            //             block     block of change       if not scheduled\n            //        =======N=============|===================H=================>\n            //                ^           ^                     ^\n            //                |     actual horizon              |\n            //                -----------------------------------\n            //                          minimum delay\n            //\n            // Note that the current implementation does not allow the caller to set the block of change to an arbitrary\n            // value, and therefore scenario a) is not currently possible. However implementing #5501 would allow for\n            // this to happen.\n\n            // Because historical_block_number < self.block_of_change, then block_of_change > 0 and we can safely\n            // subtract 1.\n            min(\n                self.block_of_change - 1,\n                historical_block_number + minimum_delay\n            )\n        }\n    }\n\n    /// Mutates the value by scheduling a change at the current block number. This function is only meaningful when\n    /// called in public with the current block number.\n    pub fn schedule_change(\n        &mut self,\n        new_value: T,\n        current_block_number: u32,\n        minimum_delay: u32,\n        block_of_change: u32\n    ) {\n        assert(block_of_change >= current_block_number + minimum_delay);\n\n        self.pre = self.get_current_at(current_block_number);\n        self.post = new_value;\n        self.block_of_change = block_of_change;\n    }\n}\n\nimpl<T> Serialize<3> for ScheduledValueChange<T> where T: ToField {\n    fn serialize(self) -> [Field; 3] {\n        [self.pre.to_field(), self.post.to_field(), self.block_of_change.to_field()]\n    }\n}\n\nimpl<T> Deserialize<3> for ScheduledValueChange<T> where T: FromField {\n    fn deserialize(input: [Field; 3]) -> Self {\n        Self {\n            pre: FromField::from_field(input[0]),\n            post: FromField::from_field(input[1]),\n            block_of_change: FromField::from_field(input[2])\n        }\n    }\n}\n\nimpl<T> Eq for ScheduledValueChange<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.block_of_change == other.block_of_change)\n    }\n}\n"},"170":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_delay_change.nr","source":"use dep::protocol_types::traits::{Serialize, Deserialize};\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to store the minimum delay with which a ScheduledValueChange object can\n// schedule a change.\n// This delay is initally equal to INITIAL_DELAY, and can be safely mutated to any other value over time. This mutation\n// is performed via `schedule_change` in order to satisfy ScheduleValueChange constraints: if e.g. we allowed for the\n// delay to be decreased immediately then it'd be possible for the state variable to schedule a value change with a\n// reduced delay, invalidating prior private reads.\npub struct ScheduledDelayChange<let INITIAL_DELAY: u32> {\n    // Both pre and post are stored in public storage, so by default they are zeroed. By wrapping them in an Option,\n    // they default to Option::none(), which we detect and replace with INITIAL_DELAY. The end result is that a\n    // ScheduledDelayChange that has not been initialized has a delay equal to INITIAL_DELAY, which is the desired\n    // effect. Once initialized, the Option will never be none again.\n    pre: Option<u32>,\n    post: Option<u32>,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n}\n\nimpl<let INITIAL_DELAY: u32> ScheduledDelayChange<INITIAL_DELAY> {\n    pub fn new(pre: Option<u32>, post: Option<u32>, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the current value of the delay stored in the data structure.\n    /// This function only returns a meaningful value when called in public with the current block number - for\n    /// historical private reads use `get_effective_minimum_delay_at` instead.\n    pub fn get_current(self, current_block_number: u32) -> u32 {\n        // The post value becomes the current one at the block of change, so any transaction that is included in the\n        // block of change will use the post value.\n\n        if current_block_number < self.block_of_change {\n            self.pre.unwrap_or(INITIAL_DELAY)\n        } else {\n            self.post.unwrap_or(INITIAL_DELAY)\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change delay and the block at which it will become the current\n    /// delay. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (u32, u32) {\n        (self.post.unwrap_or(INITIAL_DELAY), self.block_of_change)\n    }\n\n    /// Mutates the delay change by scheduling a change at the current block number. This function is only meaningful\n    /// when called in public with the current block number.\n    /// The block at which the new delay will become effective is determined automatically:\n    ///  - when increasing the delay, the change is effective immediately\n    ///  - when reducing the delay, the change will take effect after a delay equal to the difference between old and\n    ///    new delay. For example, if reducing from 3 days to 1 day, the reduction will be scheduled to happen after 2\n    ///    days.\n    pub fn schedule_change(&mut self, new: u32, current_block_number: u32) {\n        let current = self.get_current(current_block_number);\n\n        // When changing the delay value we must ensure that it is not possible to produce a value change with a delay\n        // shorter than the current one.\n        let blocks_until_change = if new > current {\n            // Increasing the delay value can therefore be done immediately: this does not invalidate prior contraints\n            // about how quickly a value might be changed (indeed it strengthens them).\n            0\n        } else {\n            // Decreasing the delay requires waiting for the difference between current and new delay in order to ensure\n            // that overall the current delay is respected.\n            //\n            //      current                    delay              earliest value block of change\n            //       block                 block of change         if delay remained unchanged\n            //  =======N=========================|================================X=================>\n            //         ^                         ^                                ^\n            //         |-------------------------|--------------------------------|\n            //         |   blocks until change               new delay            |\n            //         ------------------------------------------------------------\n            //                            current delay\n            current - new\n        };\n\n        self.pre = Option::some(current);\n        self.post = Option::some(new);\n        self.block_of_change = current_block_number + blocks_until_change;\n    }\n\n    /// Returns the minimum delay before a value might mutate due to a scheduled change, from the perspective of some\n    /// historical block number. It only returns a meaningful value when called in private with historical blocks. This\n    /// function can be used alongside `ScheduledValueChange.get_block_horizon` to properly constrain the\n    /// `max_block_number` transaction property when reading mutable shared state.\n    /// This value typically equals the current delay at the block following the historical one (the earliest one in\n    /// which a value change could be scheduled), but it also considers scenarios in which a delay reduction is\n    /// scheduled to happen in the near future, resulting in a way to schedule a change with an overall delay lower than\n    /// the current one.\n    pub fn get_effective_minimum_delay_at(self, historical_block_number: u32) -> u32 {\n        if self.block_of_change <= historical_block_number {\n            // If no delay changes were scheduled, then the delay value at the historical block (post) is guaranteed to\n            // hold due to how further delay changes would be scheduled by `schedule_change`.\n            self.post.unwrap_or(INITIAL_DELAY)\n        } else {\n            // If a change is scheduled, then the effective delay might be lower than the current one (pre). At the\n            // block of change the current delay will be the scheduled one, with an overall delay from the historical\n            // block number equal to the number of blocks until the change plus the new delay. If this value is lower\n            // than the current delay, then that is the effective minimum delay.\n            //\n            //       historical\n            //         block                  delay                  actual earliest value\n            //           v                block of change              block of change\n            //  =========NS=====================|=============================X===========Y=====>\n            //            ^                     ^                             ^           ^\n            //     earliest block in            |                             |           |\n            //   which to schedule change       |                             |           |\n            //           |                      |                             |           |\n            //           |----------------------|------------------------------           |\n            //           |         blocks                  new delay                      |\n            //           |      until change                                              |\n            //           |                                                                |\n            //           |----------------------------------------------------------------|\n            //                        current delay at the earliest block in\n            //                             which to scheduled value change\n\n            let blocks_until_change = self.block_of_change - (historical_block_number + 1);\n\n            min(\n                self.pre.unwrap_or(INITIAL_DELAY),\n                blocks_until_change + self.post.unwrap_or(INITIAL_DELAY)\n            )\n        }\n    }\n}\n\nimpl<let INITIAL_DELAY: u32> Serialize<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn serialize(self) -> [Field; 1] {\n        // We pack all three u32 values into a single U128, which is made up of two u64 limbs.\n        // Low limb: [ pre_inner: u32 | post_inner: u32 ]\n        // High limb: [ empty | pre_is_some: u8 |  post_is_some: u8 | block_of_change: u32 ]\n\n        let lo = ((self.pre.unwrap_unchecked() as u64) * (1 << 32)) + (self.post.unwrap_unchecked() as u64);\n\n        let hi = (self.pre.is_some() as u64) * (1 << 33)\n            + (self.post.is_some() as u64 * (1 << 32))\n            + self.block_of_change as u64;\n\n        let packed = U128::from_u64s_le(lo, hi);\n\n        [packed.to_integer()]\n    }\n}\n\nimpl<let INITIAL_DELAY: u32> Deserialize<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn deserialize(input: [Field; 1]) -> Self {\n        let packed = U128::from_integer(input[0]);\n\n        // We use division and modulo to clear the bits that correspond to other values when unpacking.\n\n        let pre_is_some = ((packed.hi as u64) / (1 << 33)) as bool;\n        let pre_inner = ((packed.lo as u64) / (1 << 32)) as u32;\n\n        let post_is_some = (((packed.hi as u64) / (1 << 32)) % (1 << 1)) as bool;\n        let post_inner = ((packed.lo as u64) % (1 << 32)) as u32;\n\n        let block_of_change = ((packed.hi as u64) % (1 << 32)) as u32;\n\n        Self {\n            pre: if pre_is_some {\n                Option::some(pre_inner)\n            } else {\n                Option::none()\n            },\n            post: if post_is_some {\n                Option::some(post_inner)\n            } else {\n                Option::none()\n            },\n            block_of_change\n        }\n    }\n}\n\nimpl<let INITIAL_DELAY: u32> Eq for ScheduledDelayChange<INITIAL_DELAY> {\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.block_of_change == other.block_of_change)\n    }\n}\n"},"174":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/shared_mutable.nr","source":"use dep::protocol_types::{\n    hash::{poseidon2_hash, poseidon2_hash_with_separator}, address::AztecAddress,\n    traits::{FromField, ToField}, utils::arrays::array_concat\n};\n\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::state_vars::{\n    storage::Storage,\n    shared_mutable::{scheduled_value_change::ScheduledValueChange, scheduled_delay_change::ScheduledDelayChange}\n};\nuse crate::oracle::storage::storage_read;\nuse dep::std::mem::zeroed;\n\nmod test;\n\npub struct SharedMutable<T, let INITIAL_DELAY: u32, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n\n// Separators separating storage slot of different values within the same state variable\nglobal VALUE_CHANGE_SEPARATOR: u32 = 0;\nglobal DELAY_CHANGE_SEPARATOR: u32 = 1;\nglobal HASH_SEPARATOR: u32 = 2;\n\n// This will make the Aztec macros require that T implements the Serialize<N> trait, and allocate N storage slots to\n// this state variable. This is incorrect, since what we actually store is:\n//  - a ScheduledValueChange<T>, which requires 1 + 2 * M storage slots, where M is the serialization length of T\n//  - a ScheduledDelayChange, which requires another storage slot\n//\n// TODO https://github.com/AztecProtocol/aztec-packages/issues/5736: change the storage allocation scheme so that we\n// can actually use it here\nimpl<T, let INITIAL_DELAY: u32, Context> Storage<T> for SharedMutable<T, INITIAL_DELAY, Context> {}\n\n// SharedMutable<T> stores a value of type T that is:\n//  - publicly known (i.e. unencrypted)\n//  - mutable in public\n//  - readable in private with no contention (i.e. multiple parties can all read the same value without blocking one\n//    another nor needing to coordinate)\n// This is famously a hard problem to solve. SharedMutable makes it work by introducing a delay to public mutation:\n// the value is not changed immediately but rather a value change is scheduled to happen in the future after some delay\n// measured in blocks. Reads in private are only valid as long as they are included in a block not too far into the\n// future, so that they can guarantee the value will not have possibly changed by then (because of the delay).\n// The delay for changing a value is initially equal to INITIAL_DELAY, but can be changed by calling\n// `schedule_delay_change`.\nimpl<T, let INITIAL_DELAY: u32, Context> SharedMutable<T, INITIAL_DELAY, Context> where T: ToField + FromField + Eq {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    // Since we can't rely on the native storage allocation scheme, we hash the storage slot to get a unique location in\n    // which we can safely store as much data as we need.\n    // See https://github.com/AztecProtocol/aztec-packages/issues/5492 and\n    // https://github.com/AztecProtocol/aztec-packages/issues/5736\n    // We store three things in public storage:\n    //  - a ScheduledValueChange\n    //  - a ScheduledDelaChange\n    //  - the hash of both of these (via `hash_scheduled_data`)\n    fn get_value_change_storage_slot(self) -> Field {\n        poseidon2_hash_with_separator([self.storage_slot], VALUE_CHANGE_SEPARATOR)\n    }\n\n    fn get_delay_change_storage_slot(self) -> Field {\n        poseidon2_hash_with_separator([self.storage_slot], DELAY_CHANGE_SEPARATOR)\n    }\n\n    fn get_hash_storage_slot(self) -> Field {\n        poseidon2_hash_with_separator([self.storage_slot], HASH_SEPARATOR)\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, &mut PublicContext> where T: ToField + FromField + Eq {\n\n    pub fn schedule_value_change(self, new_value: T) {\n        let mut value_change = self.read_value_change();\n        let delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n        let current_delay = delay_change.get_current(block_number);\n\n        // TODO: make this configurable\n        // https://github.com/AztecProtocol/aztec-packages/issues/5501\n        let block_of_change = block_number + current_delay;\n        value_change.schedule_change(new_value, block_number, current_delay, block_of_change);\n\n        self.write(value_change, delay_change);\n    }\n\n    pub fn schedule_delay_change(self, new_delay: u32) {\n        let mut delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n\n        delay_change.schedule_change(new_delay, block_number);\n\n        self.write(self.read_value_change(), delay_change);\n    }\n\n    pub fn get_current_value_in_public(self) -> T {\n        let block_number = self.context.block_number() as u32;\n        self.read_value_change().get_current_at(block_number)\n    }\n\n    pub fn get_current_delay_in_public(self) -> u32 {\n        let block_number = self.context.block_number() as u32;\n        self.read_delay_change().get_current(block_number)\n    }\n\n    pub fn get_scheduled_value_in_public(self) -> (T, u32) {\n        self.read_value_change().get_scheduled()\n    }\n\n    pub fn get_scheduled_delay_in_public(self) -> (u32, u32) {\n        self.read_delay_change().get_scheduled()\n    }\n\n    fn read_value_change(self) -> ScheduledValueChange<T> {\n        self.context.storage_read(self.get_value_change_storage_slot())\n    }\n\n    fn read_delay_change(self) -> ScheduledDelayChange<INITIAL_DELAY> {\n        self.context.storage_read(self.get_delay_change_storage_slot())\n    }\n\n    fn write(\n        self,\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>\n    ) {\n        // Whenever we write to public storage, we write both the value change and delay change as well as the hash of\n        // them both. This guarantees that the hash is always kept up to date.\n        // While this makes for more costly writes, it also makes private proofs much simpler because they only need to\n        // produce a historical proof for the hash, which results in a single inclusion proof (as opposed to 4 in the\n        // best case scenario in which T is a single field). Private shared mutable reads are assumed to be much more\n        // frequent than public writes, so this tradeoff makes sense.\n        self.context.storage_write(self.get_value_change_storage_slot(), value_change);\n        self.context.storage_write(self.get_delay_change_storage_slot(), delay_change);\n        self.context.storage_write(\n            self.get_hash_storage_slot(),\n            SharedMutable::hash_scheduled_data(value_change, delay_change)\n        );\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, &mut PrivateContext> where T: ToField + FromField + Eq {\n    pub fn get_current_value_in_private(self) -> T {\n        // When reading the current value in private we construct a historical state proof for the public value.\n        // However, since this value might change, we must constrain the maximum transaction block number as this proof\n        // will only be valid for however many blocks we can ensure the value will not change, which will depend on the\n        // current delay and any scheduled delay changes.\n\n        let (value_change, delay_change, historical_block_number) = self.historical_read_from_public_storage();\n\n        // We use the effective minimum delay as opposed to the current delay at the historical block as this one also\n        // takes into consideration any scheduled delay changes.\n        // For example, consider a scenario in which at block 200 the current delay was 50. We may naively think that\n        // the earliest we could change the value would be at block 251 by scheduling immediately after the historical\n        // block, i.e. at block 201. But if there was a delay change scheduled for block 210 to reduce the delay to 20\n        // blocks, then if a value change was scheduled at block 210 it would go into effect at block 230, which is\n        // earlier than what we'd expect if we only considered the current delay.\n        let effective_minimum_delay = delay_change.get_effective_minimum_delay_at(historical_block_number);\n        let block_horizon = value_change.get_block_horizon(historical_block_number, effective_minimum_delay);\n\n        // We prevent this transaction from being included in any block after the block horizon, ensuring that the\n        // historical public value matches the current one, since it can only change after the horizon.\n        self.context.set_tx_max_block_number(block_horizon);\n        value_change.get_current_at(historical_block_number)\n    }\n\n    fn historical_read_from_public_storage(self) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>, u32) {\n        let header = self.context.get_header();\n        let address = self.context.this_address();\n\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for both the ScheduledValueChange and\n        // ScheduledDelayChange, but that'd require one full sibling path per storage slot (since due to kernel siloing\n        // the storage is not contiguous), and in the best case in which T is a single field that'd be 4 slots.\n        // Instead, we get an oracle to provide us the correct values for both the value and delay changes, and instead\n        // prove inclusion of their hash, which is both a much smaller proof (a single slot), and also independent of\n        // the size of T.\n        let (value_change_hint, delay_change_hint) = unsafe {\n            get_public_storage_hints(address, self.storage_slot, historical_block_number)\n        };\n\n        // Ideally the following would be simply public_storage::read_historical, but we can't implement that yet.\n        let hash = header.public_storage_historical_read(self.get_hash_storage_slot(), address);\n\n        if hash != 0 {\n            assert_eq(\n                hash, SharedMutable::hash_scheduled_data(value_change_hint, delay_change_hint), \"Hint values do not match hash\"\n            );\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized, meaning no value or delay change was ever\n            // scheduled. Therefore, the hints must then correspond to uninitialized scheduled changes.\n            assert_eq(\n                value_change_hint, ScheduledValueChange::deserialize(zeroed()), \"Non-zero value change for zero hash\"\n            );\n            assert_eq(\n                delay_change_hint, ScheduledDelayChange::deserialize(zeroed()), \"Non-zero delay change for zero hash\"\n            );\n        };\n\n        (value_change_hint, delay_change_hint, historical_block_number)\n    }\n\n    fn hash_scheduled_data(\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>\n    ) -> Field {\n        let concatenated: [Field; 4] = array_concat(value_change.serialize(), delay_change.serialize());\n        poseidon2_hash(concatenated)\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u32> SharedMutable<T, INITIAL_DELAY, UnconstrainedContext> where T: ToField + FromField + Eq {\n    unconstrained pub fn get_current_value_in_unconstrained(self) -> T {\n        let block_number = self.context.block_number() as u32;\n        self.read_value_change().get_current_at(block_number)\n    }\n\n    unconstrained fn read_value_change(self) -> ScheduledValueChange<T> {\n        self.context.storage_read(self.get_value_change_storage_slot())\n    }\n}\n\nunconstrained fn get_public_storage_hints<T, let INITIAL_DELAY: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>) where T: ToField + FromField + Eq {\n    // This function cannot be part of the &mut PrivateContext impl because that'd mean that by passing `self` we'd also\n    // be passing a mutable reference to an unconstrained function, which is not allowed. We therefore create a dummy\n    // state variable here so that we can access the methods to compute storage slots. This will all be removed in the\n    // future once we do proper storage slot allocation (#5492).\n    let dummy: SharedMutable<T, INITIAL_DELAY, ()> = SharedMutable::new((), storage_slot);\n\n    (\n        storage_read(address, dummy.get_value_change_storage_slot(), block_number), storage_read(address, dummy.get_delay_change_storage_slot(), block_number)\n    )\n}\n"},"176":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, UnconstrainedContext> where T: Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"221":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n"},"230":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"263":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"276":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"277":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr","source":"mod assert_array_appended;\nmod assert_array_prepended;\nmod assert_combined_array;\nmod assert_combined_sorted_transformed_value_array;\nmod assert_combined_transformed_array;\nmod assert_deduped_array;\nmod assert_exposed_sorted_transformed_value_array;\nmod assert_sorted_array;\nmod assert_sorted_transformed_value_array;\nmod assert_split_sorted_transformed_value_arrays;\nmod assert_split_transformed_value_arrays;\nmod get_sorted_result;\nmod get_sorted_tuple;\nmod sort_by;\nmod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{assert_array_appended, assert_array_appended_reversed, assert_array_appended_scoped};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_sorted_transformed_value_array::{\n    assert_combined_sorted_transformed_value_array_asc,\n    get_combined_order_hints::{CombinedOrderHint, get_combined_order_hints_asc}\n};\npub use assert_combined_transformed_array::{assert_combined_transformed_array, combine_and_transform_arrays};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint}\n};\npub use assert_deduped_array::{assert_deduped_array, dedupe_array};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc, assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints}\n};\npub use assert_sorted_transformed_value_array::{assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N> where T: Empty + Eq {\n    let mut len = 0;\n    for elem in array {\n        if !is_empty(elem) {\n            len += 1;\n        }\n    }\n\n    BoundedVec { storage: array, len }\n}\n\nunconstrained pub fn find_index_hint<T, let N: u32, Env>(array: [T; N], find: fn[Env](T) -> bool) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32 where T: Empty + Eq {\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32 where T: Empty + Eq {\n    let length = unsafe {\n        find_index_hint(array, |elem: T| is_empty(elem))\n    };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N] where T: Empty + Eq {\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N]\n) where T: Eq + Empty {\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nfn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = unsafe {\n        find_index_hint(values, |v: Field| min.lt(v))\n    };\n    assert_eq(index, 2);\n}\n\n#[test]\nfn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = unsafe {\n        find_index_hint(values, |v: Field| min.lt(v))\n    };\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concated = array_concat(array0, array1);\n    assert_eq(concated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    pedersen_hash_with_separator_noir(input, separator)\n}\n\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator_noir(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n"},"296":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"298":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"301":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl <let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"},"302":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Serialize<N * M> for [T; N] where T: Serialize<M> {\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Deserialize<N * M> for [T; N] where T: Deserialize<M> {\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n"},"305":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"306":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"314":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"318":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"331":{"path":"/Users/envoy1084/nargo/github.com/Envoy-VC/noir_social_verifyv0.0.1/lib/src/linkedin.nr","source":"use dep::zkemail::{KEY_LIMBS_2048, dkim::RSAPubkey, Sequence, headers::email_address::get_email_address};\n\npub global MAX_EMAIL_HEADER_LENGTH: u32 = 768;\npub global FROM_EMAIL_LENGTH: u32 = 29;\npub global FROM_EMAIL: [u8; FROM_EMAIL_LENGTH] = \"security-noreply@linkedin.com\".as_bytes();\n\npub fn verify_linkedin(\n    header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH>,\n    pubkey: RSAPubkey<KEY_LIMBS_2048>,\n    signature: [Field; KEY_LIMBS_2048],\n    from_header_sequence: Sequence,\n    from_address_sequence: Sequence,\n    to_header_sequence: Sequence,\n    to_address_sequence: Sequence\n) -> BoundedVec<u8, 320> {\n    assert(header.len() <= MAX_EMAIL_HEADER_LENGTH);\n\n    pubkey.verify_dkim_signature(header, signature);\n\n    let from = comptime {\n        \"from\".as_bytes()\n    };\n\n    let to = comptime {\n        \"to\".as_bytes()\n    };\n\n    let from_address: BoundedVec<u8, 320> = get_email_address(header, from_header_sequence, from_address_sequence, from);\n\n    assert(from_address.is_eq(FROM_EMAIL));\n\n    let to_address: BoundedVec<u8, 320> = get_email_address(header, to_header_sequence, to_address_sequence, to);\n\n    to_address\n}\n"},"336":{"path":"/Users/envoy1084/nargo/github.com/zkemail/zkemail.nrv0.3.2/lib/src/lib.nr","source":"use dep::std::{hash::pedersen_hash, collections::bounded_vec::BoundedVec};\nuse crate::dkim::RSAPubkey;\n\npub mod dkim;\npub mod headers;\npub mod partial_hash;\npub mod masking;\n// mod macro;\nmod tests;\n\nglobal RSA_EXPONENT: u32 = 65537;\nglobal KEY_BYTES_1024: u32 = 128;\nglobal KEY_BYTES_2048: u32 = 256;\nglobal KEY_LIMBS_1024: u32 = 9;\nglobal KEY_LIMBS_2048: u32 = 18;\nglobal BODY_HASH_BASE64_LENGTH: u32 = 44;\nglobal CR: u8 = 0x0D;\nglobal LF: u8 = 0x0A;\nglobal MAX_DKIM_HEADER_FIELD_LENGTH: u32 = 300; // kinda arbitrary but gives > 100 chars for selector and domain\nglobal MAX_EMAIL_ADDRESS_LENGTH: u32 = 320;\n\npub struct Sequence {\n    index: u32,\n    length: u32\n}\n\nimpl Sequence {\n    pub fn end_index(self) -> u32 {\n        self.index + self.length\n    }\n}\n// allowable chars in an email address (js/src/utils:makeAllowableEmailCharsTable()\n// \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.-@\" = 1\n// \"<: \" = 2\n// \">\\r\\n\" = 3\nglobal EMAIL_ADDRESS_CHAR_TABLE: [u8; 123] = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    3, 0, 0, 3, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 2, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 1, 1, 0, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 2, 0,\n    2, 0, 3, 0, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 0, 0, 0, 0, 0, 0, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1,\n];\n\n/**\n * Standard outputs that essentially every email circuit will need to export (alongside app-specific outputs)\n * @notice if you only need the pubkey hash just import pedersen and hash away \n *\n * @param pubkey - the BN limbs of the DKIM RSA pubkey\n * @param signature - the BN limbs of the DKIM RSA signature\n * @returns\n *        0: Pedersen hash of DKIM public key (root of trust)\n *        1: Pedersen hash of DKIM signature (email nullifier)\n */\npub fn standard_outputs<let KEY_BYTE_LENGTH: u32>(\n    pubkey: [Field; KEY_BYTE_LENGTH],\n    signature: [Field; KEY_BYTE_LENGTH]\n) -> [Field; 2] {\n    // create pedersen hash of DKIM signing key to minimize public outputs\n    let pubkey_hash = pedersen_hash(pubkey);\n    // create email nullifier for email\n    let email_nullifier = pedersen_hash(signature);\n    // output the root of trust and email nullifier\n    [pubkey_hash, email_nullifier]\n}\n\n/**\n * Default email verification function\n * @dev use #[zkemail] attribute macro to apply other functionality\n *\n * @param MAX_EMAIL_HEADER_LENGTH - The maximum length of the email header\n * @param KEY_LIMBS - The number of limbs in the RSA pubkey\n * @param header - The email header, 0-padded at end to the MAX_EMAIL_HEADER_LENGTH\n * @param pubkey - The DKIM RSA Public Key modulus and reduction parameter\n * @param signature - The DKIM RSA Signature\n */\npub fn verify_email<\n    let MAX_EMAIL_HEADER_LENGTH: u32,\n    let MAX_EMAIL_BODY_LENGTH: u32, // sometimes unused but needed for macro\n    let KEY_LIMBS: u32\n>(\n    header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH>,\n    pubkey: RSAPubkey<KEY_LIMBS_2048>,\n    signature: [Field; KEY_LIMBS_2048]\n) {\n    // check the body and header lengths are within bounds\n    assert(header.len() <= MAX_EMAIL_HEADER_LENGTH);\n\n    // ~ 86,553 constraints with 2048-bit RSA & 1024 bit max header length\n    // verify the dkim signature over the header\n    pubkey.verify_dkim_signature(header, signature);\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"341":{"path":"/Users/envoy1084/nargo/github.com/zkemail/zkemail.nrv0.3.2/lib/src/headers/email_address.nr","source":"use dep::std::collections::bounded_vec::BoundedVec;\nuse crate::{\n    Sequence, MAX_EMAIL_ADDRESS_LENGTH, EMAIL_ADDRESS_CHAR_TABLE,\n    headers::constrain_header_field_detect_last_angle_bracket\n};\n\npub fn get_email_address<let MAX_HEADER_LENGTH: u32, let HEADER_FIELD_NAME_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    header_field_sequence: Sequence,\n    email_address_sequence: Sequence,\n    header_field_name: [u8; HEADER_FIELD_NAME_LENGTH]\n) -> BoundedVec<u8, MAX_EMAIL_ADDRESS_LENGTH> {\n    // check field is uninterrupted and matches the expected field name\n    let last_angle_bracket = constrain_header_field_detect_last_angle_bracket::<MAX_HEADER_LENGTH, MAX_EMAIL_ADDRESS_LENGTH + HEADER_FIELD_NAME_LENGTH + 1, HEADER_FIELD_NAME_LENGTH>(header, header_field_sequence, header_field_name);\n    // if angle bracket found, assert index is +1\n    if last_angle_bracket != 0 {\n        assert(\n            email_address_sequence.index == last_angle_bracket + 1, \"Email address must start immediately after '<' if bracket is present\"\n        );\n    }\n    // check email sequence is within header field\n    assert(\n        email_address_sequence.index >= header_field_sequence.index\n        & email_address_sequence.end_index() <= header_field_sequence.end_index(), \"Email address sequence out of bounds\"\n    );\n\n    // constrained get email address\n    parse_email_address(header, email_address_sequence)\n}\n\npub fn parse_email_address<let MAX_HEADER_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    email_address_sequence: Sequence\n) -> BoundedVec<u8, MAX_EMAIL_ADDRESS_LENGTH> {\n    // check the sequence is proceeded by an acceptable character\n    if email_address_sequence.index != 0 {\n        assert(\n            EMAIL_ADDRESS_CHAR_TABLE[header.get_unchecked(email_address_sequence.index - 1)] == 2, \"Email address must start with an acceptable character\"\n        );\n    }\n    if email_address_sequence.end_index() < header.len() {\n        assert(\n            EMAIL_ADDRESS_CHAR_TABLE[header.get_unchecked(email_address_sequence.index + email_address_sequence.length)]\n            == 3, \"Email address must end with an acceptable character\"\n        );\n    }\n    // check the email address and assign\n    let mut email_address: BoundedVec<u8, MAX_EMAIL_ADDRESS_LENGTH> = BoundedVec::new();\n    for i in 0..MAX_EMAIL_ADDRESS_LENGTH {\n        let index = email_address_sequence.index + i;\n        if index < email_address_sequence.end_index() {\n            let letter = header.get_unchecked(index);\n            email_address.storage[i] = letter;\n            assert(\n                EMAIL_ADDRESS_CHAR_TABLE[letter] == 1, \"Email address must only contain acceptable characters\"\n            );\n        }\n    }\n    email_address.len = email_address_sequence.length;\n    // todo: should probably introduce a check for @\n\n    email_address\n}\n\n"},"342":{"path":"/Users/envoy1084/nargo/github.com/zkemail/zkemail.nrv0.3.2/lib/src/headers/mod.nr","source":"use crate::{Sequence, CR, LF};\n\npub mod body_hash;\npub mod email_address;\n\n\n\n/**\n * Constrain a sequence in a header to match the specific header field\n *\n * @param MAX_HEADER_LENGTH - The maximum length of the email header\n * @param MAX_HEADER_FIELD_LENGTH - The maximum length of the header field\n * @param HEADER_FIELD_NAME_LENGTH - The length of the header field name\n * @param header - The email header as validated in the DKIM signature\n * @param header_field_sequence - The sequence of the header field\n * @param header_field_name - The name of the header field\n */\npub fn constrain_header_field<\n    let MAX_HEADER_LENGTH: u32,\n    let MAX_HEADER_FIELD_LENGTH: u32,\n    let HEADER_FIELD_NAME_LENGTH: u32,\n>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    header_field_sequence: Sequence,\n    header_field_name: [u8; HEADER_FIELD_NAME_LENGTH],\n) {\n    // check that the sequence is within bounds\n    assert(\n        header_field_sequence.index + header_field_sequence.length <= header.len(),\n        \"Header field out of bounds\"\n    );\n    // check the range of the sequence is within the header (so we can use get_unchecked)\n    let end_index = header_field_sequence.index + header_field_sequence.length;\n    assert(end_index <= header.len(), \"Header field out of bounds of header\");\n\n    // if the sequence is not the start, check for a newline\n    if header_field_sequence.index != 0 {\n        assert(header.get_unchecked(header_field_sequence.index - 2) == CR, \"Header field must start with CRLF\");\n        assert(header.get_unchecked(header_field_sequence.index - 1) == LF, \"Header field must start with CRLF\");\n    }\n    // if the sequence is not the end, check for a newline\n    if end_index != header.len() {\n        assert(\n            header.get_unchecked(end_index) == CR,\n            \"Header field must end with CRLF\"\n        );\n        assert(header.get_unchecked(end_index + 1) == LF,\n        \"Header field must end with CRLF\"\n        );\n    }\n    // check that the header field name matches the expected name\n    for i in 0..HEADER_FIELD_NAME_LENGTH {\n        assert(\n            header.get_unchecked(header_field_sequence.index + i) == header_field_name[i],\n            \"Header field name does not match\"\n        );\n    }\n    assert(\n        header.get_unchecked(header_field_sequence.index + HEADER_FIELD_NAME_LENGTH) == 0x3a,\n        \"Header field name must be followed by a colon\"\n    );\n    // check the header field is uninterrupted\n    let start_index = header_field_sequence.index + HEADER_FIELD_NAME_LENGTH + 1;\n    for i in (HEADER_FIELD_NAME_LENGTH + 1)..MAX_HEADER_FIELD_LENGTH {\n        // is it safe enough to cut this constraint cost in half by not checking lf? i think so\n        let index = start_index + i;\n        if (index < header_field_sequence.index + header_field_sequence.length) {\n            assert(\n                header.get_unchecked(index) != CR,\n                \"Header field must not contain newlines\"\n            );\n        }\n    }\n}\n\n/**\n * contrain_header_field with checks for the last occurence of \"<\" inside the loop to save constraints\n */\npub fn constrain_header_field_detect_last_angle_bracket<\n    let MAX_HEADER_LENGTH: u32,\n    let MAX_HEADER_FIELD_LENGTH: u32,\n    let HEADER_FIELD_NAME_LENGTH: u32,\n>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    header_field_sequence: Sequence,\n    header_field_name: [u8; HEADER_FIELD_NAME_LENGTH],\n) -> u32 {\n    // check that the sequence is within bounds\n    assert(\n        header_field_sequence.index + header_field_sequence.length <= header.len(),\n        \"Header field out of bounds\"\n    );\n    // check the range of the sequence is within the header (so we can use get_unchecked)\n    let end_index = header_field_sequence.index + header_field_sequence.length;\n    assert(end_index <= header.len(), \"Header field out of bounds of header\");\n\n    // if the sequence is not the start, check for a newline\n    if header_field_sequence.index != 0 {\n        assert(header.get_unchecked(header_field_sequence.index - 2) == CR, \"Header field must start with CRLF\");\n        assert(header.get_unchecked(header_field_sequence.index - 1) == LF, \"Header field must start with CRLF\");\n    }\n    // if the sequence is not the end, check for a newline\n    if end_index != header.len() {\n        assert(\n            header.get_unchecked(end_index) == CR,\n            \"Header field must end with CRLF\"\n        );\n        assert(header.get_unchecked(end_index + 1) == LF,\n            \"Header field must end with CRLF\"\n        );\n    }\n    // check that the header field name matches the expected name\n    for i in 0..HEADER_FIELD_NAME_LENGTH {\n        assert(\n            header.get_unchecked(header_field_sequence.index + i) == header_field_name[i],\n            \"Header field name does not match\"\n        );\n    }\n    assert(\n        header.get_unchecked(header_field_sequence.index + HEADER_FIELD_NAME_LENGTH) == 0x3a,\n        \"Header field name must be followed by a colon\"\n    );\n    // check the header field is uninterrupted\n    let mut last_angle_bracket = 0;\n    let start_index = header_field_sequence.index + HEADER_FIELD_NAME_LENGTH + 1;\n    for i in (HEADER_FIELD_NAME_LENGTH + 1)..MAX_HEADER_FIELD_LENGTH {\n        // is it safe enough to cut this constraint cost in half by not checking lf? i think so\n        let index = start_index + i;\n        if (index < header_field_sequence.index + header_field_sequence.length) {\n            let byte = header.get_unchecked(index);\n            assert(\n                byte != CR,\n                \"Header field must not contain newlines\"\n            );\n            if byte == 0x3c {\n                last_angle_bracket = index;\n            }\n        }\n    }\n    last_angle_bracket\n}\n"},"345":{"path":"/Users/envoy1084/nargo/github.com/zkemail/zkemail.nrv0.3.2/lib/src/dkim.nr","source":"use dep::std::{collections::bounded_vec::BoundedVec, hash::{sha256_var, pedersen_hash}, panic::panic};\nuse dep::rsa::{bignum::{fields::{Params1024, Params2048}, runtime_bignum::BigNumInstance, BigNum}, types::RSA};\nuse crate::{KEY_LIMBS_1024, KEY_BYTES_1024, KEY_LIMBS_2048, KEY_BYTES_2048, RSA_EXPONENT};\n\ntype BN1024 = BigNum<KEY_LIMBS_1024, Params1024>;\ntype RSA1024 = RSA<BN1024, BigNumInstance<KEY_LIMBS_1024, Params1024>, KEY_BYTES_1024>;\ntype BN2048 = BigNum<KEY_LIMBS_2048, Params2048>;\ntype RSA2048 = RSA<BN2048, BigNumInstance<KEY_LIMBS_2048, Params2048>, KEY_BYTES_2048>;\n\npub struct RSAPubkey<let KEY_LIMBS: u32> {\n    modulus: [Field; KEY_LIMBS],\n    redc: [Field; KEY_LIMBS],\n}\n\nimpl<let KEY_LIMBS: u32> RSAPubkey<KEY_LIMBS> {\n    fn hash(self) -> Field {\n        pedersen_hash(self.modulus)\n    }\n}\n\nimpl RSAPubkey<KEY_LIMBS_1024> {\n    fn verify_dkim_signature<let MAX_HEADER_LENGTH: u32>(\n        self,\n        header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n        signature: [Field; KEY_LIMBS_1024]\n    ) {\n        // hash the header\n        let header_hash = sha256_var(header.storage, header.len() as u64);\n        // instantiate the BNInstance for the pubkey\n        // todo: make as BigNumInstance from the outset to reduce some work\n        let pubkey: BigNumInstance<KEY_LIMBS_1024, Params1024> = BigNumInstance::new(self.modulus, self.redc);\n\n        // instantiate BN for the signature\n        let signature: BN1024 = BigNum::from_array(signature);\n\n        // verify the DKIM signature over the header\n        let rsa: RSA1024 = RSA {};\n        assert(rsa.verify_sha256_pkcs1v15(pubkey, header_hash, signature, RSA_EXPONENT));\n    }\n}\n\nimpl RSAPubkey<KEY_LIMBS_2048> {\n    fn verify_dkim_signature<let MAX_HEADER_LENGTH: u32>(\n        self,\n        header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n        signature: [Field; KEY_LIMBS_2048]\n    ) {\n        // hash the header\n        let header_hash = sha256_var(header.storage, header.len() as u64);\n        // instantiate the BNInstance for the pubkey\n        // todo: make as BigNumInstance from the outset to reduce some work\n        let pubkey: BigNumInstance<KEY_LIMBS_2048, Params2048> = BigNumInstance::new(self.modulus, self.redc);\n\n        // instantiate BN for the signature\n        let signature: BN2048 = BigNum::from_array(signature);\n\n        // verify the DKIM signature over the header\n        let rsa: RSA2048 = RSA {};\n        assert(rsa.verify_sha256_pkcs1v15(pubkey, header_hash, signature, RSA_EXPONENT));\n    }\n}"},"349":{"path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_rsav0.3.1/lib/src/rsa.nr","source":"use dep::bignum::BigNum;\nuse dep::bignum::runtime_bignum::BigNumInstance;\nuse dep::bignum::runtime_bignum::BigNumTrait;\nuse dep::bignum::runtime_bignum::BigNumInstanceTrait;\n\nuse crate::types::{RSA, BN1024, BN2048, BNInst1024, BNInst2048, RSA1024, RSA2048};\n\n/**\n * @brief Compare a recovered byte hash from an RSA signature to the original message hash\n * @details Taken from https://github.com/richardliang/noir-rsa\n **/\nfn compare_signature_sha256<let N: u32>(padded_sha256_hash: [u8; N], msg_hash: [u8; 32]) -> bool {\n    // Get length of sig (e.g. 1048 = 128 bytes, 2048 = 256 bytes)\n    // NOTE: Assume MAX_BYTES < 2^32 bit number. MAX_BYTES of 259 > 2^8 bits so need to cast it to u32\n\n    for i in 0..32 {\n        // Padded hash is reversed\n        // println(padded_sha256_hash[31 - i] == msg_hash[i]);\n        // println(padded_sha256_hash[31 - i]);\n        // println(msg_hash[i]);\n        assert(padded_sha256_hash[31 - i] == msg_hash[i]);\n    }\n\n    let hash_prefix: [u8; 19] = [32, 4, 0, 5, 1, 2, 4, 3, 101, 1, 72, 134, 96, 9, 6, 13, 48, 49, 48];\n\n    for i in 32..51 {\n        assert(hash_prefix[i - 32] == padded_sha256_hash[i]);\n    }\n\n    assert(padded_sha256_hash[51] == 0);\n\n    // Sub 32 bytes for hash, 19 bytes for prefix, 1 byte for 0, 1 byte for 1, 1 byte for 0\n    let ps_len = N - 54;\n    for i in 52..N {\n        if i as u32 < 52 + ps_len as u32 {\n            // PS padding which depends on RSA modulus / sig length. 1024 bits = 128 bytes = 128 - 54 = 74 bytes of 0xFF padding\n            assert(padded_sha256_hash[i] == 255);\n        } else if i as u32 == 52 + ps_len as u32 {\n            // Pad 0x01\n            assert(padded_sha256_hash[i] == 1);\n        } else if i as u32 == 53 + ps_len as u32 {\n            // 0x00\n            assert(padded_sha256_hash[i] == 0);\n        } else {\n            // Padded with 0 until MAX_BYTES\n            assert(padded_sha256_hash[i] == 0);\n        }\n    }\n\n    true\n}\nimpl<BN, BNInstance, let NumBytes: u32> RSA<BN, BNInstance, NumBytes>  where BN: BigNumTrait, BNInstance: BigNumInstanceTrait<BN> {\n    /**\n * @brief Verify an RSA signature generated via the pkcs1v15 signature scheme.\n * @details The fourth function parameter is required to define the value of `NBytes`\n *          when converting a BigNum into a byte array, the number of bytes is required and currently cannot be inferred.\n *          Once numeric generics can be derived by applying operations to other numeric generics the need for this will go away.\n *\n * @note The exponent `e` can be either 65537 or 3 (i.e. the most common values in use for RSA)\n * Rough cost: 2,048 bit RSA: 26,888 gates per verification\n *             1,024 bit RSA: 11,983 gates per verification\n * A circuit that verifies 1 signature (and does nothing else) will cost ~32k due to initialization costs of lookup tables\n **/\n    pub fn verify_sha256_pkcs1v15(_: Self, instance: BNInstance, msg_hash: [u8; 32], sig: BN, exponent: u32) -> bool {\n        assert((exponent == 3) | (exponent == 65537), \"Exponent must be 65537 or 3\");\n        let mut exponentiated = instance.mul(sig, sig); // sig^2\n\n        if exponent == 65537 {\n            // e = 65537 = 1 0000 0000 0000 0001\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^2 * sig^2 = sig^4\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^8\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^16\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^32\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^64\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^128\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^256\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^512\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^1024\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^2048\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^4096\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^8192\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^16384\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^32768\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^65536\n        }\n        // otherwise, e = 3 = 11\n\n        exponentiated = instance.mul(exponentiated, sig); // either sig^2 * sig = sig^3 or sig^65536 * sig = sig^65537\n\n        let mut padded_sha256_hash_bytes: [u8; NumBytes] = exponentiated.to_le_bytes();\n        // println(padded_sha256_hash_bytes);\n        // println(msg_hash);\n        compare_signature_sha256(padded_sha256_hash_bytes, msg_hash)\n    }\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_1024() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n\n    let BNInstance: BNInst1024 = BigNumInstance::new(\n        [\n        0xe908724e0d28a1565511879e00f063, 0x58dea28d5112982c8ab8597d3e611f, 0xb115f9878acc910a47b41ac8d5f763, 0xc71b0a719c2283f710f86024737cee, 0x9ee9eb73e95b84f033af5217337427, 0x8fcab34c99cc2661dd57de15ae2110, 0xa38db8a829eec5550342f6f66334dc, 0xd7c4b32fd351a47d860fda1897330e, 0x98c92a33a0f33fd7\n    ],\n        [\n        0x55582e8ba08822783fbd7d07390be2, 0x1d7d83f9dce3983c66f440dcc2f33e, 0x6072d13c84a4cb304f58fbabe782e7, 0x0cee5e0dd62bc54d15a91a4ea3bc50, 0xc485e6f946c45cf660fba4f49325cb, 0x1f0e45df0464b065c94e84ed1dad8c, 0xe4c7b3976310ea239059d834b545f3, 0xd418145200fa77235f5f8d852b121f, 0x01acf0bd16cad9bd8f\n    ]\n    );\n    let signature: BN1024 = BigNum::from_array(\n        [\n        0x393f230b55a12fb7bb39c7edd2cf48, 0x78f7d0a217d340407cae4f39b8f001, 0x603909ff76a519f3c8e96d695d462e, 0x0640ab230b459bf4b20b4823a5b850, 0x02ba190de61a85074b18e228231984, 0xe1424c0779825707aa433ecb86c388, 0xbed8087d947a9c6c56625ad20c91aa, 0x7da4a0c2eee3a3c0d61e892ab4ada9, 0x6ef98a936c8bf8e5\n    ]\n    );\n\n    let rsa: RSA1024 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world\".as_bytes());\n    let BNInstance: BNInst2048 = BigNumInstance::new(\n        [\n        0x183b4cadacea64716b6535b25a86ad, 0x129a32e9fbd374949e81b080546c2b, 0x9276332765f54b9b4d6fe23f4983a4, 0x91df05fde1a414c9fbf38808a01032, 0x97ca171c382e082ddd6c81be090902, 0x97161dde47ed979939451704b72648, 0x3b66f0c93f8ddbc62bb99f6b8fad2d, 0xc3a046fcad814d8938da372cd84d2a, 0xfe903cfe3ee4de6de3916023bb87f2, 0x8be5fd99c8b46dce9aab27ce4b3883, 0x0d99dfe50dd2288123804872da8543, 0xbb6d8afef8b2c7e3b86ad96973d4e5, 0x17e08fa3c5391279b844581f67825c, 0x09511f4a436abe495bfbfcc254d9c5, 0xf80d02572d620eab5ad7ecfbe2c20c, 0x2a5307402a05f59ba232ad0c8366d0, 0x7b9169630b317c38d549a86f85fcfc, 0xf2\n    ],\n        [\n        0xf4effa025abe90db41dc5bb5934a5f, 0x2596b25aa09f6a0e290accebbef006, 0x330e9567ec5eca92b7a8ce72ad3d83, 0xccf98d178ec4017e4947cadc02da7c, 0xaed6044ffeeb12de4d1e67aedfda78, 0xb5ae8a5a4637b632800e2f41dfbf0a, 0x8304360d359cf2f0d5d97c039f9b04, 0x53cde0d0633c0e66e1da9a118f6a96, 0xf9a83822351097bb1ed123d10290f5, 0xeb489c7f7227c09ca0117264dcf04f, 0x6a1b3618478a235f438adf84533177, 0x71c03085e38a87f5ec8e51c27dde98, 0xcf3e89d9cf253ef61d65d4431334d9, 0xa5a1a59e98fb7f49c746149324201d, 0x38f46c635f884f24c254eaa37981d6, 0x1c42be15dd95e1ac5bf01972b24ff9, 0x4555dd506d1f89e61279293c03db90, 0x010e\n    ]\n    );\n    let signature: BN2048 = BigNum::from_array(\n        [\n        0x5f0937ed1aacbdb83991e21c89ca8a, 0x5a1fa4ef2faf4042401c9121c73874, 0x7379fbb7713fbf807d250f7401afb8, 0x9cc5ce8813f3a83a72b681a4d434b2, 0x11cb49ac2ee1f9bed8a008b8327e1e, 0xf3362524f1224e48827b34a62f6ace, 0x3498a2944e32a3798fe9da684b32ae, 0xc346c33528bcdf7a06805126a29402, 0x6ac93f2fa68f270ec73674eae24380, 0x222c72de080496533ceeb8af827910, 0xc22889b311a53203278b942ca67100, 0x93d75567f7fe9ee7ca9871a0cb09f9, 0x049dabd976a9574847b1614f6b739c, 0xdc66b621dbae623df9b657b52fa1b0, 0xf37e82cc1eced382e11fc32e673f67, 0xe50545eb9027f1144a0ba7bbb0c886, 0xb6193409539c515d3c55a45c5734b1, 0x4b\n    ]\n    );\n    let rsa: RSA2048 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048_exponent_3() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n\n    let BNInstance: BNInst2048 = BigNumInstance::new(\n        [\n        0xc6a1c5e80ce354c6b00ccf20cf3a1d, 0x178d135f925a03eceb25f79bab56ee, 0x13ab3d6d8a5c5586752b5a3bc74ec3, 0x3d13b47b152367e3e2fc014d03d19f, 0xe89a7278a2945b4a672011691db30f, 0x5b4c1b061378143629dbb29dea1e4, 0x26a48b6f4e8df1472fd4fc12b17c18, 0xc7c92ead0ce810520cf3a8267254c1, 0x806b8cdba93909e9d9a71ee1bcdac2, 0x703ef80f8eb703b84c201366dff1c7, 0x7361034bb2c4c081aad8b1bcca83de, 0xb23c7e1109e65e6d08fa72cc862008, 0x750bc927874455782cd2d6fd5a51f6, 0xf0b83665fbf8cb5cf31cee9f89848e, 0x20d447b08953c7ce3330197938a8ae, 0x11a08bb5a2241c6a2a69f930d8b28b, 0xef5bca8dd582570a44705cb123d09e, 0xb7\n    ],\n        [\n        0xbc93ee57c1c8adc53f0a995a6221ca, 0x2a9b43587534b20dd85a5233329f10, 0xc587fd488f64eed02adc1f462f7448, 0xf1484d37676bb0e800996757382522, 0xc2126c48221aa61c9f52c6b918bab3, 0x8660c861dd52ed958beaf6c6c2cff0, 0x5edd9dc4f02a000f350948c70bdf94, 0x6f3b9603149272e9b232a379a017bb, 0x950fd85cffbdf4476b1cb66c1f63d6, 0xee459417b1a56b6f7ef3b89e385ac, 0x48daeef6d1a055f3746ab71058e137, 0x3cbc0ba96d541feee92dd27f9d0306, 0x6a2a42384cc388fa113ee80317e0a0, 0x43b4f89c508a42d309f295c0d9f3a5, 0x8d8c28b05f71b962b40ea906ff407f, 0x390a7989eb9cecc5827cb00e1ca693, 0x4cbf158eabf7e96ef7f2586d0ce613, 0x164\n    ]\n    );\n\n    let signature: BN2048 = BigNum::from_array(\n        [\n        0x19772b9af8a031170a7844ce4f3d7c, 0x4808e817258f57805a7326f70bcd74, 0xca8f3f98e374d52100115bfa645a7d, 0x49547189edff3b683fee267e717b7f, 0x96f263b47e96925f3b5898a7389ceb, 0x4cc50a893da91d0e085fc6656b30bc, 0x67e84ff92d88c0ad2c17ad2701309e, 0x095326818578173289665fcd9ad788, 0x775c6e85b745065db9411b9d579763, 0xad0f20c8a5265dfca4080ca877a2b8, 0xbfd199372f1680b3bc583a08bd8ba9, 0x663476ca3e5ede3e5976887db2c4e5, 0x531192309d0d49fed47c0216c27f9e, 0x37d26d31c86b951ca1c17b517063b7, 0x3cdb362ed5dfd06568eb9a9bbb6a91, 0x14520b9c23f583314729a9d858bca9, 0x5e0505067ada1026721d45997bf2c4, 0x3e\n    ]\n    );\n\n    let rsa: RSA2048 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature, 3));\n}\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u32, msg_start: u32) -> ([u8; 64], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if crate::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..BLOCK_SIZE {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..BLOCK_SIZE {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; 64],\n    mut msg_byte_ptr: u32\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; BLOCK_SIZE], msg_byte_ptr: u32, message_size: u32) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d, 0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0, 0x8f, 0xfe, 0x73, 0x2b\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94, 24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154, 60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213, 165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97, 103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186, 55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253, 179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9, 236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214, 72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107, 218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198, 149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126, 32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36, 137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59, 245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97, 3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180, 170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216, 116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70, 86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246, 215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193, 104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74, 134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210, 188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210, 186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69, 79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22, 121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175, 169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53, 101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200, 157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86, 119, 30, 63, 129, 143, 32, 96\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n"},"352":{"path":"/Users/envoy1084/nargo/github.com/noir-lang/noir-bignumv0.3.5/src/utils/split_bits.nr","source":"\n// Decomposes a single field into two 120 bit fields and a carry\nunconstrained pub fn split_120_bits(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let offsets: [Field; 17] = [\n        1, 0x100, 0x10000, 0x1000000, 0x100000000, 0x10000000000, 0x1000000000000, 0x100000000000000, 0x10000000000000000, 0x1000000000000000000, 0x100000000000000000000, 0x10000000000000000000000, 0x1000000000000000000000000, 0x100000000000000000000000000, 0x10000000000000000000000000000, 0x1000000000000000000000000000000, 0x100000000000000000000000000000000\n    ];\n\n    for i in 0..15 {\n        low += (x_bytes[i] as Field) * offsets[i];\n        high += (x_bytes[i + 15] as Field) * offsets[i];\n    }\n    high += (x_bytes[30] as Field) * offsets[15];\n    high += (x_bytes[31] as Field) * offsets[16];\n    // TDOO: investigate why this is triggered in BigCurve crate? it shouldn't be?\n    //   assert(x_bytes[31] == 0);\n    (low, high)\n}\n\n/**\n * @brief Decomposes a single field into two 60 bit fields\n *\n * @description Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\n **/\nunconstrained pub fn split_60_bits(x: Field) -> (u64, u64) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: u64 = 0;\n    let mut high: u64 = 0;\n\n    let offsets: [u64; 8] = [1, 0x100, 0x10000, 0x1000000, 0x100000000, 0x10000000000, 0x1000000000000, 0x100000000000000];\n    for i in 0..8 {\n        low += (x_bytes[i] as u64) * offsets[i];\n        high += (x_bytes[i + 8] as u64) * offsets[i];\n    }\n    let t1 = low >> 60;\n    let mask = ((1 as u64) << 60 as u8) - 1;\n    low = low & mask;\n    high = (high << 4) | t1;\n    (low, high)\n}\n\nunconstrained pub(crate) fn __normalize_limbs<let N: u32>(\n    input: [Field; N],\n    range: u32\n) -> [Field; N] {\n    let mut normalized: [Field; N] = [0; N];\n    let mut inp: _ = input;\n    for i in 0..(range - 1) {\n        let (lo, hi) = split_120_bits(inp[i]);\n\n        normalized[i]= lo;\n        inp[i + 1] +=  hi;\n    }\n    {\n        let (lo, hi) = split_120_bits(inp[range - 1]);\n        normalized[range - 1]= lo;\n        assert(hi == 0);\n    }\n    normalized\n}\n"},"353":{"path":"/Users/envoy1084/nargo/github.com/noir-lang/noir-bignumv0.3.5/src/utils/u60_representation.nr","source":"use crate::utils::split_bits;\nuse crate::utils::msb::get_msb64;\n\n/**\n * @brief U60Repr represents a BigNum element as a sequence of 60-bit unsigned integers.\n *\n * @description: used in unconstrained functions when computing witness values.\n * It is helpful to use u60 types when evaluating addition operations that can overflow the field modulus,\n * as well as when performing bit shifts.\n */\nstruct U60Repr<let N: u32, let NumSegments: u32> {\n    limbs: [u64; N * NumSegments]\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Add for U60Repr<N, NumSegments> {\n    fn add(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut carry: u64 = 0;\n        for i in 0..N * NumSegments {\n            let mut add: u64 = self.limbs[i] + b.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            result.limbs[i] = add;\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Sub for U60Repr<N, NumSegments> {\n    fn sub(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        for i in 0..N * NumSegments {\n            borrow = ((b.limbs[i] + borrow_in) > self.limbs[i]) as u64;\n            let sub = (borrow << 60) + self.limbs[i] - b.limbs[i] - borrow_in;\n            result.limbs[i] = sub;\n            borrow_in = borrow;\n        }\n\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::From<[Field; N]> for U60Repr<N, NumSegments> {\n    fn from(input: [Field; N]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..(N) {\n            let (lo, hi) = unsafe {\n                split_bits::split_60_bits(input[i])\n            };\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::Into<[Field; N]> for U60Repr<N, NumSegments> {\n    fn into(x: U60Repr<N, NumSegments>) -> [Field; N] {\n        let mut result: [Field; N] = [0; N];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..N {\n            result[i] = x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * two_pow_60);\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::cmp::Eq for U60Repr<N, NumSegments> {\n    fn eq(self, other: Self) -> bool {\n        self.limbs == other.limbs\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> U60Repr<N, NumSegments> {\n\n    unconstrained fn new<let NumFieldSegments: u32>(x: [Field; N * NumFieldSegments]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..(N * NumFieldSegments) {\n            let (lo, hi) = split_bits::split_60_bits(x[i]);\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n\n    unconstrained fn one() -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        result.limbs[0] = 1;\n        result\n    }\n\n    unconstrained fn into_field_array(x: U60Repr<N, NumSegments>) -> [Field; N * NumSegments / 2] {\n        let mut result: [Field; N * NumSegments / 2] = [0; N * NumSegments / 2];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..(N * NumSegments / 2) {\n            result[i]= x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * two_pow_60);\n        }\n        result\n    }\n\n    unconstrained fn gte(self, b: Self) -> bool {\n        let mut result = false;\n        let mut early_exit = false;\n        for i in 0..(N * NumSegments) {\n            if (b.limbs[(N * NumSegments) - 1 - i] < self.limbs[((N * NumSegments) - 1 - i)]) {\n                result = true;\n                early_exit = true;\n                break;\n            } else if (b.limbs[(N * NumSegments) - 1 - i] != self.limbs[((N * NumSegments) - 1 - i)]) {\n                result = false;\n                early_exit = true;\n                break;\n            }\n        }\n        if (early_exit == false) {\n            result = (self.limbs[0] == b.limbs[0]);\n        }\n        result\n    }\n\n    fn get_bit(self, bit: u32) -> bool {\n        let segment_index = bit / 60;\n        let uint_index = bit % 60;\n\n        let limb: u64 = self.limbs[segment_index];\n        let value = (limb >> uint_index as u8) & 1;\n        value == 1\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    fn shr(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = shift % 60;\n        let remainder_shift = 60 - limb_shift;\n        let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        result.limbs[0] = (self.limbs[0 + num_shifted_limbs] >> limb_shift as u8);\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i + num_shifted_limbs];\n            result.limbs[i] = (value >> limb_shift as u8);\n            let remainder: u64 = (value << remainder_shift as u8) & mask;\n            result.limbs[i - 1] = result.limbs[i - 1] + remainder;\n        }\n        result\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    fn shr1(&mut self) {\n        let value = self.limbs[NumSegments * N - 1];\n        self.limbs[NumSegments * N - 1] = value >> 1;\n\n        let mut remainder = (value & 1) << 59;\n\n        for i in 0..N * NumSegments {\n            let value = self.limbs[N * NumSegments - 1 - i];\n            self.limbs[N * NumSegments - 1 - i] = (value >> 1) + remainder;\n            remainder = (value << 59) & 0x800000000000000;\n        }\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    fn shl(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; NumSegments * N] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift: u8 = 60 - limb_shift as u8;\n\n        // 83\n        // limb shift = 1\n        // inside shift = 19 bits to the left\n        // meaning we have 19 carry bits and 41 remainder bits\n        let mask: u64 = (1 as u64 << 60) - 1;\n        //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        let value = self.limbs[0];\n\n        let mut remainder = (value >> remainder_shift);\n        result.limbs[num_shifted_limbs] = (value << (limb_shift as u8)) & mask;\n\n        // shift 84. num shifted = 1\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i];\n            let upshift = ((value << (limb_shift as u8)) + remainder) & mask;\n            result.limbs[i + num_shifted_limbs] = upshift;\n            remainder = (value >> remainder_shift);\n            // let remainder: u64 = (self.limbs.get(i + num_shifted_limbs as u64) << remainder_shift as u8) & mask;\n            // result.limbs.set(i - 1, result.limbs.get(i - 1) + remainder);\n        }\n        result\n    }\n\n    fn increment(&mut self) {\n        let mut carry: u64 = 0;\n\n        let mut add: u64 = self.limbs[0] + 1;\n        carry = add >> 60;\n        add = add - (carry << 60);\n        self.limbs[0] = add;\n\n        for i in 1..NumSegments * N {\n            let mut add: u64 = self.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            self.limbs[i] = add;\n        }\n    }\n\n    unconstrained  fn get_msb(val: Self) -> u32 {\n        let mut count = 0;\n        for i in 0..N * NumSegments {\n            let v = val.limbs[((N * NumSegments) - 1 - i)];\n            if (v > 0) {\n                count = 60 * ((N * NumSegments) - 1 - i) + get_msb64(v);\n                break;\n            }\n        }\n        count\n    }\n}\n"},"388":{"path":"/Users/envoy1084/nargo/github.com/noir-lang/noir-bignumv0.3.5/src/runtime_bignum.nr","source":"use dep::std;\nuse crate::utils::u60_representation::U60Repr;\nuse crate::utils::split_bits;\nuse crate::BigNum;\n/**\n * @brief runtime_bignum::BigNumTrait defines methods available to BigNum *if* the modulus is not known at compile time.\n *        e.g. RSA where the modulus is a witness value as it changes for every RSA signature\n *        tee `lib.nr` for a trait definition where the modulus is known at compile time\n **/\ntrait BigNumTrait {\n    fn new() -> Self;\n    fn one() -> Self;\n    fn from(limbs: [Field]) -> Self;\n    fn from_be_bytes<let NBytes: u32>(x: [u8; NBytes]) -> Self;\n    fn to_le_bytes<let NBytes: u32>(val: Self) -> [u8; NBytes];\n    fn get(self) -> [Field];\n    fn get_limb(self, idx: u64) -> Field;\n    fn set_limb(&mut self, idx: u32, value: Field);\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self;\n    fn validate_in_range(self);\n    fn validate_quotient_in_range(self);\n    fn __is_zero(self) -> bool;\n    fn __eq(self, rhs: Self) -> bool;\n}\n\n/**\n * @brief BigNumInstanceTrait defines methods available to a runtime BigNumInstance.\n *        BigNumInstance wraps the modulus parameter (as well as a Barret reduction parameter),\n *        which is required for the majority of BigNum operations\n **/\ntrait BigNumInstanceTrait<BN> where BN: BigNumTrait {\n    fn modulus(self) -> BN;\n    fn __derive_from_seed<let SeedBytes: u32>(self, seed: [u8; SeedBytes]) -> BN;\n    fn eq(self, lhs: BN, rhs: BN) -> bool;\n    fn __neg(self, val: BN) -> BN;\n    fn __add(self, lhs: BN, rhs: BN) -> BN;\n    fn __sub(self, lhs: BN, rhs: BN) -> BN;\n    fn __mul(self, lhs: BN, rhs: BN) -> BN;\n    fn __div(self, lhs: BN, rhs: BN) -> BN;\n    fn __batch_invert<let M: u32>(self, x: [BN; M]) -> [BN; M];\n    fn __udiv_mod(self, numerator: BN, divisor: BN) -> (BN, BN);\n    fn __invmod(self, val: BN) -> BN;\n    fn __pow(self, val: BN, exponent: BN) -> BN;\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BN; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BN; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BN; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BN, BN);\n\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BN; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BN; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BN; ADD_N],\n        linear_flags: [bool; ADD_N]\n    );\n\n    fn validate_in_field(self, val: BN);\n    fn validate_gt(self, lhs: BN, rhs: BN);\n    fn assert_is_not_equal(self, lhs: BN, rhs: BN);\n    fn neg(self, val: BN) -> BN;\n    fn add(self, lhs: BN, rhs: BN) -> BN;\n    fn sub(self, lhs: BN, rhs: BN) -> BN;\n    fn mul(self, lhs: BN, rhs: BN) -> BN;\n    fn div(self, lhs: BN, rhs: BN) -> BN;\n    fn udiv_mod(self, numerator: BN, divisor: BN) -> (BN, BN);\n    fn udiv(self, numerator: BN, divisor: BN) -> BN;\n    fn umod(self, numerator: BN, divisor: BN) -> BN;\n\n}\n\n/**\n * @brief BigNumParamsTrait defines a \"field\" with which to parametrise BigNum.\n * @description The \"field\" does not need to be prime, any value *should* work (TODO: test!)\n**/\ntrait BigNumParamsTrait<let N: u32> {\n    /**\n     * @brief modulus_bits = log2(modulus) rounded up\n     **/\n    fn modulus_bits() -> u32;\n\n    fn has_multiplicative_inverse() -> bool { true }\n}\n\nstruct  BigNumInstance<let N: u32, Params> {\n    \n    /**\n     * @brief modulus: all BigNum operations are evaluated modulo this value\n     **/\n    modulus: [Field; N],\n\n    /**\n     * @brief modulus but represented in a U60Repr form\n     **/\n    modulus_u60: U60Repr<N, 2>,\n    modulus_u60_x4: U60Repr<N, 4>,\n\n    // /**\n    //  * @brief double_modulus: used when performing negations and subtractions\n    //  **/\n    double_modulus: [Field; N],\n    // /**\n    //  * @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n    //  **/\n    redc_param: [Field; N],\n}\n\nimpl<let N: u32, Params> BigNum<N, Params> {\n    // some strange circular dependency problem means we need to define `new` as a member of BigNumTrait as well as a definition outside of the trait\n    // (delete this method to see. BigNumInstance methods that use BigNum::new() error out, and I can't find a way of declaring BigNum to satisfy BigNumTrait as part of the BigNumInstance definition because BigNumInstance has no contextual knowledge of the BigNum type...)\n    fn new() -> Self {\n        BigNum { limbs: [0; N] }\n    }\n    fn one() -> BigNum<N, Params> {\n        let mut result: Self = BigNum { limbs: [0; N] };\n        result.limbs[0] = 1;\n        result\n    }\n}\n\nimpl<let N: u32, Params> BigNumTrait for BigNum<N, Params> where Params: BigNumParamsTrait<N> {\n\n    fn new() -> Self {\n        BigNum::new()\n    }\n    fn one() -> Self {\n        BigNum::one()\n    }\n\n    fn from(limbs: [Field]) -> Self {\n        BigNum { limbs: limbs.as_array() }\n    }\n\n    /**\n     * @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n     * @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n     *               is precisely large enough to cover Params::modulus_bits()\n     * @param x: input byte array\n     **/\n    fn from_be_bytes<let NBytes: u32>(x: [u8; NBytes]) -> BigNum<N, Params> {\n        let num_bits = NBytes * 8;\n        let modulus_bits = Params::modulus_bits();\n        assert(num_bits >= modulus_bits);\n        assert(num_bits - modulus_bits < 8);\n        let mut result = BigNum::new();\n\n        let excess_bytes = N * 15 - NBytes;\n        let final_limb_bytes = 15 - excess_bytes;\n        let mut limb: Field = 0;\n        let mut k = 0;\n        for _j in 0..final_limb_bytes {\n            limb *= 256;\n            limb += x[k] as Field;\n            k += 1;\n        }\n        result.limbs[N - 1] = limb;\n\n        for i in 1..N {\n            let mut limb: Field = 0;\n            for _j in 0..15 {\n                limb *= 256;\n                limb += x[k] as Field;\n                k += 1;\n            }\n            result.limbs[N - i - 1] = limb;\n        }\n\n        // max_bits_in_most_significant_byte should be known at comptime. if not...messy!\n        let mut max_bits_in_most_significant_byte = 8 - (num_bits - modulus_bits);\n\n        let most_significant_byte: Field = x[0] as Field;\n\n        most_significant_byte.assert_max_bit_size(max_bits_in_most_significant_byte as u32);\n        result\n    }\n\n    fn to_le_bytes<let NBytes: u32>(val: BigNum<N, Params>) -> [u8; NBytes] {\n        let nbytes = (Params::modulus_bits() / 8) + (Params::modulus_bits() % 8 != 0) as u32;\n        assert(nbytes <= NBytes);\n\n        let mut result: [u8; NBytes] = [0; NBytes];\n        for i in 0..N - 1 {\n            let limb_bytes: [u8; 15] = val.limbs[i].to_le_bytes();\n            for j in 0..15 {\n                result[i * 15 + j] = limb_bytes[j];\n            }\n        }\n        let last_limb_bytes: [u8; 15] = val.limbs[N - 1].to_le_bytes();\n        let num_last_bytes = (NBytes - (N - 1) * 15);\n        for i in 0..num_last_bytes {\n            result[(N-1) * 15 + i] = last_limb_bytes[i];\n        }\n        result\n    }\n\n    fn get(self) -> [Field] {\n        self.limbs\n    }\n    fn get_limb(self, idx: u64) -> Field {\n        self.limbs[idx]\n    }\n    fn set_limb(&mut self, idx: u32, value: Field) {\n        self.limbs[idx] = value;\n    }\n\n    /**\n     * @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n     * @description should be cheaper than using an IF statement (TODO: check!)\n     **/\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let mut result: Self = lhs;\n        for i in 0..N {\n            result.limbs[i] = (lhs.limbs[i] - rhs.limbs[i]) * predicate as Field + rhs.limbs[i];\n        }\n        result\n    }\n\n    /**\n     * @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n     **/\n    fn validate_in_range(self) {\n        for i in 0..(N - 1) {\n            self.limbs[i].assert_max_bit_size(120);\n        }\n        let final_limb_bits = Params::modulus_bits() - ((N - 1) * 120);\n        self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32);\n    }\n\n    /**\n     * @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n     * @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n     *              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n     *              Why is this?\n     *              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n     *                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n     *                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n     *              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n     *\n     *              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n     *              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n     **/\n    fn validate_quotient_in_range(self) {\n        for i in 0..(N) {\n            self.limbs[i].assert_max_bit_size(120);\n        }\n        // Note: replace magic number 6 with definition\n        let final_limb_bits = Params::modulus_bits() - ((N - 1) * 120) + 6;\n        self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32);\n    }\n\n    fn __is_zero(self) -> bool {\n        self.__is_zero_impl()\n    }\n\n    fn __eq(self, rhs: Self) -> bool {\n        self.__eq_impl(rhs)\n    }\n}\n\nimpl<let N: u32, Params> BigNum<N, Params> where Params: BigNumParamsTrait<N> {\n\n    fn from_array(limbs: [Field; N]) -> BigNum<N, Params> {\n        BigNum { limbs }\n    }\n\n    unconstrained fn __is_zero_impl(self) -> bool {\n        let mut result: bool = true;\n        for i in 0..N {\n            result = result & (self.limbs[i] == 0);\n        }\n        result\n    }\n\n    unconstrained fn __eq_impl(lhs: Self, rhs: Self) -> bool {\n        lhs.limbs == rhs.limbs\n    }\n}\n\nimpl<let N: u32, Params> BigNumInstanceTrait<BigNum<N, Params>> for BigNumInstance<N, Params> where Params: BigNumParamsTrait<N> {\n\n    fn modulus(self) -> BigNum<N, Params> {\n        BigNum { limbs: self.modulus }\n    }\n    fn __derive_from_seed<let SeedBytes: u32>(self, seed: [u8; SeedBytes]) -> BigNum<N, Params> {\n        self.__derive_from_seed_impl(seed)\n    }\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### U N C O N S T R A I N E D    F U N C T I O N S\n    // ### NOTE: these functions call unconstrained internal implementations because trait impl modifiers are not supported \n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    fn __neg(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__neg_impl(val)\n    }\n\n    fn __add(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__add_impl(lhs, rhs)\n    }\n\n    fn __sub(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__sub_impl(lhs, rhs)\n    }\n\n    fn __mul(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__mul_impl(lhs, rhs)\n    }\n\n    fn __div(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__div_impl(lhs, rhs)\n    }\n\n    fn __batch_invert<let M: u32>(self, x: [BigNum<N, Params>; M]) -> [BigNum<N, Params>; M] {\n        self.batch_invert_impl(x)\n    }\n\n    fn __invmod(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__invmod_impl(val)\n    }\n\n    fn __pow(self, val: BigNum<N, Params>, exponent: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__pow_impl(val, exponent)\n    }\n\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        self.__compute_quadratic_expression_impl(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        )\n    }\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### C O N S T R A I N E D    F U N C T I O N S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    /**\n     * @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n     * @description The expression is of the form (when evaluated as an integer relation):\n     *\n     * \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n     *\n     * The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n     *\n     * Note: this method requires the remainder term of the expression to be ZERO\n     * When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n     * This can be achieved by minimizing the number of degree-2 relations required.\n     *\n     * The expensive parts of this algorithm are the following:\n     *      1. evaluating the limb products required to compute `lhs * rhs`\n     *      2. applying range constraints to validate the result is 0\n     *\n     * Range constraints are needed for the following reason:\n     * When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n     * Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n     * Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n     * To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n     * (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n     * To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n     * We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n     * TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n     * I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n     * TODO: explain why we apply a 126-bit range check, this feels like a magic number\n     * (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n     * TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n     * \n     * @param lhs_terms a 2D array of BigNum\n     * @param lhs_flags a 2D array of sign flags\n     * @param rhs_terms a 2D array of BigNum\n     * @param rhs_flags a 2D array of sign flags\n     * @param linear_terms an array of BigNum\n     * @param linear_flags an array of sign flags\n     **/\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) {\n        // use an unconstrained function to compute the value of the quotient\n        let (quotient, _, borrow_flags): (BigNum<N, Params>, BigNum<N, Params>, [Field; 2 * N]) = unsafe {\n            self.__compute_quadratic_expression_with_borrow_flags(\n                lhs_terms,\n                lhs_flags,\n                rhs_terms,\n                rhs_flags,\n                linear_terms,\n                linear_flags\n            )\n        };\n        // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n        // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n        quotient.validate_quotient_in_range();\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        // (should be a compile-time check...unconstrained function?)\n\n        // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n        let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut t4: [Field; N] = [0; N];\n\n        // TODO: this is super nasty as it requires a multiplication\n        let double_modulus: [Field; N] = self.double_modulus;\n        for k in 0..NUM_PRODUCTS {\n            for i in 0..N {\n                for j in 0..LHS_N {\n                    // note: if is_negative is not known at comptime this is very expensive\n                    if (lhs_flags[k][j]) {\n                        t0[k][i] -= lhs_terms[k][j].limbs[i];\n                        t0[k][i] += double_modulus[i];\n                    } else {\n                        t0[k][i] += lhs_terms[k][j].limbs[i];\n                    }\n                }\n                for j in 0..RHS_N {\n                    if (rhs_flags[k][j]) {\n                        t1[k][i] -= rhs_terms[k][j].limbs[i];\n                        t1[k][i] += double_modulus[i];\n                    } else {\n                        t1[k][i] += rhs_terms[k][j].limbs[i];\n                    }\n                }\n            }\n        }\n        for i in 0..N {\n            for j in 0..ADD_N {\n                if (linear_flags[j]) {\n                    t4[i] -= linear_terms[j].limbs[i];\n                    t4[i] += double_modulus[i];\n                } else {\n                    t4[i] += linear_terms[j].limbs[i];\n                }\n            }\n        }\n\n        // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n        // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n        // so that we can ensure that no limbs will underflow for an honest Prover\n        let mut product_limbs: [Field; 2 * N] = [0; 2 * N];\n\n        // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n        // TODO: this is super nasty as it requires a multiplication\n        for i in 0..N {\n            for j in 0..N {\n                for k in 0..NUM_PRODUCTS {\n                    if k == 0 {\n                        let new_term = t0[k][i] * t1[k][j] - quotient.limbs[i] * self.modulus[j];\n                        std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                        product_limbs[i + j] += new_term;\n                    } else {\n                        product_limbs[i + j] += t0[k][i] * t1[k][j];\n                    }\n                }\n                if (NUM_PRODUCTS == 0) {\n                    product_limbs[i + j] -= quotient.limbs[i] * self.modulus[j];\n                }\n            }\n            product_limbs[i] += t4[i];\n        }\n\n        // each limb product represents the sum of 120-bit products.\n        // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n        // where no more than 64 limb products are summed together.\n        // TODO: check in unconstrained function that this condition is satisfied\n        // TODO: define trade-offs regarding the value of borrow_shift\n        // (the larger the value, the greater the range check that is required on product_limbs)\n        // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n        // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n        let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n        let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n\n        // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n        //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n        // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n        borrow_flags[0].assert_max_bit_size(1);\n        product_limbs[0] += borrow_flags[0] * borrow_shift;\n        for i in 1..(N + N - 2) {\n            borrow_flags[i].assert_max_bit_size(1);\n            product_limbs[i] += \n                (borrow_flags[i] * borrow_shift - borrow_flags[i - 1] * borrow_carry);\n        }\n        product_limbs[N + N - 2] -= borrow_flags[N + N - 3] * borrow_carry;\n\n        // Final step: Validate `product_limbs` represents the integer value `0`\n        // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n        // i.e. we need to do the following for each limb `i`:\n        //      1. validate the limb's low-120 bits equals zero\n        //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n        //      3. add the carry into limb `i+1`\n        // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n        // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n        // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n        //  where k is the number of bits in the prime field)\n        // We then add the result into the next limb and repeat.\n        let hi_shift: Field = 0x1000000000000000000000000000000;\n        let hi_downshift: Field = 1 / hi_shift;\n        for i in 0..N + N - 2 {\n            product_limbs[i] *= hi_downshift;\n            std::as_witness(product_limbs[i]);\n            product_limbs[i].assert_max_bit_size(126); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n            product_limbs[i + 1] += product_limbs[i];\n        }\n        // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n        assert(product_limbs[N + N - 2] == 0);\n    }\n\n    fn validate_in_field(self, val: BigNum<N, Params>) {\n        // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n        let mut p_minus_self: [Field; N] = [0; N];\n        let modulus: [Field; N] = self.modulus;\n        for i in 0..N {\n            p_minus_self[i] = modulus[i] - val.limbs[i];\n        }\n        let borrow_flags = unsafe {\n            self.__validate_in_field_compute_borrow_flags(val)\n        };\n        let two_pow_120: Field = 0x1000000000000000000000000000000;\n        p_minus_self[0] += borrow_flags[0] as Field * two_pow_120;\n        for i in 1..N - 1 {\n            p_minus_self[i] += (borrow_flags[i] as Field * two_pow_120 - borrow_flags[i-1] as Field);\n        }\n        p_minus_self[N - 1] -= borrow_flags[N - 2] as Field;\n        let mut compare = val;\n        compare.limbs = p_minus_self;\n        compare.validate_in_range();\n    }\n\n    /**\n     * @brief Validate self != other\n     * @details If A == B, then A == B mod N.\n     *          We can efficiently evaluate A == B mod N where N = circuit modulus\n     *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n     *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n     *          (todo: compute how tiny)\n     **/\n    fn assert_is_not_equal(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) {\n        let mut l: Field = 0;\n        let mut r: Field = 0;\n        let mut modulus_mod_n: Field = 0;\n        let mut two_pow_120: Field = 0x1000000000000000000000000000000;\n        let modulus = self.modulus;\n        for i in 0..N {\n            l *= two_pow_120;\n            r *= two_pow_120;\n            modulus_mod_n *= two_pow_120;\n            l += lhs.limbs[N - i - 1];\n            r += rhs.limbs[N - i - 1] ;\n            modulus_mod_n += modulus[N - i - 1];\n        }\n\n        // lhs can be either X mod N or P + X mod N\n        // rhs can be either Y mod N or P + Y mod N\n        // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n        let mut diff = l - r;\n        let mut target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n        assert(target != 0, \"asssert_is_not_equal fail\");\n    }\n\n    fn eq(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> bool {\n        let diff = self.sub(lhs, rhs);\n        // if self == other, possible values of `diff` will be `p` or `0`\n        // (the subtract operator constrains diff to be < ceil(log(p)))\n        // TODO: can do this more efficiently via witngen in unconstrained functions?\n        let mut is_equal_modulus: bool = true;\n        let mut is_equal_zero: bool = true;\n        for i in 0..N {\n            is_equal_modulus = is_equal_modulus & (diff.limbs[i] == self.modulus[i]);\n            is_equal_zero = is_equal_zero & (diff.limbs[i] == 0);\n        }\n        is_equal_modulus | is_equal_zero\n    }\n\n    fn neg(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, borrow_flags) = unsafe {\n            self.__neg_with_flags(val)\n        };\n        result.validate_in_range();\n        let modulus = self.modulus;\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let result_limb = modulus[0] - val.limbs[0] - result.limbs[0] + (borrow_flags[0] as Field * borrow_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = modulus[i] - val.limbs[i] - result.limbs[i] - borrow_flags[i - 1] as Field\n                + (borrow_flags[i] as Field * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = modulus[N - 1] - val.limbs[N - 1] - result.limbs[N - 1] - borrow_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n\n    fn add(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, carry_flags, borrow_flags, overflow_modulus) = unsafe {\n            self.__add_with_flags(lhs, rhs)\n        };\n        result.validate_in_range();\n        let modulus = self.modulus;\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let carry_shift = 0x1000000000000000000000000000000;\n\n        let mut subtrahend: [Field; N] = [0; N];\n        if (overflow_modulus) {\n            subtrahend = modulus;\n        }\n        let result_limb = lhs.limbs[0] + rhs.limbs[0] - subtrahend[0] - result.limbs[0]\n            + (borrow_flags[0] as Field * borrow_shift)\n            - (carry_flags[0] as Field * carry_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = lhs.limbs[i] + rhs.limbs[i]\n                - subtrahend[i]\n                - result.limbs[i]\n                - borrow_flags[i - 1] as Field\n                + carry_flags[i - 1] as Field\n                + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = lhs.limbs[N - 1] + rhs.limbs[N - 1]\n            - subtrahend[N - 1]\n            - result.limbs[N - 1]\n            - borrow_flags[N - 2] as Field\n            + carry_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n\n    // validate that lhs - rhs does not underflow i.e. lhs > rhs\n    fn validate_gt(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) {\n        // so we do... p - x - r = 0 and there might be borrow flags\n\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags) = unsafe {\n            self.__validate_gt_remainder(lhs, rhs)\n        };\n\n        result.validate_in_range();\n\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let carry_shift = 0x1000000000000000000000000000000;\n\n        let mut addend: [Field; N] = [0; N];\n        let result_limb = lhs.limbs[0] - rhs.limbs[0] + addend[0] - result.limbs[0] - 1\n            + (borrow_flags[0] as Field * borrow_shift)\n            - (carry_flags[0] as Field * carry_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = lhs.limbs[i] - rhs.limbs[i] + addend[i] - result.limbs[i] - borrow_flags[i - 1] as Field\n                + carry_flags[i - 1] as Field\n                + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = lhs.limbs[N - 1] - rhs.limbs[N - 1] + addend[N - 1]\n            - result.limbs[N - 1]\n            - borrow_flags[N - 2] as Field\n            + carry_flags[N - 2] as Field;\n        assert(result_limb == 0);\n    }\n\n    fn sub(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        // so we do... p - x - r = 0 and there might be borrow flags\n\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags, underflow) = unsafe {\n            self.__sub_with_flags(lhs, rhs)\n        };\n        result.validate_in_range();\n        let modulus = self.modulus;\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let carry_shift = 0x1000000000000000000000000000000;\n\n        let mut addend: [Field; N] = [0; N];\n        if (underflow) {\n            addend = modulus;\n        }\n        let result_limb = lhs.limbs[0] - rhs.limbs[0] + addend[0] - result.limbs[0]\n            + (borrow_flags[0] as Field * borrow_shift)\n            - (carry_flags[0] as Field * carry_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = lhs.limbs[i] - rhs.limbs[i] + addend[i] - result.limbs[i] - borrow_flags[i - 1] as Field\n                + carry_flags[i - 1] as Field\n                + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = lhs.limbs[N - 1] - rhs.limbs[N - 1] + addend[N - 1]\n            - result.limbs[N - 1]\n            - borrow_flags[N - 2] as Field\n            + carry_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        let result = self.__mul(lhs, rhs);\n        self.evaluate_quadratic_expression([[lhs]], [[false]], [[rhs]], [[false]], [result], [true]);\n        result\n    }\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        assert(\n            Params::has_multiplicative_inverse(), \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\"\n        );\n        let result = self.__div(lhs, rhs);\n        self.evaluate_quadratic_expression([[result]], [[false]], [[rhs]], [[false]], [lhs], [true]);\n        result\n    }\n\n    /**\n     * @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n     *\n     * i.e. 1. floor(numerator / divisor) = quotient\n     *      2. numerator % divisor = remainder\n     *      3. divisor * quotient + remainder = numerator\n     **/\n    fn __udiv_mod(\n        self,\n        numerator: BigNum<N, Params>,\n        divisor: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        self.__udiv_mod_impl(numerator, divisor)\n    }\n    /**\n     * @brief udiv_mod performs integer division between numerator, divisor \n     *\n     * i.e. 1. floor(numerator / divisor) = quotient\n     *      2. numerator % divisor = remainder\n     *      3. divisor * quotient + remainder = numerator\n     **/\n    fn udiv_mod(\n        self,\n        numerator: BigNum<N, Params>,\n        divisor: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        let (quotient, remainder) = BigNumInstance::__udiv_mod_impl(self, numerator, divisor);\n\n        // self / divisor = quotient rounded\n        // quotient * divisor + remainder - self = 0\n        self.evaluate_quadratic_expression(\n            [[quotient]],\n            [[false]],\n            [[divisor]],\n            [[false]],\n            [numerator, remainder],\n            [true, false]\n        );\n        // we need (remainder < divisor)\n        // implies (divisor - remainder > 0)\n        self.validate_gt(divisor, remainder);\n        (quotient, remainder)\n    }\n\n    /**\n     * @brief udiv_mod performs integer division between numerator, divisor \n     *\n     * i.e. return param is floor(numerator / divisor)\n     **/\n    fn udiv(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.udiv_mod(numerator, divisor).0\n    }\n\n    /**\n     * @brief udiv_mod performs integer modular reduction\n     *\n     * i.e. 1. numerator % divisor = return value\n     **/\n    fn umod(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.udiv_mod(numerator, divisor).1\n    }\n}\n\nimpl<let N: u32, Params> BigNumInstance<N, Params> where Params: BigNumParamsTrait<N> {\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### C  O  N  S  T  R  U  C  T  O  R  S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    fn new(modulus: [Field; N], redc_param: [Field; N]) -> Self {\n        Self {\n            redc_param,\n            modulus,\n            modulus_u60: U60Repr::from(modulus),\n            modulus_u60_x4: U60Repr::from(modulus),\n            double_modulus: get_double_modulus(modulus)\n        }\n    }\n\n    unconstrained fn __derive_from_seed_impl<let SeedBytes: u32>(self, seed: [u8; SeedBytes]) -> BigNum<N, Params> {\n        let mut rolling_seed = seed;\n\n        let mut to_reduce: [Field; 2 * N] = [0; 2 * N];\n\n        let mut double_modulus_bits = Params::modulus_bits() * 2;\n        let mut double_modulus_bytes = (double_modulus_bits) / 8 + (double_modulus_bits % 8 != 0) as u32;\n\n        let mut last_limb_bytes = double_modulus_bytes % 15;\n        if (last_limb_bytes == 0) {\n            last_limb_bytes = 15;\n        }\n        let mut last_limb_bits = double_modulus_bits % 8;\n        if (last_limb_bits == 0) {\n            last_limb_bits = 8;\n        }\n\n        for i in 0..(N - 1) {\n            let hash: [u8; 32] = std::hash::sha256(rolling_seed);\n            let mut lo: Field = 0;\n            let mut hi: Field = 0;\n            for j in 0..15 {\n                hi *= 256;\n                lo *= 256;\n\n                if (i < 2 * N - 2) {\n                    lo += hash[j + 15] as Field;\n                    hi += hash[j] as Field;\n                }\n            }\n            to_reduce[2 * i] = lo;\n            to_reduce[2 * i + 1] = hi;\n            rolling_seed[0] += 1;\n        }\n\n        {\n            let hash: [u8; 32] = std::hash::sha256(rolling_seed);\n            let mut hi: Field = 0;\n            for j in 0..(last_limb_bytes - 1) {\n                hi *= 256;\n                hi += hash[j] as Field;\n            }\n            hi *= 256;\n            let last_byte = hash[last_limb_bytes - 1];\n            let mask = (1 as u64 << (last_limb_bits) as u8) - 1;\n            let last_bits = last_byte as u64 & mask;\n            hi += last_bits as Field;\n            to_reduce[2 * N - 2] = hi;\n        }\n\n        let (_, remainder) = __barrett_reduction(\n            to_reduce,\n            self.redc_param,\n            Params::modulus_bits(),\n            self.modulus,\n            self.modulus_u60_x4\n        );\n        let mut result = BigNum::new();\n        result.limbs = remainder;\n        result\n    }\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### U N C O N S T R A I N E D    F U N C T I O N S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    unconstrained fn __validate_in_field_compute_borrow_flags(self: Self, val: BigNum<N, Params>) -> [bool; N] {\n        let mut flags: [bool; N] = [false; N];\n        let modulus: [Field; N] = self.modulus;\n        flags[0] = modulus[0].lt(val.limbs[0]);\n        for i in 1..N - 1 {\n            flags[i] = modulus[i].lt(val.limbs[i] + flags[i - 1] as Field);\n        }\n        flags\n    }\n\n    unconstrained fn __pow_impl(self, val: BigNum<N, Params>, exponent: BigNum<N, Params>) -> BigNum<N, Params> {\n        let x: U60Repr<N, 2> = U60Repr::from(exponent.limbs);\n\n        let num_bits = Params::modulus_bits() + 1;\n\n        let mut accumulator: BigNum<N, Params> = BigNum::one();\n\n        for i in 0..num_bits {\n            accumulator = self.__mul(accumulator, accumulator);\n            if x.get_bit(num_bits - i - 1) {\n                accumulator = self.__mul(accumulator, val);\n            }\n        }\n        accumulator\n    }\n\n    unconstrained fn __mul_with_quotient(\n        self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        let mut mul: [Field; 2 * N] = [0; 2 * N];\n        for i in 0..N {\n            for j in 0..N {\n                mul[i + j] += lhs.limbs[i] * rhs.limbs[j];\n            }\n        }\n        let (q, r) = __barrett_reduction(\n            split_bits::__normalize_limbs(mul, 2 * N),\n            self.redc_param,\n            Params::modulus_bits(),\n            self.modulus,\n            self.modulus_u60_x4\n        );\n\n        let mut quotient = BigNum::from_array(q);\n        let mut remainder = BigNum::from_array(r);\n        (quotient, remainder)\n    }\n\n    unconstrained fn __mul_impl(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        let (_, b) = self.__mul_with_quotient(lhs, rhs);\n        b\n    }\n\n    unconstrained fn __add_impl(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let y_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let mut z_u60 = x_u60 + y_u60;\n\n        if z_u60.gte(self.modulus_u60) {\n            z_u60 = z_u60 - self.modulus_u60;\n        }\n        let mut result = BigNum::from_array(U60Repr::into(z_u60));\n        result\n    }\n\n    /**\n     * @brief given an input `x`, compute `2p - x` (unconstrained)\n     *\n     * @description we subtract the input from double the modulus, because all constrained BigNum operations\n     *              only guarantee that the output is in the range [0, ceil(log2(p))].\n     *              I.E. the input may be larger than the modulus `p`.\n     *              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n     *              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n     *              because such a check is expensive and usually unneccesary.\n     */\n    unconstrained fn __neg_impl(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        let f: [Field; N] = val.limbs;\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(f);\n        let mut result = BigNum::from_array(U60Repr::into(self.modulus_u60 - x_u60));\n        result\n    }\n\n    unconstrained fn __add_with_flags(\n        self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, [bool; N], [bool; N], bool) {\n        let a_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let b_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n        let add_u60 = a_u60 + b_u60;\n\n        let overflow = add_u60.gte(self.modulus_u60);\n\n        let mut subtrahend_u60 : U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n        if overflow {\n            subtrahend_u60 = self.modulus_u60;\n        }\n\n        let mut carry: u64 = 0;\n        let mut carry_in: u64 = 0;\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n        let mut borrow_flags: [bool; N] = [false; N];\n        let mut carry_flags: [bool; N] = [false; N];\n        for i in 0..2 * N {\n            let mut add_term: u64 = a_u60.limbs[i] + b_u60.limbs[i] + carry_in;\n            carry = (add_term >= 0x1000000000000000) as u64;\n            add_term -= (carry as u64 * 0x1000000000000000);\n            result_u60.limbs[i] = add_term;\n            carry_in = carry as u64;\n            borrow = ((subtrahend_u60.limbs[i] + borrow_in) > result_u60.limbs[i]) as u64;\n            let sub = (borrow << 60) + result_u60.limbs[i] - subtrahend_u60.limbs[i] - borrow_in;\n            result_u60.limbs[i] = sub;\n            borrow_in = borrow;\n\n            if ((i & 1) == 1) {\n                let idx = (i - 1) / 2;\n                if (carry & borrow == 1) {\n                    carry = 0;\n                    borrow = 0;\n                }\n                carry_flags[idx] = carry as bool;\n                borrow_flags[idx] = borrow as bool;\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n\n        (result, carry_flags, borrow_flags, overflow)\n    }\n\n    unconstrained fn __validate_gt_remainder(\n        _: Self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, [bool; N], [bool; N]) {\n        let a_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let mut b_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let underflow = b_u60.gte(a_u60);\n        b_u60 += U60Repr::one();\n        assert(underflow == false, \"BigNum::validate_gt check fails\");\n        let mut addend_u60 : U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n        let mut carry: u64 = 0;\n        let mut carry_in: u64 = 0;\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n        let mut borrow_flags: [bool; N] = [false; N];\n        let mut carry_flags: [bool; N] = [false; N];\n        for i in 0..2 * N {\n            let mut add_term: u64 = a_u60.limbs[i] + addend_u60.limbs[i] + carry_in;\n            carry = (add_term >= 0x1000000000000000) as u64;\n            add_term -= (carry as u64 * 0x1000000000000000);\n            result_u60.limbs[i] = add_term;\n            carry_in = carry as u64;\n            borrow = ((b_u60.limbs[i] + borrow_in) > result_u60.limbs[i]) as u64;\n            let sub = (borrow << 60) + result_u60.limbs[i] - b_u60.limbs[i] - borrow_in;\n            result_u60.limbs[i] = sub;\n            borrow_in = borrow;\n\n            if ((i & 1) == 1) {\n                if (carry & borrow == 1) {\n                    carry = 0;\n                    borrow = 0;\n                }\n                carry_flags[i/2] = carry as bool;\n                borrow_flags[i/2] = borrow as bool;\n            }\n        }\n\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n        (result, carry_flags, borrow_flags)\n    }\n\n    unconstrained fn __sub_with_flags(\n        self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, [bool; N], [bool; N], bool) {\n        let a_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let b_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let underflow = b_u60.gte(a_u60 + U60Repr::one());\n\n        let mut addend_u60 : U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n        if underflow {\n            addend_u60 = self.modulus_u60;\n        }\n\n        let mut carry: u64 = 0;\n        let mut carry_in: u64 = 0;\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n        let mut borrow_flags: [bool; N] = [false; N];\n        let mut carry_flags: [bool; N] = [false; N];\n        for i in 0..2 * N {\n            let mut add_term: u64 = a_u60.limbs[i] + addend_u60.limbs[i] + carry_in;\n            carry = (add_term >= 0x1000000000000000) as u64;\n            add_term -= (carry as u64 * 0x1000000000000000);\n            result_u60.limbs[i] = add_term;\n            carry_in = carry as u64;\n            borrow = ((b_u60.limbs[i] + borrow_in) > result_u60.limbs[i]) as u64;\n            let sub = (borrow << 60) + result_u60.limbs[i] - b_u60.limbs[i] - borrow_in;\n            result_u60.limbs[i] = sub;\n            borrow_in = borrow;\n\n            if ((i & 1) == 1) {\n                if (carry & borrow == 1) {\n                    carry = 0;\n                    borrow = 0;\n                }\n                carry_flags[i/2] = carry as bool;\n                borrow_flags[i/2] = borrow as bool;\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n        (result, carry_flags, borrow_flags, underflow)\n    }\n\n    unconstrained fn __neg_with_flags(self, val: BigNum<N, Params>) -> (BigNum<N, Params>, [bool; N]) {\n        let f: [Field; N] = val.limbs;\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(f);\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        let mut borrow_flags: [bool; N] = [false; N];\n        for i in 0..2 * N {\n            borrow = ((x_u60.limbs[i] + borrow_in) > self.modulus_u60.limbs[i]) as u64;\n            let sub = (borrow << 60) + self.modulus_u60.limbs[i] - x_u60.limbs[i] - borrow_in;\n            result_u60.limbs[i] = sub;\n            borrow_in = borrow;\n            if ((i & 1) == 1) {\n                borrow_flags[i / 2] = borrow as bool;\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n        (result, borrow_flags)\n    }\n\n    /**\n     * @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n     * @description see `__neg` for why we use 2p instead of p\n     **/\n    unconstrained fn __sub_impl(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__add(lhs, self.__neg(rhs))\n    }\n\n    unconstrained fn __invmod_impl(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        let one: BigNum<N, Params> = BigNum::one();\n        let one_u60: U60Repr<N, 2> = U60Repr::from(one.limbs);\n        let exponent = self.modulus_u60.sub(one_u60.add(one_u60));\n        let mut result = BigNum::from_array(U60Repr::into(exponent));\n        self.__pow(val, result)\n    }\n\n    unconstrained fn batch_invert_impl<let M: u32>(self, x: [BigNum<N, Params>; M]) -> [BigNum<N, Params>; M] {\n        // TODO: ugly! Will fail if input slice is empty\n        let mut accumulator: BigNum<N, Params> = BigNum::one();\n        let mut result: [BigNum<N, Params>; M] = [BigNum::new(); M];\n        let mut temporaries: [BigNum<N, Params>] = &[];\n        for i in 0..x.len() {\n            temporaries = temporaries.push_back(accumulator);\n            if (x[i].__is_zero() == false) {\n                accumulator = self.__mul(accumulator, x[i]);\n            }\n        }\n\n        accumulator = self.__invmod(accumulator);\n        let mut T0: BigNum<N, Params> = BigNum::new();\n        T0.limbs = [0; N];\n        for i in 0..x.len() {\n            let idx = x.len() - 1 - i;\n            if (x[idx].__is_zero() == false) {\n                T0 = self.__mul(accumulator, temporaries[idx]);\n                accumulator = self.__mul(accumulator, x[idx]);\n                result[idx] = T0;\n            }\n        }\n        result\n    }\n\n    unconstrained fn batch_invert_slice_impl(self, x: [BigNum<N, Params>]) -> [BigNum<N, Params>] {\n        // TODO: ugly! Will fail if input slice is empty\n        let mut accumulator: BigNum<N, Params> = BigNum::one();\n        let mut result: [BigNum<N, Params>] = [BigNum::new()];\n        let mut temporaries: [BigNum<N, Params>] = &[];\n        for i in 0..x.len() {\n            temporaries = temporaries.push_back(accumulator);\n            if (x[i].__is_zero() == false) {\n                accumulator = self.__mul(accumulator, x[i]);\n            }\n            result = result.push_back(BigNum::new());\n        }\n\n        accumulator = self.__invmod(accumulator);\n        let mut T0: BigNum<N, Params> = BigNum::new();\n        T0.limbs = [0; N];\n        for i in 0..x.len() {\n            let idx = x.len() - 1 - i;\n            if (x[idx].__is_zero() == false) {\n                T0 = self.__mul(accumulator, temporaries[idx]);\n                accumulator = self.__mul(accumulator, x[idx]);\n                result[idx] = T0;\n            }\n        }\n        result\n    }\n\n    unconstrained fn __div_impl(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> BigNum<N, Params> {\n        let t0 = self.__invmod(divisor);\n        self.__mul(numerator, t0)\n    }\n\n    /**\n     * @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n     **/\n    // NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n    // To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n    // We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n    // Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n    // Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\n    unconstrained fn __add_linear_expression<let M: u32>(\n        self,\n        x: [BigNum<N, Params>; M],\n        flags: [bool; M]\n    ) -> ([Field; N]) {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mut sum: [Field; N] = [0; N];\n        // TODO: ugly! Will fail if input array is empty\n        let modulus2: [Field;N] = self.double_modulus;\n        for i in 0..M {\n            if (flags[i]) {\n                for j in 0..N {\n                    sum[j] = sum[j] + modulus2[j] - x[i].limbs[j];\n                    assert(x[i].limbs[j].lt(modulus2[j]));\n                }\n            } else {\n                for j in 0..N {\n                    sum[j] = sum[j] + x[i].limbs[j];\n                }\n            }\n        }\n        // problem if we normalize when used in computing quotient\n        sum\n    }\n\n    /**\n     * @brief computes the limb products of a quadratic expression\n     * @details see __compute_quadratic_expression_with_borrow_flags for full description\n     **/\n    unconstrained fn __compute_quadratic_expression_product<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> [Field; 2 * N] {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mut lhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut rhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut add: [Field; N] = [0; N];\n\n        for i in 0..NUM_PRODUCTS {\n            lhs[i] = self.__add_linear_expression(lhs_terms[i], lhs_flags[i]);\n            rhs[i] = self.__add_linear_expression(rhs_terms[i], rhs_flags[i]);\n        }\n\n        let add: [Field; N] = self.__add_linear_expression(linear_terms, linear_flags);\n\n        let mut mulout: [Field; 2 * N] = [0; 2 * N];\n\n        for i in 0..N {\n            for j in 0..N {\n                for k in 0..NUM_PRODUCTS {\n                    mulout[i + j] += (lhs[k][i] * rhs[k][j]);\n                }\n            }\n            mulout[i] += add[i];\n        }\n        mulout\n    }\n\n    /**\n     * @brief computes the quotient/remainder of a quadratic expression\n     * @details see __compute_quadratic_expression_with_borrow_flags for full description\n     **/\n    unconstrained fn __compute_quadratic_expression_impl<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mulout = self.__compute_quadratic_expression_product(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        );\n        let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout, 2 * N);\n\n        // TODO: ugly! Will fail if input slice is empty\n        let k  = Params::modulus_bits();\n\n        let (quotient, remainder) = __barrett_reduction(\n            relation_result,\n            self.redc_param,\n            k,\n            self.modulus,\n            self.modulus_u60_x4\n        );\n\n        let mut q = BigNum::from_array(quotient);\n        let mut r = BigNum::from_array(remainder);\n        (q, r)\n    }\n\n    /**\n     * @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n     * @description The expression is of the form:\n     *\n     * \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n     *\n     * The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n     *\n     * When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n     * This can be achieved by minimizing the number of degree-2 relations required.\n     *\n     * The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n     * For example, when computing the product a * b - q * p = 0, it is possible that:\n     *      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n     *      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n     * In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n     * In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n     *\n     * @param lhs_terms a 2D array of BigNum\n     * @param lhs_flags a 2D array of sign flags\n     * @param rhs_terms a 2D array of BigNum\n     * @param rhs_flags a 2D array of sign flags\n     * @param linear_terms an array of BigNum\n     * @param linear_flags an array of sign flags\n     **/\n    unconstrained fn __compute_quadratic_expression_with_borrow_flags<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BigNum<N, Params>, BigNum<N, Params>, [Field; 2 * N]) {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n\n        let mut mulout_p = self.__compute_quadratic_expression_product(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        );\n        let mut mulout_n: [Field; 2 * N] = [0; 2 * N];\n        let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout_p, 2 * N);\n\n        let modulus: [Field; N] = self.modulus;\n        let (quotient, remainder) = __barrett_reduction(\n            relation_result,\n            self.redc_param,\n            Params::modulus_bits(),\n            modulus,\n            self.modulus_u60_x4\n        );\n        assert(remainder == [0; N]);\n\n        for i in 0..N {\n            for j in 0..N {\n                mulout_n[i + j] += quotient[i] * modulus[j];\n            }\n        }\n\n        // compute borrow flags from mulout_p and mulout_n\n        let mut borrow_flags: [Field; 2 * N] = [0; 2 * N];\n        let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n        let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n        let two_pow_120: Field = 0x1000000000000000000000000000000;\n        let downshift: Field = 1 / two_pow_120;\n\n        // determine whether we need to borrow from more significant limbs.\n        // initial limb is \"simple\" comparison operation\n        // TODO: check how expensive `lt` operator is w.r.t. witness generation\n        borrow_flags[0] = mulout_p[0].lt(mulout_n[0]) as Field;\n        // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n        // and there is nothing to borrow against for the final limb.\n        let mut hi_bits = (mulout_p[0] - mulout_n[0] + (borrow_flags[0] * borrow_shift)) * downshift;\n        for i in 1..(N + N - 2) {\n            // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n            // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n            //     * downshift;\n            mulout_p[i] += hi_bits;\n\n            // determine whether negative limb values are greater than positive limb values\n            let underflow: Field = mulout_p[i].lt(mulout_n[i] + (borrow_flags[i - 1] * borrow_carry)) as Field;\n            borrow_flags[i] = underflow;\n\n            hi_bits = (mulout_p[i] - mulout_n[i] + (borrow_flags[i] * borrow_shift)\n                - (borrow_flags[i - 1] * borrow_carry)) * downshift;\n        }\n\n        let mut q = BigNum::from_array(quotient);\n        let mut r = BigNum::from_array(remainder);\n        (q, r, borrow_flags)\n    }\n\n    unconstrained fn __udiv_mod_impl(\n        _: Self,\n        numerator: BigNum<N, Params>,\n        divisor: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        let mut quotient_u60: U60Repr<N, 2> = U60Repr::from([0; N]);\n        let mut remainder_u60: U60Repr<N, 2> = U60Repr::from(numerator.limbs);\n\n        let mut divisor_u60: U60Repr<N, 2> = U60Repr::from(divisor.limbs);\n        let b = divisor_u60;\n\n        let mut bit_difference = remainder_u60.get_msb() - divisor_u60.get_msb();\n\n        let mut accumulator_u60: U60Repr<N, 2> = U60Repr::one();\n        divisor_u60 = divisor_u60.shl(bit_difference);\n        accumulator_u60 = accumulator_u60.shl(bit_difference);\n\n        if (divisor_u60.gte(remainder_u60 + U60Repr::one())) {\n            divisor_u60.shr1();\n            accumulator_u60.shr1();\n        }\n        for _ in 0..(N * 120) {\n            if (remainder_u60.gte(b) == false) {\n                break;\n            }\n\n            // we've shunted 'divisor' up to have the same bit length as our remainder.\n            // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n            if (remainder_u60.gte(divisor_u60)) {\n                remainder_u60 -= divisor_u60;\n                // we can use OR here instead of +, as\n                // accumulator is always a nice power of two\n                quotient_u60 = quotient_u60 + accumulator_u60;\n            }\n            divisor_u60.shr1(); // >>= 1;\n            accumulator_u60.shr1(); //  >>= 1;\n        }\n\n        (\n            BigNum::from_array(U60Repr::into(quotient_u60)), BigNum::from_array(U60Repr::into(remainder_u60))\n        )\n    }\n}\n\nfn get_double_modulus<let N: u32>(modulus: [Field; N]) -> [Field; N] {\n    let TWO_POW_120: Field = 0x1000000000000000000000000000000;\n    let m: U60Repr<N, 2> = U60Repr::from(modulus);\n    let mut result: [Field; N] = U60Repr::into(m + m);\n\n    result[0] += TWO_POW_120;\n    for i in 1..N - 1 {\n        result[i] += (TWO_POW_120 - 1);\n    }\n    result[N - 1] -= 1;\n    result\n}\n\nunconstrained fn __barrett_reduction<let N: u32>(\n    x: [Field; 2 * N],\n    redc_param: [Field; N],\n    k: u32,\n    modulus: [Field; N],\n    modulus_u60: U60Repr<N, 4>\n) -> ([Field; N], [Field; N]) {\n    let mut mulout: [Field; 3 * N]  = [0; 3 * N];\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout[i + j] += x[i] * redc_param[j];\n        }\n    }\n    mulout = split_bits::__normalize_limbs(mulout, 3 * N - 1);\n    let mulout_u60: U60Repr<N, 6> = U60Repr::new(mulout);\n    let mut quotient_u60 = mulout_u60.shr((k + k));\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient_full: [Field; 3 * N] = quotient_u60.into_field_array();\n    let mut partial_quotient: [Field; 2 * N] = [0; 2 * N];\n    for i in 0..2 * N {\n        partial_quotient[i] = partial_quotient_full[i];\n    }\n    // quotient_mul_modulus can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus: [Field; 2 * N]  = [0; 2 * N];\n    let mut quotient_mul_modulus_normalized: [Field; 2 * N]  = [0; 2 * N];\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus[i + j] += partial_quotient[i] * modulus[j];\n        }\n    }\n\n    for i in 0..(N + N) {\n        let (lo, hi) = split_bits::split_120_bits(quotient_mul_modulus[i]);\n        quotient_mul_modulus_normalized[i] = lo;\n        // TODO: what is faster, leaving this if statement in or out?\n        // (array is size-1 too large so we can tolerate adding 0 into max element)\n        if (i + 1 < N + N) {\n            quotient_mul_modulus[i + 1] += hi;\n        }\n    }\n    let quotient_mul_modulus_u60: U60Repr<N, 4> = U60Repr::new(quotient_mul_modulus_normalized);\n\n    let x_u60 : U60Repr<N, 4> = U60Repr::new(x);\n    let mut remainder_u60 = x_u60 - quotient_mul_modulus_u60;\n\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    } else {}\n\n    let q: [Field; N] = U60Repr::into(quotient_u60);\n    let r: [Field; N] = U60Repr::into(remainder_u60);\n\n    (q, r)\n}\n"},"390":{"path":"/Users/envoy1084/Projects/Core/ab2/Aztec-Passport/packages/l2-contracts/crates/passport/src/main.nr","source":"pub mod service;\n\nuse dep::aztec::macros::aztec;\n\npub global SCALE: u64 = 1000000;\n\n#[aztec]\npub contract AztecPassport {\n    use aztec::{\n        prelude::{AztecAddress, PublicMutable, Map, SharedMutable},\n        macros::{storage::storage, functions::{initializer, public, private, view}},\n        keys::getters::get_public_keys\n    };\n\n    use dep::value_note::{balance_utils::get_balance};\n\n    use dep::easy_private_state::EasyPrivateUint;\n    use crate::service::Service;\n\n    pub global SCALE: u64 = 1000000;\n\n    #[storage]\n    struct Storage<Context> {\n        // Admin of Contract\n        admin: PublicMutable<AztecAddress, Context>,\n        // Track Count of Total Services\n        total_services: SharedMutable<u64, 1, Context>,\n        // Service ID => Service\n        services: Map<u64, PublicMutable<Service, Context>, Context>,\n        // Service Address -> ID\n        service_indexes: Map<AztecAddress, SharedMutable<u64, 1, Context>, Context>,\n        //  Address => Service ID => verified(boolean)\n        scores: Map<AztecAddress, Map<u64, EasyPrivateUint<Context>, Context>, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(_admin: AztecAddress) {\n        assert(!_admin.is_zero(), \"Aztec Passport: Invalid Address\");\n        storage.admin.write(_admin);\n    }\n\n    #[public]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"Aztec Passport: Unauthorized Admin Change\");\n        storage.admin.write(new_admin);\n    }\n\n    #[public]\n    #[view]\n    fn get_admin_public() -> Field {\n        storage.admin.read().to_field()\n    }\n\n    #[public]\n    fn add_service(address: AztecAddress, weight: u64, base_score: u64, max_score: u64) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"Aztec Passport: Only Admin\");\n        let service_id = storage.total_services.get_current_value_in_public();\n        storage.services.at(service_id).write(Service { address, weight, base_score, max_score });\n        storage.service_indexes.at(address).schedule_value_change(service_id);\n        storage.total_services.schedule_value_change(service_id + 1);\n    }\n\n    #[public]\n    #[view]\n    fn get_service(service_id: u64) -> Service {\n        storage.services.at(service_id).read()\n    }\n\n    #[public]\n    #[view]\n    fn get_total_services() -> u64 {\n        storage.total_services.get_current_value_in_public()\n    }\n\n    #[private]\n    #[view]\n    fn get_total_services_private() -> u64 {\n        storage.total_services.get_current_value_in_private()\n    }\n\n    #[public]\n    #[view]\n    fn get_service_index(address: AztecAddress) -> u64 {\n        storage.service_indexes.at(address).get_current_value_in_public()\n    }\n\n    #[private]\n    #[view]\n    fn get_service_index_private(address: AztecAddress) -> u64 {\n        storage.service_indexes.at(address).get_current_value_in_private()\n    }\n\n    unconstrained fn is_verified(address: AztecAddress, service_id: u64) -> bool {\n        let res = storage.scores.at(address).at(service_id).set;\n        let balance = get_balance(res);\n        balance as u32 >= 1\n    }\n\n    #[private]\n    fn verify_service(address: AztecAddress, service_id: u64, service_address: AztecAddress) {\n        assert(service_address.eq(context.msg_sender()), \"Aztec Passport: Only Service\");\n        let res = storage.service_indexes.at(service_address).get_current_value_in_private();\n        assert(res == service_id, \"Aztec Passport: Invalid Service\");\n        storage.scores.at(address).at(service_id).add(1, address, address);\n    }\n\n    unconstrained fn get_total_score(address: AztecAddress) -> u64 {\n        let mut total_weight: u64 = 0;\n        let mut total_base_contribution: u64 = 0;\n        let mut total_max_contribution: u64 = 0;\n        let mut verified_count: u64 = 0;\n\n        let total_services = storage.total_services.get_current_value_in_unconstrained();\n\n        for i in 0..total_services {\n            let service = storage.services.at(i).read();\n            total_weight += service.weight;\n            let res = storage.scores.at(address).at(i).set;\n            let balance = get_balance(res);\n            let verified = balance as u32 >= 1;\n            if (verified) {\n                total_base_contribution += (service.base_score * service.weight) / SCALE;\n                total_max_contribution += (service.max_score * service.weight) / SCALE;\n                verified_count += 1;\n            }\n        }\n\n        if (verified_count == 0) {\n            0\n        }\n\n        let diminishing_factor = verified_count * verified_count / (total_services * total_services);\n        let adjusted_max_score = total_max_contribution * diminishing_factor;\n        let bonus_multiplier = (verified_count * SCALE) / total_services;\n        let final_score = (total_base_contribution + adjusted_max_score) * bonus_multiplier / SCALE;\n\n        final_score\n    }\n}\n"},"392":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/address-note/src/address_note.nr","source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext, macros::notes::note\n};\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[note]\npub struct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NullifiableNote for AddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n"},"399":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/value-note/src/value_note.nr","source":"use dep::aztec::{\n    protocol_types::{traits::Serialize, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note,\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext\n};\n\nglobal VALUE_NOTE_LEN: u32 = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n// ValueNote is used as fn parameter in the Claim contract, so it has to implement the Serialize trait.\n// It is important that the order of these annotations is preserved so that derive(Serialize) runs AFTER the note macro, which injects the note header.\n#[note]\n#[derive(Serialize)]\npub struct ValueNote {\n    value: Field,\n   // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NullifiableNote for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        let header = NoteHeader::empty();\n        ValueNote { value, npk_m_hash, randomness, header }\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"6":{"path":"std/cmp.nr","source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(s, quote { Eq }, signature, for_each_field, quote { & }, body)\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v1 } else { v2 }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v2 } else { v1 }\n}\n\nmod cmp_tests {\n    use crate::cmp::{min, max};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"},"68":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (unsafe {\n                        U128::uconstrained_check_is_upper_ascii(ascii) as u8\n                    });\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        }) as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c: [u8; 17]= b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        unsafe {\n            let (q,r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        unsafe {\n            let (c,d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        unsafe {\n            let (c, d)= a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"70":{"path":"/Users/envoy1084/Projects/Core/ab2/Aztec-Passport/packages/l2-contracts/crates/modules/linkedin_module/src/main.nr","source":"use dep::aztec::macros::aztec;\n\n#[aztec]\ncontract LinkedinModule {\n    use aztec::{\n        prelude::{AztecAddress, PublicMutable, SharedMutable},\n        macros::{storage::storage, functions::{initializer, public, private, view}}\n    };\n\n    use dep::passport::AztecPassport;\n\n    #[storage]\n    struct Storage<Context> {\n        // Admin of Contract\n        admin: PublicMutable<AztecAddress, Context>,\n        // Passport Contract Address\n        passport_address: SharedMutable<AztecAddress, 1, Context>,\n    }\n\n    pub global MAX_EMAIL_HEADER_LENGTH: u32 = 768;\n\n    use dep::noir_social_verify::linkedin::verify_linkedin;\n    use dep::noir_social_verify::zkemail::{KEY_LIMBS_2048, dkim::RSAPubkey, Sequence};\n\n    #[public]\n    #[initializer]\n    fn constructor(_admin: AztecAddress) {\n        assert(!_admin.is_zero(), \"Aztec Passport: Invalid Address\");\n        storage.admin.write(_admin);\n    }\n\n    #[public]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"Aztec Passport: Unauthorized Admin Change\");\n        storage.admin.write(new_admin);\n    }\n\n    #[public]\n    #[view]\n    fn get_admin_public() -> Field {\n        storage.admin.read().to_field()\n    }\n\n    #[public]\n    fn is_admin() -> bool {\n        storage.admin.read().eq(context.msg_sender())\n    }\n\n    #[public]\n    fn get_passport_address() -> AztecAddress {\n        storage.passport_address.get_current_value_in_public()\n    }\n\n    #[public]\n    fn set_passport_address(_passport_address: AztecAddress) {\n        storage.passport_address.schedule_value_change(_passport_address);\n    }\n\n    #[private]\n    fn verify(\n        address: AztecAddress,\n        header_array: [u8; MAX_EMAIL_HEADER_LENGTH],\n        header_length: u32,\n        pubkey_modulus: [Field; KEY_LIMBS_2048],\n        pubkey_redc: [Field; KEY_LIMBS_2048],\n        signature: [Field; KEY_LIMBS_2048],\n        from_header_sequence_index: u32,\n        from_header_sequence_length: u32,\n        from_address_sequence_index: u32,\n        from_address_sequence_length: u32,\n        to_header_sequence_index: u32,\n        to_header_sequence_length: u32,\n        to_address_sequence_index: u32,\n        to_address_sequence_length: u32,\n        email_array: [u8; 320]\n    ) {\n        let passport_address = storage.passport_address.get_current_value_in_private();\n\n        let expected_email: BoundedVec<u8, 320> = BoundedVec::from(email_array);\n\n        let mut header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH> = BoundedVec::from(header_array);\n        header.len = header_length;\n        let pubkey = RSAPubkey { modulus: pubkey_modulus, redc: pubkey_redc };\n\n        let from_address_sequence = Sequence { index: from_address_sequence_index, length: from_address_sequence_length };\n\n        let to_address_sequence = Sequence { index: to_address_sequence_index, length: to_address_sequence_length };\n\n        let from_header_sequence = Sequence { index: from_header_sequence_index, length: from_header_sequence_length };\n\n        let to_header_sequence = Sequence { index: to_header_sequence_index, length: to_header_sequence_length };\n\n        let extracted_email = verify_linkedin(\n            header,\n            pubkey,\n            signature,\n            from_header_sequence,\n            from_address_sequence,\n            to_header_sequence,\n            to_address_sequence\n        );\n\n        assert(expected_email.is_eq(extracted_email.storage));\n\n        let index = AztecPassport::at(passport_address).get_service_index_private(context.this_address()).view(&mut context);\n        let _ = AztecPassport::at(passport_address).verify_service(address, index, context.this_address()).call(&mut context);\n    }\n}\n"},"77":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\nunconstrained pub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"86":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe {\n            unpack_returns(self.packed_returns)\n        };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"90":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](()) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"92":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"93":{"path":"/Users/envoy1084/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"}}}