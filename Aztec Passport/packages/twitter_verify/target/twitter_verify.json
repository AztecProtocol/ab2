{"noir_version":"0.35.0+2a0d211b92d002fa75855d4ba27267f8892dd52c","hash":2326035802842512488,"abi":{"parameters":[{"name":"body_hash_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"header","type":{"kind":"array","length":576,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"body","type":{"kind":"array","length":16384,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pubkey_modulus_limbs","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"redc_params_limbs","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"signature","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"padded_recipient_local","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"recipient_local_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"","file_map":{"6":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(s, quote { Eq }, signature, for_each_field, quote { & }, body)\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v1 } else { v2 }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v2 } else { v1 }\n}\n\nmod cmp_tests {\n    use crate::cmp::{min, max};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"25":{"source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"26":{"source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n","path":"std/field/mod.nr"},"29":{"source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    pedersen_hash_with_separator_noir(input, separator)\n}\n\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator_noir(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n","path":"std/hash/mod.nr"},"35":{"source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u32, msg_start: u32) -> ([u8; 64], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if crate::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..BLOCK_SIZE {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..BLOCK_SIZE {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; 64],\n    mut msg_byte_ptr: u32\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; BLOCK_SIZE], msg_byte_ptr: u32, message_size: u32) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d, 0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0, 0x8f, 0xfe, 0x73, 0x2b\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94, 24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154, 60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213, 165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97, 103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186, 55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253, 179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9, 236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214, 72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107, 218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198, 149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126, 32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36, 137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59, 245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97, 3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180, 170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216, 116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70, 86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246, 215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193, 104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74, 134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210, 188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210, 186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69, 79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22, 121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175, 169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53, 101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200, 157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86, 119, 30, 63, 129, 143, 32, 96\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n","path":"std/hash/sha256.nr"},"37":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod schnorr;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod eddsa;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod ec;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod bigint;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32\n) {\n    crate::assert_constant(proof_type);\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(x: Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(x: T) -> Field {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y))\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\n","path":"std/lib.nr"},"70":{"source":"use crate::{BODY_HASH_BASE64_LENGTH, EMAIL_HEADER_LENGTH, MAX_ADDRESS_LOCAL_LENGTH, TO_DOMAIN_LENGTH};\nuse dep::string_search::{StringBody, SubString, StringBody512, SubString32, SubString64, StringBody1024};\n\n/**\n * Decodes a base64 encoded body hash into a 32 byte sha256 hash of the body\n * @notice from https://github.com/richardliang/noir-rsa/blob/main/crates/rsa-biguint/src/lib.nr\n\n * @param encoded - the base 64 encoded body hash\n * @returns the decoded sha256 hash\n */\npub fn bodyhash_base64_decode(encoded: [u8; BODY_HASH_BASE64_LENGTH]) -> [u8; 32] {\n    let mut total_bits = [0 as u1; BODY_HASH_BASE64_LENGTH * 6];\n    for i in 0..BODY_HASH_BASE64_LENGTH {\n        let translate = base64_lookup(encoded[i] as u8);\n        // Store as big endian\n        let translate_bits = (translate as Field).to_be_bits();\n        for j in 0..6 {\n            total_bits[i * 6 + j] = translate_bits[j];\n        }\n    }\n\n    // Since we're returning the SHA256 hash, only need first 32 bytes (=256 bits)\n    let mut output = [0 as u8; 32];\n    for i in 0..32 {\n        for j in 0..8 {\n            // Convert from big endian back to little endian\n            output[i] |= (total_bits[i * 8 + j] as u8) << (7 - j) as u8;\n        }\n    }\n\n    output\n}\n\n/**\n * Lookup for the base 64 encoding\n * @todo: replace with noir_lang base64 lib\n *\n * @param input - the base 64 encoded character\n * @returns the decoded value\n */\nfn base64_lookup(input: u8) -> u8 {\n    // A-Z: 65-90\n    if input >= 65 & input <= 90 {\n        input - 65\n    } else if input >= 97 & input <= 122 {\n        // a-z: 97-122\n        input - 71\n    } else if input >= 48 & input <= 57 {\n        // 0-9: 48-57\n        input + 4\n    } else if input == 43 {\n        // +\n        62\n    } else if input == 47 {\n        // /\n        63\n    } else {\n        // =\n        0\n    }\n}\n\n/**\n * Extracts the base 64 encoded body hash from an email header\n *\n * @param header - the email header as validated in the DKIM signature\n * @param index - the asserted index to find the body hash at\n * @returns the base 64 encoded body hash\n */\npub fn get_body_hash(header: [u8; EMAIL_HEADER_LENGTH], index: u32) -> [u8; BODY_HASH_BASE64_LENGTH] {\n    let mut body_hash = [0 as u8; BODY_HASH_BASE64_LENGTH];\n    for i in 0..BODY_HASH_BASE64_LENGTH {\n        body_hash[i] = header[index + i];\n    }\n    body_hash\n}\n\n/**\n * Attempt to find the index of the \"to\" field in the email header to eventually extract recipient domain\n *\n * @param header - the entire email header to search through\n * @param padded_recipient_local - the username (local part) of the recipient email address\n * @param recipient_local_length - the length of the username (local part) of the recipient email address\n * @returns (true/ false if found, index of start in the header)\n */\npub fn find_to_index(\n    header: [u8; EMAIL_HEADER_LENGTH],\n    padded_recipient_local: [u8; MAX_ADDRESS_LOCAL_LENGTH],\n    recipient_local_length: u32\n) -> (bool, u32) {\n    // init the search params\n    let needle_text_init: [u8; 5] = \"from:\".as_bytes();\n    let needle_start: SubString32 = SubString::new(needle_text_init, needle_text_init.len());\n    let needle_end: SubString64 = SubString::new(padded_recipient_local, recipient_local_length);\n    let needle = needle_start.concat_into(needle_end);\n\n    // init the search domain\n    let haystack: StringBody1024 = StringBody::new(header, EMAIL_HEADER_LENGTH);\n\n    // find the index of the position\n    haystack.substring_match(needle)\n}\n\n/**\n * Extracts the recipient domain from the email header given index of to field + expected recipient local length\n *\n * @param header - the email header to search through\n * @param recipient_local_length - the length of the username (local part) of the recipient email address\n * @param index - the index of the \"to\" field in the email header\n * @returns the supposed recipient domain\n */\npub fn extract_expected_recipient_domain(\n    header: [u8; EMAIL_HEADER_LENGTH],\n    recipient_local_length: u32,\n    index: u32\n) -> [u8; TO_DOMAIN_LENGTH] {\n    let mut recipient_domain = [0 as u8; TO_DOMAIN_LENGTH];\n    for i in 0..TO_DOMAIN_LENGTH {\n        // iterator + found index starting the to search + length of recipient local address + len(from:)\n        // should start at `@`\n        recipient_domain[i] = header[i + index + recipient_local_length + 5];\n    }\n    recipient_domain\n}\n","path":"/Users/envoy1084/Projects/Core/ab2/Aztec Passport/packages/twitter_verify/src/utils.nr"},"71":{"source":"use dep::rsa::bignum::fields::Params2048;\nuse dep::rsa::bignum::runtime_bignum::BigNumInstance;\nuse dep::rsa::types::RSA;\nuse dep::rsa::bignum::BigNum;\n\nuse dep::std::hash::{sha256_var, pedersen_hash};\n\nmod utils;\n\ntype BN2048 = BigNum<18, Params2048>;\ntype RSA2048 = RSA<BN2048, BigNumInstance<18, Params2048>, 256>;\n\nglobal BODY_HASH_BASE64_LENGTH: u32 = 44;\nglobal EMAIL_HEADER_LENGTH: u32 =576;\nglobal EMAIL_BODY_LENGTH: u32 = 16384;\nglobal MAX_ADDRESS_LOCAL_LENGTH = 64; // the max part before @ in the email address\nglobal TO_DOMAIN_LENGTH: u32 = 7;\nglobal TO_DOMAIN: [u8; TO_DOMAIN_LENGTH] = \"@x.com>\".as_bytes(); // example of string search\n\nfn main(\n    body_hash_index: u32,\n    header: [u8; EMAIL_HEADER_LENGTH],\n    body: [u8; EMAIL_BODY_LENGTH],\n    pubkey_modulus_limbs: [Field; 18],\n    redc_params_limbs: [Field; 18],\n    signature: [Field; 18],\n    padded_recipient_local: [u8; MAX_ADDRESS_LOCAL_LENGTH],\n    recipient_local_length: u32\n) -> pub Field {\n    // instantiate the BNInstance for the pubkey\n    let pubkey: BigNumInstance<18, Params2048> = BigNumInstance::new(pubkey_modulus_limbs, redc_params_limbs);\n\n    // hash the header\n    let header_hash: [u8; 32] = sha256_var(header, EMAIL_HEADER_LENGTH as u64);\n\n    let signature: BN2048 = BigNum::from_array(signature);\n    // // verify the DKIM signature over the header\n    let rsa: RSA2048 = RSA {};\n    let verified: bool = rsa.verify_sha256_pkcs1v15(pubkey, header_hash, signature, 65537);\n    println(verified);\n\n    // get the body hash from the header and base64 decode it\n    // let body_hash = utils::get_body_hash(header, body_hash_index);\n    // println(body_hash);\n    // let decoded_body_hash = utils::bodyhash_base64_decode(body_hash);\n    // println(decoded_body_hash);\n\n    // // hash the body\n    // let body_hash: [u8; 32] = sha256(body);\n\n    // // verify the body hash\n    // assert(body_hash == decoded_body_hash);\n\n    // string search for the asserted recipient domain\n    let (found, index) = utils::find_to_index(header, padded_recipient_local, recipient_local_length);\n    assert(found);\n\n    // extract the recipient domain\n    let recipient_domain = utils::extract_expected_recipient_domain(header, recipient_local_length, index);\n    assert(recipient_domain == TO_DOMAIN);\n\n    // hash the pubkey modulus to get a single field element for pub output\n    // @notice: if your usecase does not need to minimize verifier work, just emit all limbs to save 16k gates\n    pedersen_hash(pubkey_modulus_limbs)\n}\n\n#[test]\nfn test_zkemail() {\n    // make padded username\n    let username = \"X <info\".as_bytes();\n    let mut padded_username: [u8; 64] = [0; 64];\n    for i in 0..username.len() {\n        padded_username[i] = username[i];\n    }\n    for i in username.len()..MAX_ADDRESS_LOCAL_LENGTH {\n        padded_username[i] = 0;\n    }\n\n    let body_hash_index: u32 = 425;\n    let header: [u8; EMAIL_HEADER_LENGTH] = [\n        100, 97, 116, 101, 58, 77, 111, 110, 44, 32, 49, 52, 32, 79, 99, 116, 32, 50,\n        48, 50, 52, 32, 48, 52, 58, 52, 49, 58, 52, 48, 32, 43, 48, 48, 48, 48, 13,\n        10, 102, 114, 111, 109, 58, 88, 32, 60, 105, 110, 102, 111, 64, 120, 46, 99,\n        111, 109, 62, 13, 10, 116, 111, 58, 61, 63, 85, 84, 70, 45, 56, 63, 81, 63,\n        86, 101, 100, 97, 110, 116, 95, 61, 55, 67, 95, 101, 110, 118, 111, 121, 49,\n        48, 56, 52, 61, 50, 69, 101, 116, 104, 47, 108, 101, 110, 115, 95, 61, 70, 48,\n        61, 57, 70, 61, 56, 67, 61, 66, 49, 63, 61, 32, 60, 118, 101, 100, 97, 110,\n        116, 99, 104, 97, 105, 110, 97, 110, 105, 48, 48, 55, 64, 103, 109, 97, 105,\n        108, 46, 99, 111, 109, 62, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 80,\n        97, 115, 115, 119, 111, 114, 100, 32, 114, 101, 115, 101, 116, 32, 114, 101,\n        113, 117, 101, 115, 116, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115,\n        105, 111, 110, 58, 49, 46, 48, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45,\n        116, 121, 112, 101, 58, 109, 117, 108, 116, 105, 112, 97, 114, 116, 47, 97,\n        108, 116, 101, 114, 110, 97, 116, 105, 118, 101, 59, 32, 98, 111, 117, 110,\n        100, 97, 114, 121, 61, 34, 45, 45, 45, 45, 61, 95, 80, 97, 114, 116, 95, 57,\n        57, 48, 51, 53, 56, 95, 51, 49, 53, 56, 49, 50, 54, 55, 56, 46, 49, 55, 50,\n        56, 56, 56, 48, 57, 48, 48, 52, 51, 48, 34, 13, 10, 109, 101, 115, 115, 97,\n        103, 101, 45, 105, 100, 58, 60, 68, 66, 46, 67, 49, 46, 49, 52, 57, 57, 54,\n        46, 52, 48, 49, 65, 67, 48, 55, 54, 64, 120, 46, 99, 111, 109, 62, 13, 10,\n        100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118,\n        61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32,\n        99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101,\n        100, 59, 32, 100, 61, 120, 46, 99, 111, 109, 59, 32, 115, 61, 100, 107, 105,\n        109, 45, 50, 48, 50, 51, 48, 56, 59, 32, 116, 61, 49, 55, 50, 56, 56, 56, 48,\n        57, 48, 48, 59, 32, 98, 104, 61, 90, 67, 105, 113, 52, 110, 101, 81, 99, 57,\n        84, 101, 122, 49, 122, 99, 114, 119, 80, 81, 54, 56, 74, 43, 81, 84, 100, 101,\n        122, 99, 87, 71, 88, 52, 110, 70, 90, 112, 101, 81, 68, 112, 69, 61, 59, 32,\n        104, 61, 68, 97, 116, 101, 58, 70, 114, 111, 109, 58, 84, 111, 58, 83, 117,\n        98, 106, 101, 99, 116, 58, 77, 73, 77, 69, 45, 86, 101, 114, 115, 105, 111,\n        110, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 101,\n        115, 115, 97, 103, 101, 45, 73, 68, 59, 32, 98, 61, 128, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 16, 176\n    ];\n    let body: [u8; EMAIL_BODY_LENGTH] = [\n        45, 45, 45, 45, 45, 45, 61, 95, 80, 97, 114, 116, 95, 57, 57, 48, 51, 53, 56,\n        95, 51, 49, 53, 56, 49, 50, 54, 55, 56, 46, 49, 55, 50, 56, 56, 56, 48, 57,\n        48, 48, 52, 51, 48, 13, 10, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121,\n        112, 101, 58, 32, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99,\n        104, 97, 114, 115, 101, 116, 61, 85, 84, 70, 45, 56, 13, 10, 67, 111, 110,\n        116, 101, 110, 116, 45, 84, 114, 97, 110, 115, 102, 101, 114, 45, 69, 110, 99,\n        111, 100, 105, 110, 103, 58, 32, 55, 98, 105, 116, 13, 10, 13, 10, 88, 13, 10,\n        13, 10, 82, 101, 115, 101, 116, 32, 121, 111, 117, 114, 32, 112, 97, 115, 115,\n        119, 111, 114, 100, 63, 13, 10, 13, 10, 73, 102, 32, 121, 111, 117, 32, 114,\n        101, 113, 117, 101, 115, 116, 101, 100, 32, 97, 32, 112, 97, 115, 115, 119,\n        111, 114, 100, 32, 114, 101, 115, 101, 116, 32, 102, 111, 114, 32, 69, 110,\n        118, 111, 121, 95, 49, 48, 56, 52, 44, 32, 117, 115, 101, 32, 116, 104, 101,\n        32, 99, 111, 110, 102, 105, 114, 109, 97, 116, 105, 111, 110, 32, 99, 111,\n        100, 101, 32, 98, 101, 108, 111, 119, 32, 116, 111, 32, 99, 111, 109, 112,\n        108, 101, 116, 101, 32, 116, 104, 101, 32, 112, 114, 111, 99, 101, 115, 115,\n        46, 32, 73, 102, 32, 121, 111, 117, 32, 100, 105, 100, 110, 39, 116, 32, 109,\n        97, 107, 101, 32, 116, 104, 105, 115, 32, 114, 101, 113, 117, 101, 115, 116,\n        44, 32, 105, 103, 110, 111, 114, 101, 32, 116, 104, 105, 115, 32, 101, 109,\n        97, 105, 108, 46, 13, 10, 13, 10, 62, 32, 119, 52, 53, 54, 53, 104, 56, 57,\n        13, 10, 13, 10, 13, 10, 71, 101, 116, 116, 105, 110, 103, 32, 97, 32, 108,\n        111, 116, 32, 111, 102, 32, 112, 97, 115, 115, 119, 111, 114, 100, 32, 114,\n        101, 115, 101, 116, 32, 101, 109, 97, 105, 108, 115, 63, 13, 10, 89, 111, 117,\n        32, 99, 97, 110, 32, 99, 104, 97, 110, 103, 101, 32, 121, 111, 117, 114, 32,\n        97, 99, 99, 111, 117, 110, 116, 32, 115, 101, 116, 116, 105, 110, 103, 115,\n        32, 116, 111, 32, 114, 101, 113, 117, 105, 114, 101, 32, 112, 101, 114, 115,\n        111, 110, 97, 108, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110,\n        32, 116, 111, 32, 114, 101, 115, 101, 116, 32, 121, 111, 117, 114, 32, 112,\n        97, 115, 115, 119, 111, 114, 100, 46, 13, 10, 13, 10, 97, 99, 99, 111, 117,\n        110, 116, 32, 115, 101, 116, 116, 105, 110, 103, 115, 13, 10, 62, 32, 104,\n        116, 116, 112, 115, 58, 47, 47, 116, 119, 105, 116, 116, 101, 114, 46, 99,\n        111, 109, 47, 115, 101, 116, 116, 105, 110, 103, 115, 47, 115, 101, 99, 117,\n        114, 105, 116, 121, 13, 10, 13, 10, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 13, 10, 72, 101, 108,\n        112, 13, 10, 62, 32, 104, 116, 116, 112, 115, 58, 47, 47, 115, 117, 112, 112,\n        111, 114, 116, 46, 116, 119, 105, 116, 116, 101, 114, 46, 99, 111, 109, 47,\n        97, 114, 116, 105, 99, 108, 101, 115, 47, 49, 52, 54, 54, 51, 13, 10, 13, 10,\n        78, 111, 116, 32, 109, 121, 32, 97, 99, 99, 111, 117, 110, 116, 13, 10, 62,\n        32, 104, 116, 116, 112, 115, 58, 47, 47, 116, 119, 105, 116, 116, 101, 114,\n        46, 99, 111, 109, 47, 97, 99, 99, 111, 117, 110, 116, 47, 110, 111, 116, 95,\n        109, 121, 95, 97, 99, 99, 111, 117, 110, 116, 47, 49, 50, 53, 55, 52, 51, 53,\n        54, 50, 49, 55, 55, 49, 49, 52, 49, 49, 50, 48, 47, 65, 65, 53, 55, 72, 45,\n        65, 68, 57, 71, 72, 45, 49, 55, 50, 56, 56, 56, 63, 117, 116, 61, 49, 38, 97,\n        109, 112, 59, 99, 110, 61, 99, 71, 70, 122, 99, 51, 100, 118, 99, 109, 82,\n        102, 99, 109, 86, 122, 90, 88, 82, 102, 99, 71, 108, 117, 88, 50, 74, 104, 99,\n        50, 86, 107, 88, 50, 86, 116, 89, 87, 108, 115, 13, 10, 13, 10, 69, 109, 97,\n        105, 108, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 116, 105, 112, 115,\n        13, 10, 62, 32, 104, 116, 116, 112, 115, 58, 47, 47, 104, 101, 108, 112, 46,\n        120, 46, 99, 111, 109, 47, 115, 97, 102, 101, 116, 121, 45, 97, 110, 100, 45,\n        115, 101, 99, 117, 114, 105, 116, 121, 47, 102, 97, 107, 101, 45, 120, 45,\n        101, 109, 97, 105, 108, 115, 13, 10, 13, 10, 88, 32, 67, 111, 114, 112, 46,\n        32, 49, 51, 53, 53, 32, 77, 97, 114, 107, 101, 116, 32, 83, 116, 114, 101,\n        101, 116, 44, 32, 83, 117, 105, 116, 101, 32, 57, 48, 48, 32, 83, 97, 110, 32,\n        70, 114, 97, 110, 99, 105, 115, 99, 111, 44, 32, 67, 65, 32, 57, 52, 49, 48,\n        51, 13, 10, 13, 10, 45, 45, 45, 45, 45, 45, 61, 95, 80, 97, 114, 116, 95, 57,\n        57, 48, 51, 53, 56, 95, 51, 49, 53, 56, 49, 50, 54, 55, 56, 46, 49, 55, 50,\n        56, 56, 56, 48, 57, 48, 48, 52, 51, 48, 13, 10, 67, 111, 110, 116, 101, 110,\n        116, 45, 84, 121, 112, 101, 58, 32, 116, 101, 120, 116, 47, 104, 116, 109,\n        108, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 85, 84, 70, 45, 56, 13, 10,\n        67, 111, 110, 116, 101, 110, 116, 45, 84, 114, 97, 110, 115, 102, 101, 114,\n        45, 69, 110, 99, 111, 100, 105, 110, 103, 58, 32, 113, 117, 111, 116, 101,\n        100, 45, 112, 114, 105, 110, 116, 97, 98, 108, 101, 13, 10, 13, 10, 60, 33,\n        68, 79, 67, 84, 89, 80, 69, 32, 104, 116, 109, 108, 32, 80, 85, 66, 76, 73,\n        67, 32, 34, 45, 47, 47, 87, 51, 67, 47, 47, 68, 84, 68, 32, 88, 72, 84, 77,\n        76, 32, 49, 46, 48, 32, 84, 114, 97, 110, 115, 105, 116, 105, 111, 110, 97,\n        108, 32, 47, 47, 69, 78, 34, 32, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119,\n        119, 61, 13, 10, 46, 119, 51, 46, 111, 114, 103, 47, 84, 82, 47, 120, 104,\n        116, 109, 108, 49, 47, 68, 84, 68, 47, 120, 104, 116, 109, 108, 49, 45, 116,\n        114, 97, 110, 115, 105, 116, 105, 111, 110, 97, 108, 46, 100, 116, 100, 34,\n        62, 13, 10, 60, 104, 116, 109, 108, 62, 13, 10, 60, 104, 101, 97, 100, 62, 13,\n        10, 60, 109, 101, 116, 97, 32, 104, 116, 116, 112, 45, 101, 113, 117, 105,\n        118, 61, 51, 68, 34, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101,\n        34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 51, 68, 34, 116, 101, 120, 116,\n        47, 104, 116, 109, 108, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 51, 68,\n        117, 116, 102, 45, 56, 34, 32, 47, 62, 13, 10, 60, 109, 101, 116, 97, 32, 110,\n        97, 109, 101, 61, 51, 68, 34, 118, 105, 101, 119, 112, 111, 114, 116, 34, 32,\n        99, 111, 110, 116, 101, 110, 116, 61, 51, 68, 34, 119, 105, 100, 116, 104, 61,\n        51, 68, 100, 101, 118, 105, 99, 101, 45, 119, 105, 100, 116, 104, 44, 32, 109,\n        105, 110, 105, 109, 117, 109, 45, 115, 99, 97, 108, 101, 61, 51, 68, 49, 46,\n        61, 13, 10, 48, 44, 32, 109, 97, 120, 105, 109, 117, 109, 45, 115, 99, 97,\n        108, 101, 61, 51, 68, 49, 46, 48, 44, 32, 117, 115, 101, 114, 45, 115, 99, 97,\n        108, 97, 98, 108, 101, 61, 51, 68, 48, 34, 32, 47, 62, 13, 10, 60, 109, 101,\n        116, 97, 32, 110, 97, 109, 101, 61, 51, 68, 34, 97, 112, 112, 108, 101, 45,\n        109, 111, 98, 105, 108, 101, 45, 119, 101, 98, 45, 97, 112, 112, 45, 99, 97,\n        112, 97, 98, 108, 101, 34, 32, 99, 111, 110, 116, 101, 110, 116, 61, 51, 68,\n        34, 121, 101, 115, 34, 32, 47, 62, 13, 10, 60, 115, 116, 121, 108, 101, 32,\n        116, 121, 112, 101, 61, 51, 68, 34, 116, 101, 120, 116, 47, 99, 115, 115, 34,\n        62, 13, 10, 64, 109, 101, 100, 105, 97, 32, 111, 110, 108, 121, 32, 115, 99,\n        114, 101, 101, 110, 32, 97, 110, 100, 32, 40, 109, 97, 120, 45, 119, 105, 100,\n        116, 104, 58, 32, 51, 50, 48, 112, 120, 41, 32, 123, 13, 10, 116, 97, 98, 108,\n        101, 91, 99, 108, 97, 115, 115, 61, 51, 68, 34, 101, 100, 117, 45, 109, 111,\n        100, 117, 108, 101, 34, 93, 123, 13, 10, 98, 111, 114, 100, 101, 114, 45, 114,\n        97, 100, 105, 117, 115, 58, 32, 48, 112, 120, 32, 33, 105, 109, 112, 111, 114,\n        116, 97, 110, 116, 59, 13, 10, 45, 119, 101, 98, 107, 105, 116, 45, 98, 111,\n        114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 48, 112, 120, 32,\n        33, 105, 109, 112, 111, 114, 116, 97, 110, 116, 59, 13, 10, 45, 109, 111, 122,\n        45, 98, 111, 114, 100, 101, 114, 45, 114, 97, 100, 105, 117, 115, 58, 32, 48,\n        112, 120, 32, 33, 105, 109, 112, 111, 114, 116, 97, 110, 116, 59, 13, 10, 125,\n        13, 10, 116, 100, 91, 99, 108, 97, 115, 115, 61, 51, 68, 34, 101, 100, 117,\n        45, 99, 111, 108, 108, 97, 112, 115, 101, 34, 93, 123, 13, 10, 119, 105, 100,\n        116, 104, 58, 32, 48, 112, 120, 32, 33, 105, 109, 112, 111, 114, 116, 97, 110,\n        116, 59, 13, 10, 125, 13, 10, 116, 100, 91, 99, 108, 97, 115, 115, 61, 51, 68,\n        34, 109, 111, 98, 105, 108, 101, 45, 104, 101, 105, 103, 104, 116, 34, 93,\n        123, 13, 10, 104, 101, 105, 103, 104, 116, 58, 32, 51, 48, 112, 120, 32, 33,\n        105, 109, 112, 111, 114, 116, 97, 110, 116, 59, 13, 10, 125, 13, 10, 125, 13,\n        10, 64, 109, 101, 100, 105, 97, 32, 111, 110, 108, 121, 32, 115, 99, 114, 101,\n        101, 110, 32, 97, 110, 100, 32, 40, 109, 97, 120, 45, 119, 105, 100, 116, 104,\n        58, 32, 52, 50, 48, 112, 120, 41, 32, 123, 13, 10, 116, 100, 91, 99, 108, 97,\n        115, 115, 61, 51, 68, 34, 115, 112, 97, 99, 101, 114, 34, 93, 123, 13, 10,\n        102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 52, 112, 120, 32, 33, 105,\n        109, 112, 111, 114, 116, 97, 110, 116, 59, 13, 10, 125, 13, 10, 115, 112, 97,\n        110, 91, 99, 108, 97, 115, 115, 61, 51, 68, 34, 97, 100, 100, 114, 101, 115,\n        115, 34, 93, 32, 97, 32, 123, 13, 10, 108, 105, 110, 101, 45, 104, 101, 105,\n        103, 104, 116, 58, 49, 56, 112, 120, 32, 33, 105, 109, 112, 111, 114, 116, 97,\n        110, 116, 59, 13, 10, 125, 13, 10, 97, 91, 99, 108, 97, 115, 115, 61, 51, 68,\n        34, 99, 117, 116, 34, 93, 123, 13, 10, 100, 105, 115, 112, 108, 97, 121, 58,\n        110, 111, 110, 101, 32, 33, 105, 109, 112, 111, 114, 116, 97, 110, 116, 59,\n        13, 10, 125, 13, 10, 116, 100, 91, 99, 108, 97, 115, 115, 61, 51, 68, 34, 109,\n        97, 114, 103, 105, 110, 115, 34, 93, 123, 13, 10, 119, 105, 100, 116, 104, 58,\n        49, 56, 112, 120, 32, 33, 105, 109, 112, 111, 114, 116, 97, 110, 116, 59, 13,\n        10, 125, 13, 10, 116, 100, 91, 99, 108, 97, 115, 115, 61, 51, 68, 34, 101,\n        100, 117, 45, 109, 97, 114, 103, 105, 110, 115, 34, 93, 123, 13, 10, 119, 105,\n        100, 116, 104, 58, 49, 56, 112, 120, 32, 33, 105, 109, 112, 111, 114, 116, 97,\n        110, 116, 59, 13, 10, 125, 13, 10, 116, 100, 91, 99, 108, 97, 115, 115, 61,\n        51, 68, 34, 108, 111, 103, 111, 95, 115, 112, 97, 99, 101, 34, 93, 123, 13,\n        10, 104, 101, 105, 103, 104, 116, 58, 49, 50, 112, 120, 32, 33, 105, 109, 112,\n        111, 114, 116, 97, 110, 116, 59, 13, 10, 125, 13, 10, 125, 13, 10, 64, 109,\n        101, 100, 105, 97, 32, 111, 110, 108, 121, 32, 115, 99, 114, 101, 101, 110,\n        32, 97, 110, 100, 32, 40, 109, 97, 120, 45, 119, 105, 100, 116, 104, 58, 32,\n        52, 56, 48, 112, 120, 41, 32, 123, 13, 10, 116, 97, 98, 108, 101, 91, 99, 108,\n        97, 115, 115, 61, 51, 68, 34, 99, 111, 108, 108, 97, 112, 115, 101, 34, 93,\n        123, 13, 10, 119, 105, 100, 116, 104, 58, 49, 48, 48, 37, 32, 33, 105, 109,\n        112, 111, 114, 116, 97, 110, 116, 59, 13, 10, 125, 13, 10, 116, 97, 98, 108,\n        101, 91, 99, 108, 97, 115, 115, 61, 51, 68, 34, 101, 100, 117, 45, 109, 111,\n        100, 117, 108, 101, 34, 93, 123, 13, 10, 119, 105, 100, 116, 104, 58, 49, 48,\n        48, 37, 32, 33, 105, 109, 112, 111, 114, 116, 97, 110, 116, 59, 13, 10, 125,\n        13, 10, 100, 105, 118, 91, 99, 108, 97, 115, 115, 61, 51, 68, 34, 99, 111,\n        108, 108, 97, 112, 115, 101, 34, 93, 123, 13, 10, 119, 105, 100, 116, 104, 58,\n        49, 48, 48, 37, 32, 33, 105, 109, 112, 111, 114, 116, 97, 110, 116, 59, 13,\n        10, 125, 13, 10, 116, 100, 91, 99, 108, 97, 115, 115, 61, 51, 68, 34, 108,\n        111, 103, 111, 95, 115, 112, 97, 99, 101, 34, 93, 123, 13, 10, 104, 101, 105,\n        103, 104, 116, 58, 32, 50, 52, 112, 120, 32, 33, 105, 109, 112, 111, 114, 116,\n        97, 110, 116, 59, 13, 10, 125, 13, 10, 115, 112, 97, 110, 91, 99, 108, 97,\n        115, 115, 61, 51, 68, 34, 97, 100, 100, 114, 101, 115, 115, 34, 93, 123, 13,\n        10, 100, 105, 115, 112, 108, 97, 121, 58, 98, 108, 111, 99, 107, 32, 33, 105,\n        109, 112, 111, 114, 116, 97, 110, 116, 59, 13, 10, 119, 105, 100, 116, 104,\n        58, 50, 52, 48, 112, 120, 32, 33, 105, 109, 112, 111, 114, 116, 97, 110, 116,\n        59, 13, 10, 125, 13, 10, 116, 100, 91, 99, 108, 97, 115, 115, 61, 51, 68, 34,\n        99, 117, 116, 34, 93, 123, 13, 10, 100, 105, 115, 112, 108, 97, 121, 58, 110,\n        111, 110, 101, 32, 33, 105, 109, 112, 111, 114, 116, 97, 110, 116, 59, 13, 10,\n        125, 13, 10, 116, 100, 91, 99, 108, 97, 115, 115, 61, 51, 68, 34, 108, 111,\n        103, 111, 34, 93, 32, 105, 109, 103, 32, 123, 13, 10, 119, 105, 100, 116, 104,\n        58, 50, 52, 112, 120, 32, 33, 105, 109, 112, 111, 114, 116, 97, 110, 116, 59,\n        13, 10, 125, 13, 10, 115, 112, 97, 110, 91, 99, 108, 97, 115, 115, 61, 51, 68,\n        34, 97, 100, 100, 114, 101, 115, 115, 34, 93, 32, 97, 32, 123, 13, 10, 108,\n        105, 110, 101, 45, 104, 101, 105, 103, 104, 116, 58, 49, 56, 112, 120, 32, 33,\n        105, 109, 112, 111, 114, 116, 97, 110, 116, 59, 13, 10, 125, 13, 10, 125, 13,\n        10, 60, 47, 115, 116, 121, 108, 101, 62, 13, 10, 60, 47, 104, 101, 97, 100,\n        62, 13, 10, 60, 98, 111, 100, 121, 32, 98, 103, 99, 111, 108, 111, 114, 61,\n        51, 68, 34, 35, 70, 53, 70, 56, 70, 65, 34, 32, 115, 116, 121, 108, 101, 61,\n        51, 68, 34, 109, 97, 114, 103, 105, 110, 58, 48, 59, 112, 97, 100, 100, 105,\n        110, 103, 58, 48, 59, 45, 119, 101, 98, 107, 105, 116, 45, 116, 101, 120, 116,\n        45, 115, 105, 122, 101, 45, 97, 100, 106, 61, 13, 10, 117, 115, 116, 58, 49,\n        48, 48, 37, 59, 45, 109, 115, 45, 116, 101, 120, 116, 45, 115, 105, 122, 101,\n        45, 97, 100, 106, 117, 115, 116, 58, 49, 48, 48, 37, 59, 34, 62, 13, 10, 60,\n        116, 97, 98, 108, 101, 32, 99, 101, 108, 108, 112, 97, 100, 100, 105, 110,\n        103, 61, 51, 68, 34, 48, 34, 32, 99, 101, 108, 108, 115, 112, 97, 99, 105,\n        110, 103, 61, 51, 68, 34, 48, 34, 32, 98, 111, 114, 100, 101, 114, 61, 51, 68,\n        34, 48, 34, 32, 119, 105, 100, 116, 104, 61, 51, 68, 34, 49, 48, 48, 37, 34,\n        32, 98, 103, 99, 111, 61, 13, 10, 108, 111, 114, 61, 51, 68, 34, 35, 70, 53,\n        70, 56, 70, 65, 34, 32, 115, 116, 121, 108, 101, 61, 51, 68, 34, 98, 97, 99,\n        107, 103, 114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 35, 70, 53,\n        70, 56, 70, 65, 59, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 109, 97,\n        114, 103, 105, 110, 58, 48, 59, 108, 105, 110, 101, 45, 104, 61, 13, 10, 101,\n        105, 103, 104, 116, 58, 49, 112, 120, 59, 102, 111, 110, 116, 45, 115, 105,\n        122, 101, 58, 49, 112, 120, 59, 34, 32, 99, 108, 97, 115, 115, 61, 51, 68, 34,\n        98, 111, 100, 121, 95, 119, 114, 97, 112, 112, 101, 114, 34, 62, 13, 10, 60,\n        116, 98, 111, 100, 121, 62, 13, 10, 60, 116, 114, 62, 13, 10, 60, 116, 100,\n        32, 97, 108, 105, 103, 110, 61, 51, 68, 34, 99, 101, 110, 116, 101, 114, 34,\n        32, 115, 116, 121, 108, 101, 61, 51, 68, 34, 112, 97, 100, 100, 105, 110, 103,\n        58, 48, 59, 109, 97, 114, 103, 105, 110, 58, 48, 59, 108, 105, 110, 101, 45,\n        104, 101, 105, 103, 104, 116, 58, 49, 112, 120, 59, 102, 111, 110, 116, 45,\n        115, 105, 122, 101, 58, 61, 13, 10, 49, 112, 120, 59, 34, 62, 13, 10, 60, 116,\n        97, 98, 108, 101, 32, 99, 108, 97, 115, 115, 61, 51, 68, 34, 99, 111, 108,\n        108, 97, 112, 115, 101, 34, 32, 105, 100, 61, 51, 68, 34, 104, 101, 97, 100,\n        101, 114, 34, 32, 97, 108, 105, 103, 110, 61, 51, 68, 34, 99, 101, 110, 116,\n        101, 114, 34, 32, 119, 105, 100, 116, 104, 61, 51, 68, 34, 52, 52, 56, 34, 32,\n        115, 116, 121, 108, 61, 13, 10, 101, 61, 51, 68, 34, 119, 105, 100, 116, 104,\n        58, 32, 52, 52, 56, 112, 120, 59, 112, 97, 100, 100, 105, 110, 103, 58, 48,\n        59, 109, 97, 114, 103, 105, 110, 58, 48, 59, 108, 105, 110, 101, 45, 104, 101,\n        105, 103, 104, 116, 58, 49, 112, 120, 59, 102, 111, 110, 116, 45, 115, 105,\n        122, 101, 58, 49, 112, 120, 59, 34, 32, 98, 103, 99, 111, 108, 111, 61, 13,\n        10, 114, 61, 51, 68, 34, 35, 102, 102, 102, 102, 102, 102, 34, 32, 99, 101,\n        108, 108, 112, 97, 100, 100, 105, 110, 103, 61, 51, 68, 34, 48, 34, 32, 99,\n        101, 108, 108, 115, 112, 97, 99, 105, 110, 103, 61, 51, 68, 34, 48, 34, 32,\n        98, 111, 114, 100, 101, 114, 61, 51, 68, 34, 48, 34, 62, 13, 10, 60, 116, 98,\n        111, 100, 121, 62, 13, 10, 60, 116, 114, 62, 13, 10, 60, 116, 100, 32, 115,\n        116, 121, 108, 101, 61, 51, 68, 34, 109, 105, 110, 45, 119, 105, 100, 116,\n        104, 58, 32, 52, 52, 56, 112, 120, 59, 112, 97, 100, 100, 105, 110, 103, 58,\n        48, 59, 109, 97, 114, 103, 105, 110, 58, 48, 59, 108, 105, 110, 101, 45, 104,\n        101, 105, 103, 104, 116, 58, 49, 112, 120, 59, 102, 111, 110, 116, 45, 115,\n        105, 122, 101, 58, 61, 13, 10, 49, 112, 120, 59, 34, 32, 99, 108, 97, 115,\n        115, 61, 51, 68, 34, 99, 117, 116, 34, 62, 32, 60, 105, 109, 103, 32, 115,\n        114, 99, 61, 51, 68, 34, 104, 116, 116, 112, 115, 58, 47, 47, 101, 97, 46,\n        116, 119, 105, 109, 103, 46, 99, 111, 109, 47, 101, 109, 97, 105, 108, 47,\n        115, 101, 108, 102, 95, 115, 101, 114, 118, 101, 47, 109, 101, 100, 105, 61,\n        13, 10, 97, 47, 115, 112, 97, 99, 101, 114, 45, 49, 52, 48, 50, 54, 57, 54,\n        48, 50, 51, 57, 51, 48, 46, 112, 110, 103, 34, 32, 115, 116, 121, 108, 101,\n        61, 51, 68, 34, 109, 105, 110, 45, 119, 105, 100, 116, 104, 58, 32, 52, 52,\n        56, 112, 120, 59, 104, 101, 105, 103, 104, 116, 58, 49, 112, 120, 59, 109, 97,\n        114, 103, 105, 110, 58, 48, 59, 112, 61, 13, 10, 97, 100, 100, 105, 110, 103,\n        58, 48, 59, 100, 105, 115, 112, 108, 97, 121, 58, 98, 108, 111, 99, 107, 59,\n        45, 109, 115, 45, 105, 110, 116, 101, 114, 112, 111, 108, 97, 116, 105, 111,\n        110, 45, 109, 111, 100, 101, 58, 98, 105, 99, 117, 98, 105, 99, 59, 98, 111,\n        114, 100, 101, 114, 58, 110, 111, 110, 101, 59, 111, 117, 116, 108, 105, 110,\n        101, 58, 110, 61, 13, 10, 111, 110, 101, 59, 34, 32, 47, 62, 32, 60, 47, 116,\n        100, 62, 13, 10, 60, 47, 116, 114, 62, 13, 10, 60, 47, 116, 98, 111, 100, 121,\n        62, 13, 10, 60, 47, 116, 97, 98, 108, 101, 62, 32, 60, 47, 116, 100, 62, 13,\n        10, 60, 47, 116, 114, 62, 13, 10, 60, 116, 114, 62, 13, 10, 60, 116, 100, 32,\n        97, 108, 105, 103, 110, 61, 51, 68, 34, 99, 101, 110, 116, 101, 114, 34, 32,\n        115, 116, 121, 108, 101, 61, 51, 68, 34, 112, 97, 100, 100, 105, 110, 103, 58,\n        48, 59, 109, 97, 114, 103, 105, 110, 58, 48, 59, 108, 105, 110, 101, 45, 104,\n        101, 105, 103, 104, 116, 58, 49, 112, 120, 59, 102, 111, 110, 116, 45, 115,\n        105, 122, 101, 58, 61, 13, 10, 49, 112, 120, 59, 34, 62, 13, 10, 60, 33, 45,\n        45, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,\n        47, 32, 104, 101, 97, 100, 101, 114, 32, 47, 47, 47, 47, 47, 47, 47, 47, 47,\n        47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 45,\n        45, 62, 13, 10, 60, 116, 97, 98, 108, 101, 32, 99, 108, 97, 115, 115, 61, 51,\n        68, 34, 99, 111, 108, 108, 97, 112, 115, 101, 34, 32, 105, 100, 61, 51, 68,\n        34, 104, 101, 97, 100, 101, 114, 34, 32, 97, 108, 105, 103, 110, 61, 51, 68,\n        34, 99, 101, 110, 116, 101, 114, 34, 32, 119, 105, 100, 116, 104, 61, 51, 68,\n        34, 52, 52, 56, 34, 32, 115, 116, 121, 108, 61, 13, 10, 101, 61, 51, 68, 34,\n        119, 105, 100, 116, 104, 58, 52, 52, 56, 112, 120, 59, 98, 97, 99, 107, 103,\n        114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 35, 102, 102, 102,\n        102, 102, 102, 59, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 109, 97, 114,\n        103, 105, 110, 58, 48, 59, 108, 105, 110, 101, 45, 104, 101, 105, 103, 104,\n        116, 58, 49, 112, 61, 13, 10, 120, 59, 102, 111, 110, 116, 45, 115, 105, 122,\n        101, 58, 49, 112, 120, 59, 34, 32, 98, 103, 99, 111, 108, 111, 114, 61, 51,\n        68, 34, 35, 102, 102, 102, 102, 102, 102, 34, 32, 99, 101, 108, 108, 112, 97,\n        100, 100, 105, 110, 103, 61, 51, 68, 34, 48, 34, 32, 99, 101, 108, 108, 115,\n        112, 97, 99, 105, 110, 103, 61, 51, 68, 34, 48, 34, 32, 98, 61, 13, 10, 111,\n        114, 100, 101, 114, 61, 51, 68, 34, 48, 34, 62, 13, 10, 60, 116, 98, 111, 100,\n        121, 62, 13, 10, 60, 116, 114, 62, 13, 10, 60, 116, 100, 32, 99, 111, 108,\n        115, 112, 97, 110, 61, 51, 68, 34, 52, 34, 32, 104, 101, 105, 103, 104, 116,\n        61, 51, 68, 34, 50, 52, 34, 32, 115, 116, 121, 108, 101, 61, 51, 68, 34, 104,\n        101, 105, 103, 104, 116, 58, 50, 52, 112, 120, 59, 112, 97, 100, 100, 105,\n        110, 103, 58, 48, 59, 109, 97, 114, 103, 105, 110, 58, 48, 59, 108, 105, 110,\n        61, 13, 10, 101, 45, 104, 101, 105, 103, 104, 116, 58, 49, 112, 120, 59, 102,\n        111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 112, 120, 59, 34, 32, 99, 108,\n        97, 115, 115, 61, 51, 68, 34, 108, 111, 103, 111, 95, 115, 112, 97, 99, 101,\n        34, 62, 32, 38, 110, 98, 115, 112, 59, 32, 60, 47, 116, 100, 62, 13, 10, 60,\n        47, 116, 114, 62, 13, 10, 60, 116, 114, 32, 97, 108, 105, 103, 110, 61, 51,\n        68, 34, 114, 105, 103, 104, 116, 34, 62, 13, 10, 60, 116, 100, 32, 119, 105,\n        100, 116, 104, 61, 51, 68, 34, 50, 52, 34, 32, 99, 108, 97, 115, 115, 61, 51,\n        68, 34, 109, 97, 114, 103, 105, 110, 34, 32, 115, 116, 121, 108, 101, 61, 51,\n        68, 34, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 109, 97, 114, 103, 105,\n        110, 58, 48, 59, 108, 105, 110, 101, 45, 104, 101, 105, 103, 104, 116, 58, 49,\n        61, 13, 10, 112, 120, 59, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49,\n        112, 120, 59, 34, 62, 60, 47, 116, 100, 62, 13, 10, 60, 116, 100, 32, 97, 108,\n        105, 103, 110, 61, 51, 68, 34, 114, 105, 103, 104, 116, 34, 32, 115, 116, 121,\n        108, 101, 61, 51, 68, 34, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 109,\n        97, 114, 103, 105, 110, 58, 48, 59, 108, 105, 110, 101, 45, 104, 101, 105,\n        103, 104, 116, 58, 49, 112, 120, 59, 102, 111, 110, 116, 45, 115, 105, 122,\n        101, 58, 49, 61, 13, 10, 112, 120, 59, 34, 62, 32, 60, 97, 32, 104, 114, 101,\n        102, 61, 51, 68, 34, 35, 34, 32, 116, 97, 114, 103, 101, 116, 61, 51, 68, 34,\n        98, 108, 97, 110, 107, 34, 32, 115, 116, 121, 108, 101, 61, 51, 68, 34, 116,\n        101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 110,\n        111, 110, 101, 59, 98, 111, 114, 100, 101, 114, 45, 115, 61, 13, 10, 116, 121,\n        108, 101, 58, 110, 111, 110, 101, 59, 98, 111, 114, 100, 101, 114, 58, 48, 59,\n        112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 109, 97, 114, 103, 105, 110, 58,\n        48, 59, 34, 62, 32, 60, 105, 109, 103, 32, 119, 105, 100, 116, 104, 61, 51,\n        68, 34, 51, 50, 34, 32, 97, 108, 105, 103, 110, 61, 51, 68, 34, 114, 105, 103,\n        104, 116, 34, 32, 61, 13, 10, 115, 114, 99, 61, 51, 68, 34, 104, 116, 116,\n        112, 115, 58, 47, 47, 116, 111, 110, 46, 120, 46, 99, 111, 109, 47, 116, 119,\n        105, 116, 116, 101, 114, 95, 98, 108, 117, 101, 95, 102, 111, 114, 95, 98,\n        117, 115, 105, 110, 101, 115, 115, 47, 118, 101, 114, 105, 102, 105, 101, 100,\n        45, 112, 114, 111, 103, 114, 97, 109, 115, 47, 120, 95, 108, 111, 103, 111,\n        61, 13, 10, 46, 112, 110, 103, 34, 32, 115, 116, 121, 108, 101, 61, 51, 68,\n        34, 119, 105, 100, 116, 104, 58, 51, 50, 112, 120, 59, 109, 97, 114, 103, 105,\n        110, 58, 48, 59, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 100, 105, 115,\n        112, 108, 97, 121, 58, 98, 108, 111, 99, 107, 59, 45, 109, 115, 45, 105, 110,\n        116, 101, 114, 112, 111, 108, 97, 116, 105, 111, 61, 13, 10, 110, 45, 109,\n        111, 100, 101, 58, 98, 105, 99, 117, 98, 105, 99, 59, 98, 111, 114, 100, 101,\n        114, 58, 110, 111, 110, 101, 59, 111, 117, 116, 108, 105, 110, 101, 58, 110,\n        111, 110, 101, 59, 34, 32, 47, 62, 32, 60, 47, 97, 62, 32, 60, 47, 116, 100,\n        62, 13, 10, 60, 116, 100, 32, 119, 105, 100, 116, 104, 61, 51, 68, 34, 50, 52,\n        34, 32, 99, 108, 97, 115, 115, 61, 51, 68, 34, 109, 97, 114, 103, 105, 110,\n        34, 32, 115, 116, 121, 108, 101, 61, 51, 68, 34, 112, 97, 100, 100, 105, 110,\n        103, 58, 48, 59, 109, 97, 114, 103, 105, 110, 58, 48, 59, 108, 105, 110, 101,\n        45, 104, 101, 105, 103, 104, 116, 58, 49, 61, 13, 10, 112, 120, 59, 102, 111,\n        110, 116, 45, 115, 105, 122, 101, 58, 49, 112, 120, 59, 34, 62, 60, 47, 116,\n        100, 62, 13, 10, 60, 47, 116, 114, 62, 13, 10, 60, 116, 114, 62, 13, 10, 60,\n        116, 100, 32, 99, 111, 108, 115, 112, 97, 110, 61, 51, 68, 34, 51, 34, 32,\n        104, 101, 105, 103, 104, 116, 61, 51, 68, 34, 50, 52, 34, 32, 115, 116, 121,\n        108, 101, 61, 51, 68, 34, 104, 101, 105, 103, 104, 116, 58, 50, 52, 112, 120,\n        59, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 109, 97, 114, 103, 105, 110,\n        58, 48, 59, 108, 105, 110, 61, 13, 10, 101, 45, 104, 101, 105, 103, 104, 116,\n        58, 49, 112, 120, 59, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 112,\n        120, 59, 34, 32, 99, 108, 97, 115, 115, 61, 51, 68, 34, 108, 111, 103, 111,\n        95, 115, 112, 97, 99, 101, 34, 62, 32, 60, 105, 109, 103, 32, 119, 105, 100,\n        116, 104, 61, 51, 68, 34, 49, 34, 32, 104, 101, 105, 103, 104, 116, 61, 13,\n        10, 61, 51, 68, 34, 49, 34, 32, 115, 116, 121, 108, 101, 61, 51, 68, 34, 100,\n        105, 115, 112, 108, 97, 121, 58, 32, 98, 108, 111, 99, 107, 59, 109, 97, 114,\n        103, 105, 110, 58, 48, 59, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 100,\n        105, 115, 112, 108, 97, 121, 58, 98, 108, 111, 99, 107, 59, 45, 109, 115, 45,\n        105, 110, 116, 101, 114, 112, 111, 61, 13, 10, 108, 97, 116, 105, 111, 110,\n        45, 109, 111, 100, 101, 58, 98, 105, 99, 117, 98, 105, 99, 59, 98, 111, 114,\n        100, 101, 114, 58, 110, 111, 110, 101, 59, 111, 117, 116, 108, 105, 110, 101,\n        58, 110, 111, 110, 101, 59, 34, 32, 115, 114, 99, 61, 51, 68, 34, 104, 116,\n        116, 112, 115, 58, 47, 47, 116, 119, 105, 116, 116, 101, 114, 46, 99, 111,\n        109, 47, 115, 61, 13, 10, 99, 114, 105, 98, 101, 47, 105, 98, 105, 115, 63,\n        116, 61, 51, 68, 49, 38, 97, 109, 112, 59, 99, 110, 61, 51, 68, 99, 71, 70,\n        122, 99, 51, 100, 118, 99, 109, 82, 102, 99, 109, 86, 122, 90, 88, 82, 102,\n        99, 71, 108, 117, 88, 50, 74, 104, 99, 50, 86, 107, 88, 50, 86, 116, 89, 87,\n        108, 115, 38, 97, 109, 112, 59, 105, 105, 100, 61, 13, 10, 61, 51, 68, 55, 53,\n        51, 51, 100, 53, 51, 56, 99, 55, 57, 55, 52, 57, 98, 50, 97, 99, 56, 52, 56,\n        100, 49, 100, 55, 102, 99, 56, 50, 57, 97, 49, 38, 97, 109, 112, 59, 117, 105,\n        100, 61, 51, 68, 49, 50, 53, 55, 52, 51, 53, 54, 50, 49, 55, 55, 49, 49, 52,\n        49, 49, 50, 48, 38, 97, 109, 112, 59, 110, 105, 100, 61, 13, 10, 61, 51, 68,\n        50, 57, 54, 43, 50, 48, 34, 32, 47, 62, 32, 60, 47, 116, 100, 62, 13, 10, 60,\n        47, 116, 114, 62, 13, 10, 60, 47, 116, 98, 111, 100, 121, 62, 13, 10, 60, 47,\n        116, 97, 98, 108, 101, 62, 13, 10, 60, 33, 45, 45, 47, 47, 47, 47, 47, 47, 47,\n        47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 32, 101, 110, 100, 32, 104,\n        101, 97, 100, 101, 114, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,\n        47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 45, 45, 62, 13, 10,\n        60, 33, 45, 45, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,\n        47, 47, 47, 47, 32, 98, 111, 100, 121, 32, 47, 47, 47, 47, 47, 47, 47, 47, 47,\n        47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 45,\n        45, 62, 13, 10, 60, 116, 97, 98, 108, 101, 32, 99, 108, 97, 115, 115, 61, 51,\n        68, 34, 99, 111, 108, 108, 97, 112, 115, 101, 34, 32, 105, 100, 61, 51, 68,\n        34, 104, 101, 97, 100, 101, 114, 34, 32, 97, 108, 105, 103, 110, 61, 51, 68,\n        34, 99, 101, 110, 116, 101, 114, 34, 32, 119, 105, 100, 116, 104, 61, 51, 68,\n        34, 52, 52, 56, 34, 32, 115, 116, 121, 108, 61, 13, 10, 101, 61, 51, 68, 34,\n        119, 105, 100, 116, 104, 58, 52, 52, 56, 112, 120, 59, 98, 97, 99, 107, 103,\n        114, 111, 117, 110, 100, 45, 99, 111, 108, 111, 114, 58, 35, 102, 102, 102,\n        102, 102, 102, 59, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 109, 97, 114,\n        103, 105, 110, 58, 48, 59, 108, 105, 110, 101, 45, 104, 101, 105, 103, 104,\n        116, 58, 49, 112, 61, 13, 10, 120, 59, 102, 111, 110, 116, 45, 115, 105, 122,\n        101, 58, 49, 112, 120, 59, 34, 32, 98, 103, 99, 111, 108, 111, 114, 61, 51,\n        68, 34, 35, 102, 102, 102, 102, 102, 102, 34, 32, 99, 101, 108, 108, 112, 97,\n        100, 100, 105, 110, 103, 61, 51, 68, 34, 48, 34, 32, 99, 101, 108, 108, 115,\n        112, 97, 99, 105, 110, 103, 61, 51, 68, 34, 48, 34, 32, 98, 61, 13, 10, 111,\n        114, 100, 101, 114, 61, 51, 68, 34, 48, 34, 62, 13, 10, 60, 116, 98, 111, 100,\n        121, 62, 13, 10, 60, 116, 114, 32, 97, 108, 105, 103, 110, 61, 51, 68, 34,\n        108, 101, 102, 116, 59, 34, 62, 13, 10, 60, 116, 100, 32, 119, 105, 100, 116,\n        104, 61, 51, 68, 34, 50, 52, 34, 32, 99, 108, 97, 115, 115, 61, 51, 68, 34,\n        109, 97, 114, 103, 105, 110, 34, 32, 115, 116, 121, 108, 101, 61, 51, 68, 34,\n        112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 109, 97, 114, 103, 105, 110, 58,\n        48, 59, 108, 105, 110, 101, 45, 104, 101, 105, 103, 104, 116, 58, 49, 61, 13,\n        10, 112, 120, 59, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 112,\n        120, 59, 34, 62, 60, 47, 116, 100, 62, 13, 10, 60, 116, 100, 32, 97, 108, 105,\n        103, 110, 61, 51, 68, 34, 108, 101, 102, 116, 59, 34, 32, 115, 116, 121, 108,\n        101, 61, 51, 68, 34, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 109, 97,\n        114, 103, 105, 110, 58, 48, 59, 108, 105, 110, 101, 45, 104, 101, 105, 103,\n        104, 116, 58, 49, 112, 120, 59, 102, 111, 110, 116, 45, 115, 105, 122, 101,\n        58, 49, 61, 13, 10, 112, 120, 59, 34, 62, 13, 10, 60, 116, 97, 98, 108, 101,\n        32, 99, 108, 97, 115, 115, 61, 51, 68, 34, 99, 111, 108, 108, 97, 112, 115,\n        101, 34, 32, 99, 101, 108, 108, 112, 97, 100, 100, 105, 110, 103, 61, 51, 68,\n        34, 48, 34, 32, 99, 101, 108, 108, 115, 112, 97, 99, 105, 110, 103, 61, 51,\n        68, 34, 48, 34, 32, 98, 111, 114, 100, 101, 114, 61, 51, 68, 34, 48, 34, 32,\n        61, 13, 10, 115, 116, 121, 108, 101, 61, 51, 68, 34, 112, 97, 100, 100, 105,\n        110, 103, 58, 48, 59, 109, 97, 114, 103, 105, 110, 58, 48, 59, 108, 105, 110,\n        101, 45, 104, 101, 105, 103, 104, 116, 58, 49, 112, 120, 59, 102, 111, 110,\n        116, 45, 115, 105, 122, 101, 58, 49, 112, 120, 59, 34, 62, 13, 10, 60, 116,\n        98, 111, 100, 121, 62, 13, 10, 60, 116, 114, 62, 13, 10, 60, 116, 100, 32, 97,\n        108, 105, 103, 110, 61, 51, 68, 34, 108, 101, 102, 116, 59, 34, 32, 99, 108,\n        97, 115, 115, 61, 51, 68, 34, 104, 50, 34, 32, 115, 116, 121, 108, 101, 61,\n        51, 68, 34, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 109, 97, 114, 103,\n        105, 110, 58, 48, 59, 108, 105, 110, 101, 45, 104, 101, 105, 103, 104, 116,\n        58, 49, 112, 61, 13, 10, 120, 59, 102, 111, 110, 116, 45, 115, 105, 122, 101,\n        58, 49, 112, 120, 59, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58,\n        39, 72, 101, 108, 118, 101, 116, 105, 99, 97, 78, 101, 117, 101, 39, 44, 32,\n        39, 72, 101, 108, 118, 101, 116, 105, 99, 97, 32, 78, 101, 117, 101, 39, 44,\n        32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 65, 61, 13, 10, 114,\n        105, 97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 59, 102,\n        111, 110, 116, 45, 115, 105, 122, 101, 58, 50, 52, 112, 120, 59, 108, 105,\n        110, 101, 45, 104, 101, 105, 103, 104, 116, 58, 51, 50, 112, 120, 59, 102,\n        111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 98, 111, 108, 100, 59,\n        99, 111, 108, 111, 114, 58, 35, 50, 57, 61, 13, 10, 50, 70, 51, 51, 59, 116,\n        101, 120, 116, 45, 97, 108, 105, 103, 110, 58, 108, 101, 102, 116, 59, 116,\n        101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 110,\n        111, 110, 101, 59, 45, 119, 101, 98, 107, 105, 116, 45, 102, 111, 110, 116,\n        45, 115, 109, 111, 111, 116, 104, 105, 110, 103, 58, 97, 110, 116, 105, 97,\n        108, 105, 97, 115, 101, 61, 13, 10, 100, 59, 34, 62, 32, 82, 101, 115, 101,\n        116, 32, 121, 111, 117, 114, 32, 112, 97, 115, 115, 119, 111, 114, 100, 63,\n        32, 60, 47, 116, 100, 62, 13, 10, 60, 47, 116, 114, 62, 13, 10, 60, 116, 114,\n        62, 13, 10, 60, 116, 100, 32, 104, 101, 105, 103, 104, 116, 61, 51, 68, 34,\n        49, 50, 34, 32, 115, 116, 121, 108, 101, 61, 51, 68, 34, 112, 97, 100, 100,\n        105, 110, 103, 58, 48, 59, 109, 97, 114, 103, 105, 110, 58, 48, 59, 108, 105,\n        110, 101, 45, 104, 101, 105, 103, 104, 116, 58, 49, 112, 120, 59, 102, 111,\n        110, 116, 45, 115, 105, 122, 101, 58, 49, 112, 120, 61, 13, 10, 59, 34, 62,\n        60, 47, 116, 100, 62, 13, 10, 60, 47, 116, 114, 62, 13, 10, 60, 116, 114, 62,\n        13, 10, 60, 116, 100, 32, 97, 108, 105, 103, 110, 61, 51, 68, 34, 108, 101,\n        102, 116, 59, 34, 32, 99, 108, 97, 115, 115, 61, 51, 68, 34, 98, 111, 100,\n        121, 45, 116, 101, 120, 116, 34, 32, 115, 116, 121, 108, 101, 61, 51, 68, 34,\n        112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 109, 97, 114, 103, 105, 110, 58,\n        48, 59, 108, 105, 110, 101, 45, 104, 101, 61, 13, 10, 105, 103, 104, 116, 58,\n        49, 112, 120, 59, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 112,\n        120, 59, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 39, 72, 101,\n        108, 118, 101, 116, 105, 99, 97, 78, 101, 117, 101, 39, 44, 32, 39, 72, 101,\n        108, 118, 101, 116, 105, 99, 97, 32, 78, 101, 117, 101, 39, 44, 32, 72, 101,\n        108, 118, 101, 61, 13, 10, 116, 105, 99, 97, 44, 32, 65, 114, 105, 97, 108,\n        44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 59, 102, 111, 110,\n        116, 45, 115, 105, 122, 101, 58, 49, 54, 112, 120, 59, 108, 105, 110, 101, 45,\n        104, 101, 105, 103, 104, 116, 58, 50, 48, 112, 120, 59, 102, 111, 110, 116,\n        45, 119, 101, 105, 103, 104, 116, 58, 52, 48, 48, 59, 99, 111, 108, 61, 13,\n        10, 111, 114, 58, 35, 50, 57, 50, 70, 51, 51, 59, 116, 101, 120, 116, 45, 97,\n        108, 105, 103, 110, 58, 108, 101, 102, 116, 59, 116, 101, 120, 116, 45, 100,\n        101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 110, 111, 110, 101, 59, 45,\n        119, 101, 98, 107, 105, 116, 45, 102, 111, 110, 116, 45, 115, 109, 111, 111,\n        116, 104, 105, 110, 103, 58, 97, 110, 116, 105, 61, 13, 10, 97, 108, 105, 97,\n        115, 101, 100, 59, 34, 62, 32, 73, 102, 32, 121, 111, 117, 32, 114, 101, 113,\n        117, 101, 115, 116, 101, 100, 32, 97, 32, 112, 97, 115, 115, 119, 111, 114,\n        100, 32, 114, 101, 115, 101, 116, 32, 102, 111, 114, 32, 64, 69, 110, 118,\n        111, 121, 95, 49, 48, 56, 52, 44, 32, 117, 115, 101, 32, 116, 104, 101, 32,\n        99, 111, 110, 102, 105, 61, 13, 10, 114, 109, 97, 116, 105, 111, 110, 32, 99,\n        111, 100, 101, 32, 98, 101, 108, 111, 119, 32, 116, 111, 32, 99, 111, 109,\n        112, 108, 101, 116, 101, 32, 116, 104, 101, 32, 112, 114, 111, 99, 101, 115,\n        115, 46, 32, 73, 102, 32, 121, 111, 117, 32, 100, 105, 100, 110, 39, 116, 32,\n        109, 97, 107, 101, 32, 116, 104, 105, 115, 32, 114, 101, 113, 117, 101, 115,\n        116, 61, 13, 10, 44, 32, 105, 103, 110, 111, 114, 101, 32, 116, 104, 105, 115,\n        32, 101, 109, 97, 105, 108, 46, 32, 60, 47, 116, 100, 62, 13, 10, 60, 47, 116,\n        114, 62, 13, 10, 60, 116, 114, 62, 13, 10, 60, 116, 100, 32, 104, 101, 105,\n        103, 104, 116, 61, 51, 68, 34, 50, 52, 34, 32, 115, 116, 121, 108, 101, 61,\n        51, 68, 34, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 109, 97, 114, 103,\n        105, 110, 58, 48, 59, 108, 105, 110, 101, 45, 104, 101, 105, 103, 104, 116,\n        58, 49, 112, 120, 59, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 112,\n        120, 61, 13, 10, 59, 34, 62, 60, 47, 116, 100, 62, 13, 10, 60, 47, 116, 114,\n        62, 13, 10, 60, 33, 45, 45, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 32,\n        112, 97, 115, 115, 119, 111, 114, 100, 32, 114, 101, 115, 101, 116, 32, 112,\n        105, 110, 32, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 45, 45, 62, 13,\n        10, 60, 116, 114, 62, 13, 10, 60, 116, 100, 32, 97, 108, 105, 103, 110, 61,\n        51, 68, 34, 108, 101, 102, 116, 59, 34, 32, 99, 108, 97, 115, 115, 61, 51, 68,\n        34, 115, 117, 112, 112, 111, 114, 116, 34, 32, 115, 116, 121, 108, 101, 61,\n        51, 68, 34, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 109, 97, 114, 103,\n        105, 110, 58, 48, 59, 108, 105, 110, 101, 45, 104, 101, 105, 103, 61, 13, 10,\n        104, 116, 58, 49, 112, 120, 59, 102, 111, 110, 116, 45, 115, 105, 122, 101,\n        58, 49, 112, 120, 59, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58,\n        39, 72, 101, 108, 118, 101, 116, 105, 99, 97, 78, 101, 117, 101, 39, 44, 32,\n        39, 72, 101, 108, 118, 101, 116, 105, 99, 97, 32, 78, 101, 117, 101, 39, 44,\n        32, 72, 101, 108, 118, 101, 116, 105, 61, 13, 10, 99, 97, 44, 32, 65, 114,\n        105, 97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 59, 102,\n        111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 52, 112, 120, 59, 108, 105,\n        110, 101, 45, 104, 101, 105, 103, 104, 116, 58, 49, 54, 112, 120, 59, 102,\n        111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 52, 48, 48, 59, 99, 111,\n        108, 111, 114, 61, 13, 10, 58, 35, 50, 57, 50, 70, 51, 51, 59, 116, 101, 120,\n        116, 45, 97, 108, 105, 103, 110, 58, 108, 101, 102, 116, 59, 116, 101, 120,\n        116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 110, 111, 110,\n        101, 59, 45, 119, 101, 98, 107, 105, 116, 45, 102, 111, 110, 116, 45, 115,\n        109, 111, 111, 116, 104, 105, 110, 103, 58, 97, 110, 116, 105, 97, 108, 61,\n        13, 10, 105, 97, 115, 101, 100, 59, 34, 62, 32, 60, 115, 116, 114, 111, 110,\n        103, 62, 119, 52, 53, 54, 53, 104, 56, 57, 60, 47, 115, 116, 114, 111, 110,\n        103, 62, 32, 60, 47, 116, 100, 62, 13, 10, 60, 47, 116, 114, 62, 13, 10, 60,\n        33, 45, 45, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 32, 101, 110, 100, 32,\n        112, 97, 115, 115, 119, 111, 114, 100, 32, 114, 101, 115, 101, 116, 32, 112,\n        105, 110, 32, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 45, 45, 62, 13,\n        10, 60, 116, 114, 62, 13, 10, 60, 116, 100, 32, 104, 101, 105, 103, 104, 116,\n        61, 51, 68, 34, 51, 54, 34, 32, 115, 116, 121, 108, 101, 61, 51, 68, 34, 104,\n        101, 105, 103, 104, 116, 58, 51, 54, 112, 120, 59, 112, 97, 100, 100, 105,\n        110, 103, 58, 48, 59, 109, 97, 114, 103, 105, 110, 58, 48, 59, 108, 105, 110,\n        101, 45, 104, 101, 105, 103, 104, 116, 58, 49, 112, 120, 59, 102, 61, 13, 10,\n        111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 112, 120, 59, 34, 62, 60, 47,\n        116, 100, 62, 13, 10, 60, 47, 116, 114, 62, 13, 10, 60, 116, 114, 62, 13, 10,\n        60, 116, 100, 32, 97, 108, 105, 103, 110, 61, 51, 68, 34, 108, 101, 102, 116,\n        59, 34, 32, 99, 108, 97, 115, 115, 61, 51, 68, 34, 98, 111, 100, 121, 45, 116,\n        101, 120, 116, 34, 32, 115, 116, 121, 108, 101, 61, 51, 68, 34, 112, 97, 100,\n        100, 105, 110, 103, 58, 48, 59, 109, 97, 114, 103, 105, 110, 58, 48, 59, 108,\n        105, 110, 101, 45, 104, 101, 61, 13, 10, 105, 103, 104, 116, 58, 49, 112, 120,\n        59, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 112, 120, 59, 102,\n        111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 39, 72, 101, 108, 118,\n        101, 116, 105, 99, 97, 78, 101, 117, 101, 39, 44, 32, 39, 72, 101, 108, 118,\n        101, 116, 105, 99, 97, 32, 78, 101, 117, 101, 39, 44, 32, 72, 101, 108, 118,\n        101, 61, 13, 10, 116, 105, 99, 97, 44, 32, 65, 114, 105, 97, 108, 44, 32, 115,\n        97, 110, 115, 45, 115, 101, 114, 105, 102, 59, 102, 111, 110, 116, 45, 115,\n        105, 122, 101, 58, 49, 54, 112, 120, 59, 108, 105, 110, 101, 45, 104, 101,\n        105, 103, 104, 116, 58, 50, 48, 112, 120, 59, 102, 111, 110, 116, 45, 119,\n        101, 105, 103, 104, 116, 58, 52, 48, 48, 59, 99, 111, 108, 61, 13, 10, 111,\n        114, 58, 35, 50, 57, 50, 70, 51, 51, 59, 116, 101, 120, 116, 45, 97, 108, 105,\n        103, 110, 58, 108, 101, 102, 116, 59, 116, 101, 120, 116, 45, 100, 101, 99,\n        111, 114, 97, 116, 105, 111, 110, 58, 110, 111, 110, 101, 59, 45, 119, 101,\n        98, 107, 105, 116, 45, 102, 111, 110, 116, 45, 115, 109, 111, 111, 116, 104,\n        105, 110, 103, 58, 97, 110, 116, 105, 61, 13, 10, 97, 108, 105, 97, 115, 101,\n        100, 59, 34, 62, 32, 60, 115, 116, 114, 111, 110, 103, 62, 71, 101, 116, 116,\n        105, 110, 103, 32, 97, 32, 108, 111, 116, 32, 111, 102, 32, 112, 97, 115, 115,\n        119, 111, 114, 100, 32, 114, 101, 115, 101, 116, 32, 101, 109, 97, 105, 108,\n        115, 63, 60, 47, 115, 116, 114, 111, 110, 103, 62, 32, 60, 47, 116, 100, 62,\n        13, 10, 60, 47, 116, 114, 62, 13, 10, 60, 116, 114, 62, 13, 10, 60, 116, 100,\n        32, 104, 101, 105, 103, 104, 116, 61, 51, 68, 34, 49, 50, 34, 32, 115, 116,\n        121, 108, 101, 61, 51, 68, 34, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59,\n        109, 97, 114, 103, 105, 110, 58, 48, 59, 108, 105, 110, 101, 45, 104, 101,\n        105, 103, 104, 116, 58, 49, 112, 120, 59, 102, 111, 110, 116, 45, 115, 105,\n        122, 101, 58, 49, 112, 120, 61, 13, 10, 59, 34, 62, 60, 47, 116, 100, 62, 13,\n        10, 60, 47, 116, 114, 62, 13, 10, 60, 116, 114, 62, 13, 10, 60, 116, 100, 32,\n        97, 108, 105, 103, 110, 61, 51, 68, 34, 108, 101, 102, 116, 59, 34, 32, 99,\n        108, 97, 115, 115, 61, 51, 68, 34, 98, 111, 100, 121, 45, 116, 101, 120, 116,\n        34, 32, 115, 116, 121, 108, 101, 61, 51, 68, 34, 112, 97, 100, 100, 105, 110,\n        103, 58, 48, 59, 109, 97, 114, 103, 105, 110, 58, 48, 59, 108, 105, 110, 101,\n        45, 104, 101, 61, 13, 10, 105, 103, 104, 116, 58, 49, 112, 120, 59, 102, 111,\n        110, 116, 45, 115, 105, 122, 101, 58, 49, 112, 120, 59, 102, 111, 110, 116,\n        45, 102, 97, 109, 105, 108, 121, 58, 39, 72, 101, 108, 118, 101, 116, 105, 99,\n        97, 78, 101, 117, 101, 39, 44, 32, 39, 72, 101, 108, 118, 101, 116, 105, 99,\n        97, 32, 78, 101, 117, 101, 39, 44, 32, 72, 101, 108, 118, 101, 61, 13, 10,\n        116, 105, 99, 97, 44, 32, 65, 114, 105, 97, 108, 44, 32, 115, 97, 110, 115,\n        45, 115, 101, 114, 105, 102, 59, 102, 111, 110, 116, 45, 115, 105, 122, 101,\n        58, 49, 54, 112, 120, 59, 108, 105, 110, 101, 45, 104, 101, 105, 103, 104,\n        116, 58, 50, 48, 112, 120, 59, 102, 111, 110, 116, 45, 119, 101, 105, 103,\n        104, 116, 58, 52, 48, 48, 59, 99, 111, 108, 61, 13, 10, 111, 114, 58, 35, 50,\n        57, 50, 70, 51, 51, 59, 116, 101, 120, 116, 45, 97, 108, 105, 103, 110, 58,\n        108, 101, 102, 116, 59, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97,\n        116, 105, 111, 110, 58, 110, 111, 110, 101, 59, 45, 119, 101, 98, 107, 105,\n        116, 45, 102, 111, 110, 116, 45, 115, 109, 111, 111, 116, 104, 105, 110, 103,\n        58, 97, 110, 116, 105, 61, 13, 10, 97, 108, 105, 97, 115, 101, 100, 59, 34,\n        62, 32, 89, 111, 117, 32, 99, 97, 110, 32, 99, 104, 97, 110, 103, 101, 32,\n        121, 111, 117, 114, 32, 60, 97, 32, 104, 114, 101, 102, 61, 51, 68, 34, 104,\n        116, 116, 112, 115, 58, 47, 47, 116, 119, 105, 116, 116, 101, 114, 46, 99,\n        111, 109, 47, 105, 47, 114, 101, 100, 105, 114, 101, 99, 116, 63, 117, 114,\n        61, 13, 10, 108, 61, 51, 68, 104, 116, 116, 112, 115, 37, 51, 65, 37, 50, 70,\n        37, 50, 70, 116, 119, 105, 116, 116, 101, 114, 46, 99, 111, 109, 37, 50, 70,\n        115, 101, 116, 116, 105, 110, 103, 115, 37, 50, 70, 115, 101, 99, 117, 114,\n        105, 116, 121, 38, 97, 109, 112, 59, 116, 61, 51, 68, 49, 38, 97, 109, 112,\n        59, 99, 110, 61, 51, 68, 99, 71, 70, 122, 61, 13, 10, 99, 51, 100, 118, 99,\n        109, 82, 102, 99, 109, 86, 122, 90, 88, 82, 102, 99, 71, 108, 117, 88, 50, 74,\n        104, 99, 50, 86, 107, 88, 50, 86, 116, 89, 87, 108, 115, 38, 97, 109, 112, 59,\n        115, 105, 103, 61, 51, 68, 52, 102, 51, 50, 56, 48, 51, 51, 54, 56, 50, 51,\n        49, 52, 100, 55, 100, 52, 48, 54, 99, 100, 53, 102, 51, 102, 49, 48, 61, 13,\n        10, 99, 102, 53, 54, 51, 57, 102, 54, 100, 99, 100, 102, 38, 97, 109, 112, 59,\n        105, 105, 100, 61, 51, 68, 55, 53, 51, 51, 100, 53, 51, 56, 99, 55, 57, 55,\n        52, 57, 98, 50, 97, 99, 56, 52, 56, 100, 49, 100, 55, 102, 99, 56, 50, 57, 97,\n        49, 38, 97, 109, 112, 59, 117, 105, 100, 61, 51, 68, 49, 50, 53, 55, 52, 51,\n        53, 54, 50, 61, 13, 10, 49, 55, 55, 49, 49, 52, 49, 49, 50, 48, 38, 97, 109,\n        112, 59, 110, 105, 100, 61, 51, 68, 50, 57, 54, 43, 51, 34, 32, 115, 116, 121,\n        108, 101, 61, 51, 68, 34, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97,\n        116, 105, 111, 110, 58, 110, 111, 110, 101, 59, 98, 111, 114, 100, 101, 114,\n        45, 115, 116, 121, 108, 101, 58, 110, 111, 110, 101, 61, 13, 10, 59, 98, 111,\n        114, 100, 101, 114, 58, 48, 59, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59,\n        109, 97, 114, 103, 105, 110, 58, 48, 59, 98, 111, 114, 100, 101, 114, 58, 110,\n        111, 110, 101, 59, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116,\n        105, 111, 110, 58, 110, 111, 110, 101, 59, 102, 111, 110, 116, 45, 119, 101,\n        105, 103, 104, 116, 58, 52, 61, 13, 10, 48, 48, 59, 99, 111, 108, 111, 114,\n        58, 35, 49, 68, 65, 49, 70, 50, 59, 34, 62, 97, 99, 99, 111, 117, 110, 116,\n        32, 115, 101, 116, 116, 105, 110, 103, 115, 60, 47, 97, 62, 32, 116, 111, 32,\n        114, 101, 113, 117, 105, 114, 101, 32, 112, 101, 114, 115, 111, 110, 97, 108,\n        32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 116, 111, 32,\n        61, 13, 10, 114, 101, 115, 101, 116, 32, 121, 111, 117, 114, 32, 112, 97, 115,\n        115, 119, 111, 114, 100, 46, 32, 60, 47, 116, 100, 62, 13, 10, 60, 47, 116,\n        114, 62, 13, 10, 60, 116, 114, 62, 13, 10, 60, 116, 100, 32, 104, 101, 105,\n        103, 104, 116, 61, 51, 68, 34, 51, 54, 34, 32, 115, 116, 121, 108, 101, 61,\n        51, 68, 34, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 109, 97, 114, 103,\n        105, 110, 58, 48, 59, 108, 105, 110, 101, 45, 104, 101, 105, 103, 104, 116,\n        58, 49, 112, 120, 59, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 112,\n        120, 61, 13, 10, 59, 34, 62, 60, 47, 116, 100, 62, 13, 10, 60, 47, 116, 114,\n        62, 13, 10, 60, 47, 116, 98, 111, 100, 121, 62, 13, 10, 60, 47, 116, 97, 98,\n        108, 101, 62, 32, 60, 47, 116, 100, 62, 13, 10, 60, 116, 100, 32, 119, 105,\n        100, 116, 104, 61, 51, 68, 34, 50, 52, 34, 32, 99, 108, 97, 115, 115, 61, 51,\n        68, 34, 109, 97, 114, 103, 105, 110, 34, 32, 115, 116, 121, 108, 101, 61, 51,\n        68, 34, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 109, 97, 114, 103, 105,\n        110, 58, 48, 59, 108, 105, 110, 101, 45, 104, 101, 105, 103, 104, 116, 58, 49,\n        61, 13, 10, 112, 120, 59, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49,\n        112, 120, 59, 34, 62, 60, 47, 116, 100, 62, 13, 10, 60, 47, 116, 114, 62, 13,\n        10, 60, 47, 116, 98, 111, 100, 121, 62, 13, 10, 60, 47, 116, 97, 98, 108, 101,\n        62, 13, 10, 60, 33, 45, 45, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,\n        47, 47, 47, 47, 47, 47, 47, 32, 101, 110, 100, 32, 98, 111, 100, 121, 47, 47,\n        47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,\n        47, 47, 47, 47, 47, 47, 45, 45, 62, 13, 10, 60, 33, 45, 45, 47, 47, 47, 47,\n        47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 32, 102,\n        111, 111, 116, 101, 114, 32, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,\n        47, 47, 47, 47, 47, 47, 47, 47, 47, 45, 45, 62, 13, 10, 60, 116, 97, 98, 108,\n        101, 32, 99, 108, 97, 115, 115, 61, 51, 68, 34, 99, 111, 108, 108, 97, 112,\n        115, 101, 34, 32, 105, 100, 61, 51, 68, 34, 102, 111, 111, 116, 101, 114, 34,\n        32, 97, 108, 105, 103, 110, 61, 51, 68, 34, 99, 101, 110, 116, 101, 114, 34,\n        32, 119, 105, 100, 116, 104, 61, 51, 68, 34, 52, 52, 56, 34, 32, 115, 116,\n        121, 108, 61, 13, 10, 101, 61, 51, 68, 34, 119, 105, 100, 116, 104, 58, 52,\n        52, 56, 112, 120, 59, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45,\n        99, 111, 108, 111, 114, 58, 35, 102, 102, 102, 102, 102, 102, 59, 112, 97,\n        100, 100, 105, 110, 103, 58, 48, 59, 109, 97, 114, 103, 105, 110, 58, 48, 59,\n        108, 105, 110, 101, 45, 104, 101, 105, 103, 104, 116, 58, 49, 61, 13, 10, 112,\n        120, 59, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 112, 120, 59, 34,\n        32, 99, 101, 108, 108, 112, 97, 100, 100, 105, 110, 103, 61, 51, 68, 34, 48,\n        34, 32, 99, 101, 108, 108, 115, 112, 97, 99, 105, 110, 103, 61, 51, 68, 34,\n        48, 34, 32, 98, 111, 114, 100, 101, 114, 61, 51, 68, 34, 48, 34, 62, 13, 10,\n        60, 116, 98, 111, 100, 121, 62, 13, 10, 60, 116, 114, 62, 13, 10, 60, 116,\n        100, 32, 104, 101, 105, 103, 104, 116, 61, 51, 68, 34, 51, 54, 34, 32, 115,\n        116, 121, 108, 101, 61, 51, 68, 34, 104, 101, 105, 103, 104, 116, 58, 51, 54,\n        112, 120, 59, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 109, 97, 114, 103,\n        105, 110, 58, 48, 59, 108, 105, 110, 101, 45, 104, 101, 105, 103, 104, 116,\n        58, 49, 112, 120, 59, 102, 61, 13, 10, 111, 110, 116, 45, 115, 105, 122, 101,\n        58, 49, 112, 120, 59, 34, 62, 60, 47, 116, 100, 62, 13, 10, 60, 47, 116, 114,\n        62, 13, 10, 60, 116, 114, 62, 13, 10, 60, 116, 100, 32, 97, 108, 105, 103,\n        110, 61, 51, 68, 34, 99, 101, 110, 116, 101, 114, 34, 32, 115, 116, 121, 108,\n        101, 61, 51, 68, 34, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 109, 97,\n        114, 103, 105, 110, 58, 48, 59, 108, 105, 110, 101, 45, 104, 101, 105, 103,\n        104, 116, 58, 49, 112, 120, 59, 102, 111, 110, 116, 45, 115, 105, 122, 101,\n        58, 61, 13, 10, 49, 112, 120, 59, 34, 62, 32, 60, 115, 112, 97, 110, 32, 99,\n        108, 97, 115, 115, 61, 51, 68, 34, 115, 109, 97, 108, 108, 45, 99, 111, 112,\n        121, 34, 32, 115, 116, 121, 108, 101, 61, 51, 68, 34, 102, 111, 110, 116, 45,\n        102, 97, 109, 105, 108, 121, 58, 39, 72, 101, 108, 118, 101, 116, 105, 99, 97,\n        78, 101, 117, 101, 39, 44, 32, 39, 72, 101, 61, 13, 10, 108, 118, 101, 116,\n        105, 99, 97, 32, 78, 101, 117, 101, 39, 44, 32, 72, 101, 108, 118, 101, 116,\n        105, 99, 97, 44, 32, 65, 114, 105, 97, 108, 44, 32, 115, 97, 110, 115, 45,\n        115, 101, 114, 105, 102, 59, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58,\n        49, 50, 112, 120, 59, 108, 105, 110, 101, 45, 104, 101, 105, 103, 104, 116,\n        58, 49, 54, 112, 120, 61, 13, 10, 59, 102, 111, 110, 116, 45, 119, 101, 105,\n        103, 104, 116, 58, 52, 48, 48, 59, 99, 111, 108, 111, 114, 58, 35, 56, 56, 57,\n        57, 65, 54, 59, 116, 101, 120, 116, 45, 97, 108, 105, 103, 110, 58, 108, 101,\n        102, 116, 59, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105,\n        111, 110, 58, 110, 111, 110, 101, 59, 45, 119, 101, 98, 107, 105, 116, 61, 13,\n        10, 45, 102, 111, 110, 116, 45, 115, 109, 111, 111, 116, 104, 105, 110, 103,\n        58, 97, 110, 116, 105, 97, 108, 105, 97, 115, 101, 100, 59, 34, 62, 32, 60,\n        97, 32, 104, 114, 101, 102, 61, 51, 68, 34, 104, 116, 116, 112, 115, 58, 47,\n        47, 115, 117, 112, 112, 111, 114, 116, 46, 116, 119, 105, 116, 116, 101, 114,\n        46, 99, 111, 109, 47, 97, 114, 116, 105, 99, 61, 13, 10, 108, 101, 115, 47,\n        49, 52, 54, 54, 51, 34, 32, 99, 108, 97, 115, 115, 61, 51, 68, 34, 115, 109,\n        97, 108, 108, 45, 99, 111, 112, 121, 34, 32, 115, 116, 121, 108, 101, 61, 51,\n        68, 34, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111,\n        110, 58, 110, 111, 110, 101, 59, 98, 111, 114, 100, 101, 114, 45, 115, 116,\n        121, 108, 101, 58, 61, 13, 10, 110, 111, 110, 101, 59, 98, 111, 114, 100, 101,\n        114, 58, 48, 59, 112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 109, 97, 114,\n        103, 105, 110, 58, 48, 59, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108,\n        121, 58, 39, 72, 101, 108, 118, 101, 116, 105, 99, 97, 78, 101, 117, 101, 39,\n        44, 32, 39, 72, 101, 108, 118, 101, 116, 105, 99, 97, 32, 78, 101, 61, 13, 10,\n        117, 101, 39, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 65,\n        114, 105, 97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 59,\n        102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 50, 112, 120, 59, 108,\n        105, 110, 101, 45, 104, 101, 105, 103, 104, 116, 58, 49, 54, 112, 120, 59,\n        102, 111, 110, 116, 45, 119, 101, 105, 103, 61, 13, 10, 104, 116, 58, 52, 48,\n        48, 59, 99, 111, 108, 111, 114, 58, 35, 56, 56, 57, 57, 65, 54, 59, 116, 101,\n        120, 116, 45, 97, 108, 105, 103, 110, 58, 108, 101, 102, 116, 59, 116, 101,\n        120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 110, 111,\n        110, 101, 59, 45, 119, 101, 98, 107, 105, 116, 45, 102, 111, 110, 116, 45,\n        115, 109, 111, 111, 61, 13, 10, 116, 104, 105, 110, 103, 58, 97, 110, 116,\n        105, 97, 108, 105, 97, 115, 101, 100, 59, 102, 111, 110, 116, 45, 102, 97,\n        109, 105, 108, 121, 58, 39, 72, 101, 108, 118, 101, 116, 105, 99, 97, 78, 101,\n        117, 101, 39, 44, 32, 39, 72, 101, 108, 118, 101, 116, 105, 99, 97, 32, 78,\n        101, 117, 101, 39, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 61,\n        13, 10, 32, 65, 114, 105, 97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101,\n        114, 105, 102, 59, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 50,\n        112, 120, 59, 108, 105, 110, 101, 45, 104, 101, 105, 103, 104, 116, 58, 49,\n        54, 112, 120, 59, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58,\n        54, 48, 48, 59, 99, 111, 108, 111, 114, 58, 35, 49, 61, 13, 10, 68, 65, 49,\n        70, 50, 59, 116, 101, 120, 116, 45, 97, 108, 105, 103, 110, 58, 108, 101, 102,\n        116, 59, 116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111,\n        110, 58, 110, 111, 110, 101, 59, 45, 119, 101, 98, 107, 105, 116, 45, 102,\n        111, 110, 116, 45, 115, 109, 111, 111, 116, 104, 105, 110, 103, 58, 97, 110,\n        116, 105, 97, 108, 105, 97, 115, 61, 13, 10, 101, 100, 59, 34, 62, 72, 101,\n        108, 112, 60, 47, 97, 62, 32, 38, 110, 98, 115, 112, 59, 124, 38, 110, 98,\n        115, 112, 59, 32, 60, 97, 32, 104, 114, 101, 102, 61, 51, 68, 34, 104, 116,\n        116, 112, 115, 58, 47, 47, 116, 119, 105, 116, 116, 101, 114, 46, 99, 111,\n        109, 47, 97, 99, 99, 111, 117, 110, 116, 47, 110, 111, 116, 95, 109, 121, 95,\n        97, 61, 13, 10, 99, 99, 111, 117, 110, 116, 47, 49, 50, 53, 55, 52, 51, 53,\n        54, 50, 49, 55, 55, 49, 49, 52, 49, 49, 50, 48, 47, 65, 65, 53, 55, 72, 45,\n        65, 68, 57, 71, 72, 45, 49, 55, 50, 56, 56, 56, 63, 117, 116, 61, 51, 68, 49,\n        38, 97, 109, 112, 59, 99, 110, 61, 51, 68, 99, 71, 70, 122, 99, 51, 100, 118,\n        99, 109, 82, 102, 99, 61, 13, 10, 109, 86, 122, 90, 88, 82, 102, 99, 71, 108,\n        117, 88, 50, 74, 104, 99, 50, 86, 107, 88, 50, 86, 116, 89, 87, 108, 115, 34,\n        32, 99, 108, 97, 115, 115, 61, 51, 68, 34, 115, 109, 97, 108, 108, 45, 99,\n        111, 112, 121, 34, 32, 115, 116, 121, 108, 101, 61, 51, 68, 34, 116, 101, 120,\n        116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 61, 13, 10, 110,\n        111, 110, 101, 59, 98, 111, 114, 100, 101, 114, 45, 115, 116, 121, 108, 101,\n        58, 110, 111, 110, 101, 59, 98, 111, 114, 100, 101, 114, 58, 48, 59, 112, 97,\n        100, 100, 105, 110, 103, 58, 48, 59, 109, 97, 114, 103, 105, 110, 58, 48, 59,\n        102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 39, 72, 101, 108,\n        118, 101, 116, 105, 99, 97, 78, 101, 61, 13, 10, 117, 101, 39, 44, 32, 39, 72,\n        101, 108, 118, 101, 116, 105, 99, 97, 32, 78, 101, 117, 101, 39, 44, 32, 72,\n        101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 65, 114, 105, 97, 108, 44, 32,\n        115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 59, 102, 111, 110, 116, 45,\n        115, 105, 122, 101, 58, 49, 50, 112, 120, 59, 108, 105, 110, 101, 45, 104,\n        101, 105, 61, 13, 10, 103, 104, 116, 58, 49, 54, 112, 120, 59, 102, 111, 110,\n        116, 45, 119, 101, 105, 103, 104, 116, 58, 52, 48, 48, 59, 99, 111, 108, 111,\n        114, 58, 35, 56, 56, 57, 57, 65, 54, 59, 116, 101, 120, 116, 45, 97, 108, 105,\n        103, 110, 58, 108, 101, 102, 116, 59, 116, 101, 120, 116, 45, 100, 101, 99,\n        111, 114, 97, 116, 105, 111, 110, 58, 110, 111, 110, 101, 61, 13, 10, 59, 45,\n        119, 101, 98, 107, 105, 116, 45, 102, 111, 110, 116, 45, 115, 109, 111, 111,\n        116, 104, 105, 110, 103, 58, 97, 110, 116, 105, 97, 108, 105, 97, 115, 101,\n        100, 59, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 39, 72, 101,\n        108, 118, 101, 116, 105, 99, 97, 78, 101, 117, 101, 39, 44, 32, 39, 72, 101,\n        108, 118, 101, 116, 105, 99, 97, 61, 13, 10, 32, 78, 101, 117, 101, 39, 44,\n        32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 65, 114, 105, 97, 108,\n        44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 59, 102, 111, 110,\n        116, 45, 115, 105, 122, 101, 58, 49, 50, 112, 120, 59, 108, 105, 110, 101, 45,\n        104, 101, 105, 103, 104, 116, 58, 49, 54, 112, 120, 59, 102, 111, 110, 116,\n        45, 119, 61, 13, 10, 101, 105, 103, 104, 116, 58, 54, 48, 48, 59, 99, 111,\n        108, 111, 114, 58, 35, 49, 68, 65, 49, 70, 50, 59, 116, 101, 120, 116, 45, 97,\n        108, 105, 103, 110, 58, 108, 101, 102, 116, 59, 116, 101, 120, 116, 45, 100,\n        101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 110, 111, 110, 101, 59, 45,\n        119, 101, 98, 107, 105, 116, 45, 102, 111, 110, 116, 45, 115, 61, 13, 10, 109,\n        111, 111, 116, 104, 105, 110, 103, 58, 97, 110, 116, 105, 97, 108, 105, 97,\n        115, 101, 100, 59, 34, 62, 78, 111, 116, 32, 109, 121, 32, 97, 99, 99, 111,\n        117, 110, 116, 60, 47, 97, 62, 32, 38, 110, 98, 115, 112, 59, 124, 38, 110,\n        98, 115, 112, 59, 32, 60, 97, 32, 104, 114, 101, 102, 61, 51, 68, 34, 104,\n        116, 116, 112, 115, 58, 47, 47, 61, 13, 10, 116, 46, 99, 111, 47, 114, 101,\n        100, 105, 114, 101, 99, 116, 63, 117, 114, 108, 61, 51, 68, 104, 116, 116,\n        112, 115, 37, 51, 65, 37, 50, 70, 37, 50, 70, 104, 101, 108, 112, 46, 120, 46,\n        99, 111, 109, 37, 50, 70, 115, 97, 102, 101, 116, 121, 45, 97, 110, 100, 45,\n        115, 101, 99, 117, 114, 105, 116, 121, 37, 50, 70, 102, 97, 107, 101, 45, 120,\n        61, 13, 10, 45, 101, 109, 97, 105, 108, 115, 38, 97, 109, 112, 59, 116, 61,\n        51, 68, 49, 38, 97, 109, 112, 59, 99, 110, 61, 51, 68, 99, 71, 70, 122, 99,\n        51, 100, 118, 99, 109, 82, 102, 99, 109, 86, 122, 90, 88, 82, 102, 99, 71,\n        108, 117, 88, 50, 74, 104, 99, 50, 86, 107, 88, 50, 86, 116, 89, 87, 108, 115,\n        38, 97, 109, 112, 59, 115, 105, 103, 61, 13, 10, 61, 51, 68, 102, 102, 97, 55,\n        97, 51, 53, 53, 101, 100, 49, 102, 54, 99, 51, 55, 52, 101, 52, 53, 102, 55,\n        53, 100, 102, 55, 100, 100, 56, 49, 99, 57, 52, 54, 52, 52, 51, 53, 56, 48,\n        38, 97, 109, 112, 59, 105, 105, 100, 61, 51, 68, 55, 53, 51, 51, 100, 53, 51,\n        56, 99, 55, 57, 55, 52, 57, 98, 50, 97, 99, 56, 52, 56, 61, 13, 10, 100, 49,\n        100, 55, 102, 99, 56, 50, 57, 97, 49, 38, 97, 109, 112, 59, 117, 105, 100, 61,\n        51, 68, 49, 50, 53, 55, 52, 51, 53, 54, 50, 49, 55, 55, 49, 49, 52, 49, 49,\n        50, 48, 38, 97, 109, 112, 59, 110, 105, 100, 61, 51, 68, 50, 57, 54, 43, 54,\n        34, 32, 99, 108, 97, 115, 115, 61, 51, 68, 34, 115, 109, 97, 108, 108, 45, 99,\n        61, 13, 10, 111, 112, 121, 34, 32, 115, 116, 121, 108, 101, 61, 51, 68, 34,\n        116, 101, 120, 116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58,\n        110, 111, 110, 101, 59, 98, 111, 114, 100, 101, 114, 45, 115, 116, 121, 108,\n        101, 58, 110, 111, 110, 101, 59, 98, 111, 114, 100, 101, 114, 58, 48, 59, 112,\n        97, 100, 100, 105, 110, 103, 58, 48, 59, 109, 97, 114, 61, 13, 10, 103, 105,\n        110, 58, 48, 59, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 39,\n        72, 101, 108, 118, 101, 116, 105, 99, 97, 78, 101, 117, 101, 39, 44, 32, 39,\n        72, 101, 108, 118, 101, 116, 105, 99, 97, 32, 78, 101, 117, 101, 39, 44, 32,\n        72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 65, 114, 105, 97, 108, 44,\n        32, 115, 97, 110, 115, 61, 13, 10, 45, 115, 101, 114, 105, 102, 59, 102, 111,\n        110, 116, 45, 115, 105, 122, 101, 58, 49, 50, 112, 120, 59, 108, 105, 110,\n        101, 45, 104, 101, 105, 103, 104, 116, 58, 49, 54, 112, 120, 59, 102, 111,\n        110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 52, 48, 48, 59, 99, 111, 108,\n        111, 114, 58, 35, 56, 56, 57, 57, 65, 54, 59, 116, 101, 120, 116, 45, 97, 61,\n        13, 10, 108, 105, 103, 110, 58, 108, 101, 102, 116, 59, 116, 101, 120, 116,\n        45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 110, 111, 110, 101,\n        59, 45, 119, 101, 98, 107, 105, 116, 45, 102, 111, 110, 116, 45, 115, 109,\n        111, 111, 116, 104, 105, 110, 103, 58, 97, 110, 116, 105, 97, 108, 105, 97,\n        115, 101, 100, 59, 102, 111, 110, 116, 45, 102, 97, 109, 105, 61, 13, 10, 108,\n        121, 58, 39, 72, 101, 108, 118, 101, 116, 105, 99, 97, 78, 101, 117, 101, 39,\n        44, 32, 39, 72, 101, 108, 118, 101, 116, 105, 99, 97, 32, 78, 101, 117, 101,\n        39, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 65, 114, 105,\n        97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 59, 102, 111,\n        110, 116, 45, 115, 105, 122, 61, 13, 10, 101, 58, 49, 50, 112, 120, 59, 108,\n        105, 110, 101, 45, 104, 101, 105, 103, 104, 116, 58, 49, 54, 112, 120, 59,\n        102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 54, 48, 48, 59, 99,\n        111, 108, 111, 114, 58, 35, 49, 68, 65, 49, 70, 50, 59, 116, 101, 120, 116,\n        45, 97, 108, 105, 103, 110, 58, 108, 101, 102, 116, 59, 116, 101, 120, 116,\n        45, 61, 13, 10, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 110, 111,\n        110, 101, 59, 45, 119, 101, 98, 107, 105, 116, 45, 102, 111, 110, 116, 45,\n        115, 109, 111, 111, 116, 104, 105, 110, 103, 58, 97, 110, 116, 105, 97, 108,\n        105, 97, 115, 101, 100, 59, 34, 62, 69, 109, 97, 105, 108, 32, 115, 101, 99,\n        117, 114, 105, 116, 121, 32, 116, 105, 112, 115, 60, 47, 97, 61, 13, 10, 62,\n        32, 60, 47, 115, 112, 97, 110, 62, 32, 60, 47, 116, 100, 62, 13, 10, 60, 47,\n        116, 114, 62, 13, 10, 60, 116, 114, 62, 13, 10, 60, 116, 100, 32, 104, 101,\n        105, 103, 104, 116, 61, 51, 68, 34, 49, 50, 34, 32, 115, 116, 121, 108, 101,\n        61, 51, 68, 34, 104, 101, 105, 103, 104, 116, 58, 49, 50, 112, 120, 59, 108,\n        105, 110, 101, 45, 104, 101, 105, 103, 104, 116, 58, 49, 112, 120, 59, 102,\n        111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 112, 120, 59, 112, 97, 100,\n        100, 105, 110, 61, 13, 10, 103, 58, 48, 59, 109, 97, 114, 103, 105, 110, 58,\n        48, 59, 108, 105, 110, 101, 45, 104, 101, 105, 103, 104, 116, 58, 49, 112,\n        120, 59, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 112, 120, 59, 34,\n        62, 60, 47, 116, 100, 62, 13, 10, 60, 47, 116, 114, 62, 13, 10, 60, 116, 114,\n        62, 13, 10, 60, 116, 100, 32, 97, 108, 105, 103, 110, 61, 51, 68, 34, 99, 101,\n        110, 116, 101, 114, 34, 32, 115, 116, 121, 108, 101, 61, 51, 68, 34, 112, 97,\n        100, 100, 105, 110, 103, 58, 48, 59, 109, 97, 114, 103, 105, 110, 58, 48, 59,\n        108, 105, 110, 101, 45, 104, 101, 105, 103, 104, 116, 58, 49, 112, 120, 59,\n        102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 61, 13, 10, 49, 112, 120, 59,\n        34, 62, 32, 60, 115, 112, 97, 110, 32, 99, 108, 97, 115, 115, 61, 51, 68, 34,\n        115, 109, 97, 108, 108, 45, 99, 111, 112, 121, 34, 32, 115, 116, 121, 108,\n        101, 61, 51, 68, 34, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58,\n        39, 72, 101, 108, 118, 101, 116, 105, 99, 97, 78, 101, 117, 101, 39, 44, 32,\n        39, 72, 101, 61, 13, 10, 108, 118, 101, 116, 105, 99, 97, 32, 78, 101, 117,\n        101, 39, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 65, 114,\n        105, 97, 108, 44, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 59, 102,\n        111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 50, 112, 120, 59, 108, 105,\n        110, 101, 45, 104, 101, 105, 103, 104, 116, 58, 49, 54, 112, 120, 61, 13, 10,\n        59, 102, 111, 110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 52, 48, 48, 59,\n        99, 111, 108, 111, 114, 58, 35, 56, 56, 57, 57, 65, 54, 59, 116, 101, 120,\n        116, 45, 97, 108, 105, 103, 110, 58, 108, 101, 102, 116, 59, 116, 101, 120,\n        116, 45, 100, 101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 110, 111, 110,\n        101, 59, 45, 119, 101, 98, 107, 105, 116, 61, 13, 10, 45, 102, 111, 110, 116,\n        45, 115, 109, 111, 111, 116, 104, 105, 110, 103, 58, 97, 110, 116, 105, 97,\n        108, 105, 97, 115, 101, 100, 59, 34, 62, 32, 84, 104, 105, 115, 32, 101, 109,\n        97, 105, 108, 32, 119, 97, 115, 32, 109, 101, 97, 110, 116, 32, 102, 111, 114,\n        32, 64, 69, 110, 118, 111, 121, 95, 49, 48, 56, 52, 32, 60, 47, 115, 112, 97,\n        110, 62, 61, 13, 10, 32, 60, 47, 116, 100, 62, 13, 10, 60, 47, 116, 114, 62,\n        13, 10, 60, 116, 114, 62, 13, 10, 60, 116, 100, 32, 104, 101, 105, 103, 104,\n        116, 61, 51, 68, 34, 54, 34, 32, 115, 116, 121, 108, 101, 61, 51, 68, 34, 104,\n        101, 105, 103, 104, 116, 58, 54, 112, 120, 59, 108, 105, 110, 101, 45, 104,\n        101, 105, 103, 104, 116, 58, 49, 112, 120, 59, 102, 111, 110, 116, 45, 115,\n        105, 122, 101, 58, 49, 112, 120, 59, 112, 97, 100, 100, 105, 110, 103, 58, 61,\n        13, 10, 48, 59, 109, 97, 114, 103, 105, 110, 58, 48, 59, 108, 105, 110, 101,\n        45, 104, 101, 105, 103, 104, 116, 58, 49, 112, 120, 59, 102, 111, 110, 116,\n        45, 115, 105, 122, 101, 58, 49, 112, 120, 59, 34, 62, 60, 47, 116, 100, 62,\n        13, 10, 60, 47, 116, 114, 62, 13, 10, 60, 116, 114, 62, 13, 10, 60, 116, 100,\n        32, 97, 108, 105, 103, 110, 61, 51, 68, 34, 99, 101, 110, 116, 101, 114, 34,\n        32, 115, 116, 121, 108, 101, 61, 51, 68, 34, 112, 97, 100, 100, 105, 110, 103,\n        58, 48, 59, 109, 97, 114, 103, 105, 110, 58, 48, 59, 108, 105, 110, 101, 45,\n        104, 101, 105, 103, 104, 116, 58, 49, 112, 120, 59, 102, 111, 110, 116, 45,\n        115, 105, 122, 101, 58, 61, 13, 10, 49, 112, 120, 59, 34, 62, 32, 60, 115,\n        112, 97, 110, 32, 99, 108, 97, 115, 115, 61, 51, 68, 34, 97, 100, 100, 114,\n        101, 115, 115, 34, 62, 32, 60, 97, 32, 104, 114, 101, 102, 61, 51, 68, 34, 35,\n        34, 32, 115, 116, 121, 108, 101, 61, 51, 68, 34, 116, 101, 120, 116, 45, 100,\n        101, 99, 111, 114, 97, 116, 105, 111, 110, 58, 110, 111, 110, 101, 61, 13, 10,\n        59, 98, 111, 114, 100, 101, 114, 45, 115, 116, 121, 108, 101, 58, 110, 111,\n        110, 101, 59, 98, 111, 114, 100, 101, 114, 58, 48, 59, 112, 97, 100, 100, 105,\n        110, 103, 58, 48, 59, 109, 97, 114, 103, 105, 110, 58, 48, 59, 102, 111, 110,\n        116, 45, 102, 97, 109, 105, 108, 121, 58, 39, 72, 101, 108, 118, 101, 116,\n        105, 99, 97, 78, 101, 117, 101, 39, 44, 61, 13, 10, 32, 39, 72, 101, 108, 118,\n        101, 116, 105, 99, 97, 32, 78, 101, 117, 101, 39, 44, 32, 72, 101, 108, 118,\n        101, 116, 105, 99, 97, 44, 32, 65, 114, 105, 97, 108, 44, 32, 115, 97, 110,\n        115, 45, 115, 101, 114, 105, 102, 59, 45, 119, 101, 98, 107, 105, 116, 45,\n        102, 111, 110, 116, 45, 115, 109, 111, 111, 116, 104, 105, 110, 103, 58, 97,\n        110, 116, 105, 61, 13, 10, 97, 108, 105, 97, 115, 101, 100, 59, 99, 111, 108,\n        111, 114, 58, 35, 56, 56, 57, 57, 65, 54, 59, 102, 111, 110, 116, 45, 115,\n        105, 122, 101, 58, 49, 50, 112, 120, 59, 112, 97, 100, 100, 105, 110, 103, 58,\n        48, 112, 120, 59, 109, 97, 114, 103, 105, 110, 58, 48, 112, 120, 59, 102, 111,\n        110, 116, 45, 119, 101, 105, 103, 104, 116, 58, 110, 111, 114, 61, 13, 10,\n        109, 97, 108, 59, 108, 105, 110, 101, 45, 104, 101, 105, 103, 104, 116, 58,\n        49, 50, 112, 120, 59, 99, 117, 114, 115, 111, 114, 58, 100, 101, 102, 97, 117,\n        108, 116, 59, 34, 62, 88, 32, 67, 111, 114, 112, 46, 32, 49, 51, 53, 53, 32,\n        77, 97, 114, 107, 101, 116, 32, 83, 116, 114, 101, 101, 116, 44, 32, 83, 117,\n        105, 116, 101, 32, 57, 48, 48, 61, 13, 10, 32, 83, 97, 110, 32, 70, 114, 97,\n        110, 99, 105, 115, 99, 111, 44, 32, 67, 65, 32, 57, 52, 49, 48, 51, 60, 47,\n        97, 62, 32, 60, 47, 115, 112, 97, 110, 62, 32, 60, 47, 116, 100, 62, 13, 10,\n        60, 47, 116, 114, 62, 13, 10, 60, 116, 114, 62, 13, 10, 60, 116, 100, 32, 104,\n        101, 105, 103, 104, 116, 61, 51, 68, 34, 55, 50, 34, 32, 115, 116, 121, 108,\n        101, 61, 51, 68, 34, 104, 101, 105, 103, 104, 116, 58, 55, 50, 112, 120, 59,\n        112, 97, 100, 100, 105, 110, 103, 58, 48, 59, 109, 97, 114, 103, 105, 110, 58,\n        48, 59, 108, 105, 110, 101, 45, 104, 101, 105, 103, 104, 116, 58, 49, 112,\n        120, 59, 102, 61, 13, 10, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 112,\n        120, 59, 34, 62, 60, 47, 116, 100, 62, 13, 10, 60, 47, 116, 114, 62, 13, 10,\n        60, 47, 116, 98, 111, 100, 121, 62, 13, 10, 60, 47, 116, 97, 98, 108, 101, 62,\n        13, 10, 60, 33, 45, 45, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,\n        47, 47, 47, 47, 47, 47, 47, 47, 32, 101, 110, 100, 32, 102, 111, 111, 116,\n        101, 114, 32, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,\n        47, 47, 47, 47, 47, 45, 45, 62, 32, 60, 47, 116, 100, 62, 13, 10, 60, 47, 116,\n        114, 62, 13, 10, 60, 47, 116, 98, 111, 100, 121, 62, 13, 10, 60, 47, 116, 97,\n        98, 108, 101, 62, 13, 10, 60, 47, 98, 111, 100, 121, 62, 13, 10, 60, 47, 104,\n        116, 109, 108, 62, 13, 10, 45, 45, 45, 45, 45, 45, 61, 95, 80, 97, 114, 116,\n        95, 57, 57, 48, 51, 53, 56, 95, 51, 49, 53, 56, 49, 50, 54, 55, 56, 46, 49,\n        55, 50, 56, 56, 56, 48, 57, 48, 48, 52, 51, 48, 45, 45, 13, 10, 128, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 1, 185, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n    ];\n\n    let signature:  [Field; 18] = [\n        0x600e8953af9c19f10341e59e9a92dc,\n        0x9d6137e210854875bd298b3fb6ad99,\n        0x55b0d926a23e757246834575878d14,\n        0x2602defc11040e89b797256148497c,\n        0xdfe4df34a21769cab150e3a4177f5a,\n        0x24e7676d0dad5984202b8308780bcc,\n        0x24091f1e3acb5e33addfac307ab888,\n        0xdc166d40d4f8caf64f7d6948eb3bd0,\n        0xaf03973e97f704b3d55e6d4114d75e,\n        0xe4d851c05a1c26e792ab53cdccc480,\n        0x3c7df3075d08d67c880b74352fa69c,\n        0xfc55296ef2fc998fcfd5ef554a2c5b,\n        0x5af8f8b7e84a83d44d9135dd3e7d4a,\n        0xa6ae2f5fcc39d2183f619f913d5722,\n        0xa51078ea96a592e7bafa1581bc98cc,\n        0xbb9177ec8ec59dc02646b5abbbd588,\n        0xe58ec866fb71dc08fbcc1d51264dc4,\n        0x1d\n    ];\n    let pubkey_modulus_limbs: [Field; 18] = [\n        0x8967a931d2ca21c652df494825c63d,\n        0x7d068b9c6250147cacb8f0786dccb5,\n        0x7436a40c9b68e7298c65045a93fc87,\n        0x9020a67668fbaac0d540947f0653f3,\n        0xd19710c0036acc7efb1c5f6c8a4faf,\n        0xefe0b5c633b0be4b86ebe17db85154,\n        0xc33caef88bc13f6ab2725c3386f721,\n        0x075051819421b1a461accf75851dff,\n        0x6fa3c2ec6bae4360f33c7a6bdc1647,\n        0xe197ac59d1c54fef22294ba23274d5,\n        0x1fe2fcf682109ce8f7875c7789c84b,\n        0xbfc2b278635688cc33b89956ed8d73,\n        0x2ae064a2431efe13336926c9b8b82a,\n        0xf8b24f943dd0acf064691e18beb4f7,\n        0xc618092fcc16c581b9e81113cc87c1,\n        0xf9113b691b82bfa396cf869b94bf6e,\n        0x76f3879ada6d3f8859e8150281a74b,\n        0xbf\n    ];\n    let redc_params_limbs: [Field; 18] = [\n        0x749d32b52b73e1f5dcf16b848dc145,\n        0x52ebcef9575a2de39b251488d54d75,\n        0x544e4d199a932fc02a2629211332a8,\n        0x36a48be2e6a7bb5f18ed4234482b93,\n        0x5120fb1d1d1a6d14702f54d22f3b35,\n        0x1412475e6ad621e9e9e3dd17e4df88,\n        0x70ac7170aa843385efbdbffd8f0053,\n        0x0e179c9a19576d47188d09bed675b3,\n        0xa18bcf06ab745979ecee27ecb307ff,\n        0x5bd50d9ffba4eb337089a8d2bf08e0,\n        0x7bf428561893f274568c298836ac2c,\n        0x49713d20bb3f20d843b18164a8dfdb,\n        0x3db2339e26a7c78c265887fb09e859,\n        0xc1694eb4fc858b0b003c8307392175,\n        0xcde3d74b94c549832e46fb3c8e9669,\n        0xc68a2b9d5fc918bf336b4629c844d8,\n        0x49a81f331fe70c1560a62352fb5d41,\n        0x0156\n    ];\n\n    let _ = main(\n        body_hash_index,\n        header,\n        body,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature,\n        padded_username,\n        username.len()\n    );\n}\n","path":"/Users/envoy1084/Projects/Core/ab2/Aztec Passport/packages/twitter_verify/src/main.nr"},"74":{"source":"use dep::bignum::BigNum;\nuse dep::bignum::runtime_bignum::BigNumInstance;\nuse dep::bignum::runtime_bignum::BigNumTrait;\nuse dep::bignum::runtime_bignum::BigNumInstanceTrait;\n\nuse crate::types::{RSA, BN1024, BN2048, BNInst1024, BNInst2048, RSA1024, RSA2048};\n\n/**\n * @brief Compare a recovered byte hash from an RSA signature to the original message hash\n * @details Taken from https://github.com/richardliang/noir-rsa\n **/\nfn compare_signature_sha256<let N: u32>(padded_sha256_hash: [u8; N], msg_hash: [u8; 32]) -> bool {\n    // Get length of sig (e.g. 1048 = 128 bytes, 2048 = 256 bytes)\n    // NOTE: Assume MAX_BYTES < 2^32 bit number. MAX_BYTES of 259 > 2^8 bits so need to cast it to u32\n\n    for i in 0..32 {\n        // Padded hash is reversed\n        println(padded_sha256_hash[31 - i] == msg_hash[i]);\n        println(padded_sha256_hash[31 - i]);\n        println(msg_hash[i]);\n        assert(padded_sha256_hash[31 - i] == msg_hash[i]);\n    }\n\n    let hash_prefix: [u8; 19] = [32, 4, 0, 5, 1, 2, 4, 3, 101, 1, 72, 134, 96, 9, 6, 13, 48, 49, 48];\n\n    for i in 32..51 {\n        assert(hash_prefix[i - 32] == padded_sha256_hash[i]);\n    }\n\n    assert(padded_sha256_hash[51] == 0);\n\n    // Sub 32 bytes for hash, 19 bytes for prefix, 1 byte for 0, 1 byte for 1, 1 byte for 0\n    let ps_len = N - 54;\n    for i in 52..N {\n        if i as u32 < 52 + ps_len as u32 {\n            // PS padding which depends on RSA modulus / sig length. 1024 bits = 128 bytes = 128 - 54 = 74 bytes of 0xFF padding\n            assert(padded_sha256_hash[i] == 255);\n        } else if i as u32 == 52 + ps_len as u32 {\n            // Pad 0x01\n            assert(padded_sha256_hash[i] == 1);\n        } else if i as u32 == 53 + ps_len as u32 {\n            // 0x00\n            assert(padded_sha256_hash[i] == 0);\n        } else {\n            // Padded with 0 until MAX_BYTES\n            assert(padded_sha256_hash[i] == 0);\n        }\n    }\n\n    true\n}\nimpl<BN, BNInstance, let NumBytes: u32> RSA<BN, BNInstance, NumBytes>  where BN: BigNumTrait, BNInstance: BigNumInstanceTrait<BN> {\n    /**\n * @brief Verify an RSA signature generated via the pkcs1v15 signature scheme.\n * @details The fourth function parameter is required to define the value of `NBytes`\n *          when converting a BigNum into a byte array, the number of bytes is required and currently cannot be inferred.\n *          Once numeric generics can be derived by applying operations to other numeric generics the need for this will go away.\n *\n * @note The exponent `e` can be either 65537 or 3 (i.e. the most common values in use for RSA)\n * Rough cost: 2,048 bit RSA: 26,888 gates per verification\n *             1,024 bit RSA: 11,983 gates per verification\n * A circuit that verifies 1 signature (and does nothing else) will cost ~32k due to initialization costs of lookup tables\n **/\n    pub fn verify_sha256_pkcs1v15(_: Self, instance: BNInstance, msg_hash: [u8; 32], sig: BN, exponent: u32) -> bool {\n        assert((exponent == 3) | (exponent == 65537), \"Exponent must be 65537 or 3\");\n        let mut exponentiated = instance.mul(sig, sig); // sig^2\n\n        if exponent == 65537 {\n            // e = 65537 = 1 0000 0000 0000 0001\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^2 * sig^2 = sig^4\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^8\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^16\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^32\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^64\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^128\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^256\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^512\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^1024\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^2048\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^4096\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^8192\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^16384\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^32768\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^65536\n        }\n        // otherwise, e = 3 = 11\n\n        exponentiated = instance.mul(exponentiated, sig); // either sig^2 * sig = sig^3 or sig^65536 * sig = sig^65537\n\n        let mut padded_sha256_hash_bytes: [u8; NumBytes] = exponentiated.to_le_bytes();\n        println(padded_sha256_hash_bytes);\n        println(msg_hash);\n        compare_signature_sha256(padded_sha256_hash_bytes, msg_hash)\n    }\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_1024() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n\n    let BNInstance: BNInst1024 = BigNumInstance::new(\n        [\n        0xe908724e0d28a1565511879e00f063, 0x58dea28d5112982c8ab8597d3e611f, 0xb115f9878acc910a47b41ac8d5f763, 0xc71b0a719c2283f710f86024737cee, 0x9ee9eb73e95b84f033af5217337427, 0x8fcab34c99cc2661dd57de15ae2110, 0xa38db8a829eec5550342f6f66334dc, 0xd7c4b32fd351a47d860fda1897330e, 0x98c92a33a0f33fd7\n    ],\n        [\n        0x55582e8ba08822783fbd7d07390be2, 0x1d7d83f9dce3983c66f440dcc2f33e, 0x6072d13c84a4cb304f58fbabe782e7, 0x0cee5e0dd62bc54d15a91a4ea3bc50, 0xc485e6f946c45cf660fba4f49325cb, 0x1f0e45df0464b065c94e84ed1dad8c, 0xe4c7b3976310ea239059d834b545f3, 0xd418145200fa77235f5f8d852b121f, 0x01acf0bd16cad9bd8f\n    ]\n    );\n    let signature: BN1024 = BigNum::from_array(\n        [\n        0x393f230b55a12fb7bb39c7edd2cf48, 0x78f7d0a217d340407cae4f39b8f001, 0x603909ff76a519f3c8e96d695d462e, 0x0640ab230b459bf4b20b4823a5b850, 0x02ba190de61a85074b18e228231984, 0xe1424c0779825707aa433ecb86c388, 0xbed8087d947a9c6c56625ad20c91aa, 0x7da4a0c2eee3a3c0d61e892ab4ada9, 0x6ef98a936c8bf8e5\n    ]\n    );\n\n    let rsa: RSA1024 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world\".as_bytes());\n    let BNInstance: BNInst2048 = BigNumInstance::new(\n        [\n        0x183b4cadacea64716b6535b25a86ad, 0x129a32e9fbd374949e81b080546c2b, 0x9276332765f54b9b4d6fe23f4983a4, 0x91df05fde1a414c9fbf38808a01032, 0x97ca171c382e082ddd6c81be090902, 0x97161dde47ed979939451704b72648, 0x3b66f0c93f8ddbc62bb99f6b8fad2d, 0xc3a046fcad814d8938da372cd84d2a, 0xfe903cfe3ee4de6de3916023bb87f2, 0x8be5fd99c8b46dce9aab27ce4b3883, 0x0d99dfe50dd2288123804872da8543, 0xbb6d8afef8b2c7e3b86ad96973d4e5, 0x17e08fa3c5391279b844581f67825c, 0x09511f4a436abe495bfbfcc254d9c5, 0xf80d02572d620eab5ad7ecfbe2c20c, 0x2a5307402a05f59ba232ad0c8366d0, 0x7b9169630b317c38d549a86f85fcfc, 0xf2\n    ],\n        [\n        0xf4effa025abe90db41dc5bb5934a5f, 0x2596b25aa09f6a0e290accebbef006, 0x330e9567ec5eca92b7a8ce72ad3d83, 0xccf98d178ec4017e4947cadc02da7c, 0xaed6044ffeeb12de4d1e67aedfda78, 0xb5ae8a5a4637b632800e2f41dfbf0a, 0x8304360d359cf2f0d5d97c039f9b04, 0x53cde0d0633c0e66e1da9a118f6a96, 0xf9a83822351097bb1ed123d10290f5, 0xeb489c7f7227c09ca0117264dcf04f, 0x6a1b3618478a235f438adf84533177, 0x71c03085e38a87f5ec8e51c27dde98, 0xcf3e89d9cf253ef61d65d4431334d9, 0xa5a1a59e98fb7f49c746149324201d, 0x38f46c635f884f24c254eaa37981d6, 0x1c42be15dd95e1ac5bf01972b24ff9, 0x4555dd506d1f89e61279293c03db90, 0x010e\n    ]\n    );\n    let signature: BN2048 = BigNum::from_array(\n        [\n        0x5f0937ed1aacbdb83991e21c89ca8a, 0x5a1fa4ef2faf4042401c9121c73874, 0x7379fbb7713fbf807d250f7401afb8, 0x9cc5ce8813f3a83a72b681a4d434b2, 0x11cb49ac2ee1f9bed8a008b8327e1e, 0xf3362524f1224e48827b34a62f6ace, 0x3498a2944e32a3798fe9da684b32ae, 0xc346c33528bcdf7a06805126a29402, 0x6ac93f2fa68f270ec73674eae24380, 0x222c72de080496533ceeb8af827910, 0xc22889b311a53203278b942ca67100, 0x93d75567f7fe9ee7ca9871a0cb09f9, 0x049dabd976a9574847b1614f6b739c, 0xdc66b621dbae623df9b657b52fa1b0, 0xf37e82cc1eced382e11fc32e673f67, 0xe50545eb9027f1144a0ba7bbb0c886, 0xb6193409539c515d3c55a45c5734b1, 0x4b\n    ]\n    );\n    let rsa: RSA2048 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048_exponent_3() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n\n    let BNInstance: BNInst2048 = BigNumInstance::new(\n        [\n        0xc6a1c5e80ce354c6b00ccf20cf3a1d, 0x178d135f925a03eceb25f79bab56ee, 0x13ab3d6d8a5c5586752b5a3bc74ec3, 0x3d13b47b152367e3e2fc014d03d19f, 0xe89a7278a2945b4a672011691db30f, 0x5b4c1b061378143629dbb29dea1e4, 0x26a48b6f4e8df1472fd4fc12b17c18, 0xc7c92ead0ce810520cf3a8267254c1, 0x806b8cdba93909e9d9a71ee1bcdac2, 0x703ef80f8eb703b84c201366dff1c7, 0x7361034bb2c4c081aad8b1bcca83de, 0xb23c7e1109e65e6d08fa72cc862008, 0x750bc927874455782cd2d6fd5a51f6, 0xf0b83665fbf8cb5cf31cee9f89848e, 0x20d447b08953c7ce3330197938a8ae, 0x11a08bb5a2241c6a2a69f930d8b28b, 0xef5bca8dd582570a44705cb123d09e, 0xb7\n    ],\n        [\n        0xbc93ee57c1c8adc53f0a995a6221ca, 0x2a9b43587534b20dd85a5233329f10, 0xc587fd488f64eed02adc1f462f7448, 0xf1484d37676bb0e800996757382522, 0xc2126c48221aa61c9f52c6b918bab3, 0x8660c861dd52ed958beaf6c6c2cff0, 0x5edd9dc4f02a000f350948c70bdf94, 0x6f3b9603149272e9b232a379a017bb, 0x950fd85cffbdf4476b1cb66c1f63d6, 0xee459417b1a56b6f7ef3b89e385ac, 0x48daeef6d1a055f3746ab71058e137, 0x3cbc0ba96d541feee92dd27f9d0306, 0x6a2a42384cc388fa113ee80317e0a0, 0x43b4f89c508a42d309f295c0d9f3a5, 0x8d8c28b05f71b962b40ea906ff407f, 0x390a7989eb9cecc5827cb00e1ca693, 0x4cbf158eabf7e96ef7f2586d0ce613, 0x164\n    ]\n    );\n\n    let signature: BN2048 = BigNum::from_array(\n        [\n        0x19772b9af8a031170a7844ce4f3d7c, 0x4808e817258f57805a7326f70bcd74, 0xca8f3f98e374d52100115bfa645a7d, 0x49547189edff3b683fee267e717b7f, 0x96f263b47e96925f3b5898a7389ceb, 0x4cc50a893da91d0e085fc6656b30bc, 0x67e84ff92d88c0ad2c17ad2701309e, 0x095326818578173289665fcd9ad788, 0x775c6e85b745065db9411b9d579763, 0xad0f20c8a5265dfca4080ca877a2b8, 0xbfd199372f1680b3bc583a08bd8ba9, 0x663476ca3e5ede3e5976887db2c4e5, 0x531192309d0d49fed47c0216c27f9e, 0x37d26d31c86b951ca1c17b517063b7, 0x3cdb362ed5dfd06568eb9a9bbb6a91, 0x14520b9c23f583314729a9d858bca9, 0x5e0505067ada1026721d45997bf2c4, 0x3e\n    ]\n    );\n\n    let rsa: RSA2048 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature, 3));\n}\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_rsav0.3.1/lib/src/rsa.nr"},"77":{"source":"\n// Decomposes a single field into two 120 bit fields and a carry\nunconstrained pub fn split_120_bits(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let offsets: [Field; 17] = [\n        1, 0x100, 0x10000, 0x1000000, 0x100000000, 0x10000000000, 0x1000000000000, 0x100000000000000, 0x10000000000000000, 0x1000000000000000000, 0x100000000000000000000, 0x10000000000000000000000, 0x1000000000000000000000000, 0x100000000000000000000000000, 0x10000000000000000000000000000, 0x1000000000000000000000000000000, 0x100000000000000000000000000000000\n    ];\n\n    for i in 0..15 {\n        low += (x_bytes[i] as Field) * offsets[i];\n        high += (x_bytes[i + 15] as Field) * offsets[i];\n    }\n    high += (x_bytes[30] as Field) * offsets[15];\n    high += (x_bytes[31] as Field) * offsets[16];\n    // TDOO: investigate why this is triggered in BigCurve crate? it shouldn't be?\n    //   assert(x_bytes[31] == 0);\n    (low, high)\n}\n\n/**\n * @brief Decomposes a single field into two 60 bit fields\n *\n * @description Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\n **/\nunconstrained pub fn split_60_bits(x: Field) -> (u64, u64) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: u64 = 0;\n    let mut high: u64 = 0;\n\n    let offsets: [u64; 8] = [1, 0x100, 0x10000, 0x1000000, 0x100000000, 0x10000000000, 0x1000000000000, 0x100000000000000];\n    for i in 0..8 {\n        low += (x_bytes[i] as u64) * offsets[i];\n        high += (x_bytes[i + 8] as u64) * offsets[i];\n    }\n    let t1 = low >> 60;\n    let mask = ((1 as u64) << 60 as u8) - 1;\n    low = low & mask;\n    high = (high << 4) | t1;\n    (low, high)\n}\n\nunconstrained pub(crate) fn __normalize_limbs<let N: u32>(\n    input: [Field; N],\n    range: u32\n) -> [Field; N] {\n    let mut normalized: [Field; N] = [0; N];\n    let mut inp: _ = input;\n    for i in 0..(range - 1) {\n        let (lo, hi) = split_120_bits(inp[i]);\n\n        normalized[i]= lo;\n        inp[i + 1] +=  hi;\n    }\n    {\n        let (lo, hi) = split_120_bits(inp[range - 1]);\n        normalized[range - 1]= lo;\n        assert(hi == 0);\n    }\n    normalized\n}\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir-bignumv0.3.5/src/utils/split_bits.nr"},"78":{"source":"use crate::utils::split_bits;\nuse crate::utils::msb::get_msb64;\n\n/**\n * @brief U60Repr represents a BigNum element as a sequence of 60-bit unsigned integers.\n *\n * @description: used in unconstrained functions when computing witness values.\n * It is helpful to use u60 types when evaluating addition operations that can overflow the field modulus,\n * as well as when performing bit shifts.\n */\nstruct U60Repr<let N: u32, let NumSegments: u32> {\n    limbs: [u64; N * NumSegments]\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Add for U60Repr<N, NumSegments> {\n    fn add(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut carry: u64 = 0;\n        for i in 0..N * NumSegments {\n            let mut add: u64 = self.limbs[i] + b.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            result.limbs[i] = add;\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Sub for U60Repr<N, NumSegments> {\n    fn sub(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        for i in 0..N * NumSegments {\n            borrow = ((b.limbs[i] + borrow_in) > self.limbs[i]) as u64;\n            let sub = (borrow << 60) + self.limbs[i] - b.limbs[i] - borrow_in;\n            result.limbs[i] = sub;\n            borrow_in = borrow;\n        }\n\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::From<[Field; N]> for U60Repr<N, NumSegments> {\n    fn from(input: [Field; N]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..(N) {\n            let (lo, hi) = unsafe {\n                split_bits::split_60_bits(input[i])\n            };\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::Into<[Field; N]> for U60Repr<N, NumSegments> {\n    fn into(x: U60Repr<N, NumSegments>) -> [Field; N] {\n        let mut result: [Field; N] = [0; N];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..N {\n            result[i] = x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * two_pow_60);\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::cmp::Eq for U60Repr<N, NumSegments> {\n    fn eq(self, other: Self) -> bool {\n        self.limbs == other.limbs\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> U60Repr<N, NumSegments> {\n\n    unconstrained fn new<let NumFieldSegments: u32>(x: [Field; N * NumFieldSegments]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..(N * NumFieldSegments) {\n            let (lo, hi) = split_bits::split_60_bits(x[i]);\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n\n    unconstrained fn one() -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        result.limbs[0] = 1;\n        result\n    }\n\n    unconstrained fn into_field_array(x: U60Repr<N, NumSegments>) -> [Field; N * NumSegments / 2] {\n        let mut result: [Field; N * NumSegments / 2] = [0; N * NumSegments / 2];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..(N * NumSegments / 2) {\n            result[i]= x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * two_pow_60);\n        }\n        result\n    }\n\n    unconstrained fn gte(self, b: Self) -> bool {\n        let mut result = false;\n        let mut early_exit = false;\n        for i in 0..(N * NumSegments) {\n            if (b.limbs[(N * NumSegments) - 1 - i] < self.limbs[((N * NumSegments) - 1 - i)]) {\n                result = true;\n                early_exit = true;\n                break;\n            } else if (b.limbs[(N * NumSegments) - 1 - i] != self.limbs[((N * NumSegments) - 1 - i)]) {\n                result = false;\n                early_exit = true;\n                break;\n            }\n        }\n        if (early_exit == false) {\n            result = (self.limbs[0] == b.limbs[0]);\n        }\n        result\n    }\n\n    fn get_bit(self, bit: u32) -> bool {\n        let segment_index = bit / 60;\n        let uint_index = bit % 60;\n\n        let limb: u64 = self.limbs[segment_index];\n        let value = (limb >> uint_index as u8) & 1;\n        value == 1\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    fn shr(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = shift % 60;\n        let remainder_shift = 60 - limb_shift;\n        let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        result.limbs[0] = (self.limbs[0 + num_shifted_limbs] >> limb_shift as u8);\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i + num_shifted_limbs];\n            result.limbs[i] = (value >> limb_shift as u8);\n            let remainder: u64 = (value << remainder_shift as u8) & mask;\n            result.limbs[i - 1] = result.limbs[i - 1] + remainder;\n        }\n        result\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    fn shr1(&mut self) {\n        let value = self.limbs[NumSegments * N - 1];\n        self.limbs[NumSegments * N - 1] = value >> 1;\n\n        let mut remainder = (value & 1) << 59;\n\n        for i in 0..N * NumSegments {\n            let value = self.limbs[N * NumSegments - 1 - i];\n            self.limbs[N * NumSegments - 1 - i] = (value >> 1) + remainder;\n            remainder = (value << 59) & 0x800000000000000;\n        }\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    fn shl(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; NumSegments * N] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift: u8 = 60 - limb_shift as u8;\n\n        // 83\n        // limb shift = 1\n        // inside shift = 19 bits to the left\n        // meaning we have 19 carry bits and 41 remainder bits\n        let mask: u64 = (1 as u64 << 60) - 1;\n        //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        let value = self.limbs[0];\n\n        let mut remainder = (value >> remainder_shift);\n        result.limbs[num_shifted_limbs] = (value << (limb_shift as u8)) & mask;\n\n        // shift 84. num shifted = 1\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i];\n            let upshift = ((value << (limb_shift as u8)) + remainder) & mask;\n            result.limbs[i + num_shifted_limbs] = upshift;\n            remainder = (value >> remainder_shift);\n            // let remainder: u64 = (self.limbs.get(i + num_shifted_limbs as u64) << remainder_shift as u8) & mask;\n            // result.limbs.set(i - 1, result.limbs.get(i - 1) + remainder);\n        }\n        result\n    }\n\n    fn increment(&mut self) {\n        let mut carry: u64 = 0;\n\n        let mut add: u64 = self.limbs[0] + 1;\n        carry = add >> 60;\n        add = add - (carry << 60);\n        self.limbs[0] = add;\n\n        for i in 1..NumSegments * N {\n            let mut add: u64 = self.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            self.limbs[i] = add;\n        }\n    }\n\n    unconstrained  fn get_msb(val: Self) -> u32 {\n        let mut count = 0;\n        for i in 0..N * NumSegments {\n            let v = val.limbs[((N * NumSegments) - 1 - i)];\n            if (v > 0) {\n                count = 60 * ((N * NumSegments) - 1 - i) + get_msb64(v);\n                break;\n            }\n        }\n        count\n    }\n}\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir-bignumv0.3.5/src/utils/u60_representation.nr"},"113":{"source":"use dep::std;\nuse crate::utils::u60_representation::U60Repr;\nuse crate::utils::split_bits;\nuse crate::BigNum;\n/**\n * @brief runtime_bignum::BigNumTrait defines methods available to BigNum *if* the modulus is not known at compile time.\n *        e.g. RSA where the modulus is a witness value as it changes for every RSA signature\n *        tee `lib.nr` for a trait definition where the modulus is known at compile time\n **/\ntrait BigNumTrait {\n    fn new() -> Self;\n    fn one() -> Self;\n    fn from(limbs: [Field]) -> Self;\n    fn from_be_bytes<let NBytes: u32>(x: [u8; NBytes]) -> Self;\n    fn to_le_bytes<let NBytes: u32>(val: Self) -> [u8; NBytes];\n    fn get(self) -> [Field];\n    fn get_limb(self, idx: u64) -> Field;\n    fn set_limb(&mut self, idx: u32, value: Field);\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self;\n    fn validate_in_range(self);\n    fn validate_quotient_in_range(self);\n    fn __is_zero(self) -> bool;\n    fn __eq(self, rhs: Self) -> bool;\n}\n\n/**\n * @brief BigNumInstanceTrait defines methods available to a runtime BigNumInstance.\n *        BigNumInstance wraps the modulus parameter (as well as a Barret reduction parameter),\n *        which is required for the majority of BigNum operations\n **/\ntrait BigNumInstanceTrait<BN> where BN: BigNumTrait {\n    fn modulus(self) -> BN;\n    fn __derive_from_seed<let SeedBytes: u32>(self, seed: [u8; SeedBytes]) -> BN;\n    fn eq(self, lhs: BN, rhs: BN) -> bool;\n    fn __neg(self, val: BN) -> BN;\n    fn __add(self, lhs: BN, rhs: BN) -> BN;\n    fn __sub(self, lhs: BN, rhs: BN) -> BN;\n    fn __mul(self, lhs: BN, rhs: BN) -> BN;\n    fn __div(self, lhs: BN, rhs: BN) -> BN;\n    fn __batch_invert<let M: u32>(self, x: [BN; M]) -> [BN; M];\n    fn __udiv_mod(self, numerator: BN, divisor: BN) -> (BN, BN);\n    fn __invmod(self, val: BN) -> BN;\n    fn __pow(self, val: BN, exponent: BN) -> BN;\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BN; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BN; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BN; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BN, BN);\n\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BN; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BN; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BN; ADD_N],\n        linear_flags: [bool; ADD_N]\n    );\n\n    fn validate_in_field(self, val: BN);\n    fn validate_gt(self, lhs: BN, rhs: BN);\n    fn assert_is_not_equal(self, lhs: BN, rhs: BN);\n    fn neg(self, val: BN) -> BN;\n    fn add(self, lhs: BN, rhs: BN) -> BN;\n    fn sub(self, lhs: BN, rhs: BN) -> BN;\n    fn mul(self, lhs: BN, rhs: BN) -> BN;\n    fn div(self, lhs: BN, rhs: BN) -> BN;\n    fn udiv_mod(self, numerator: BN, divisor: BN) -> (BN, BN);\n    fn udiv(self, numerator: BN, divisor: BN) -> BN;\n    fn umod(self, numerator: BN, divisor: BN) -> BN;\n\n}\n\n/**\n * @brief BigNumParamsTrait defines a \"field\" with which to parametrise BigNum.\n * @description The \"field\" does not need to be prime, any value *should* work (TODO: test!)\n**/\ntrait BigNumParamsTrait<let N: u32> {\n    /**\n     * @brief modulus_bits = log2(modulus) rounded up\n     **/\n    fn modulus_bits() -> u32;\n\n    fn has_multiplicative_inverse() -> bool { true }\n}\n\nstruct  BigNumInstance<let N: u32, Params> {\n    \n    /**\n     * @brief modulus: all BigNum operations are evaluated modulo this value\n     **/\n    modulus: [Field; N],\n\n    /**\n     * @brief modulus but represented in a U60Repr form\n     **/\n    modulus_u60: U60Repr<N, 2>,\n    modulus_u60_x4: U60Repr<N, 4>,\n\n    // /**\n    //  * @brief double_modulus: used when performing negations and subtractions\n    //  **/\n    double_modulus: [Field; N],\n    // /**\n    //  * @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n    //  **/\n    redc_param: [Field; N],\n}\n\nimpl<let N: u32, Params> BigNum<N, Params> {\n    // some strange circular dependency problem means we need to define `new` as a member of BigNumTrait as well as a definition outside of the trait\n    // (delete this method to see. BigNumInstance methods that use BigNum::new() error out, and I can't find a way of declaring BigNum to satisfy BigNumTrait as part of the BigNumInstance definition because BigNumInstance has no contextual knowledge of the BigNum type...)\n    fn new() -> Self {\n        BigNum { limbs: [0; N] }\n    }\n    fn one() -> BigNum<N, Params> {\n        let mut result: Self = BigNum { limbs: [0; N] };\n        result.limbs[0] = 1;\n        result\n    }\n}\n\nimpl<let N: u32, Params> BigNumTrait for BigNum<N, Params> where Params: BigNumParamsTrait<N> {\n\n    fn new() -> Self {\n        BigNum::new()\n    }\n    fn one() -> Self {\n        BigNum::one()\n    }\n\n    fn from(limbs: [Field]) -> Self {\n        BigNum { limbs: limbs.as_array() }\n    }\n\n    /**\n     * @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n     * @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n     *               is precisely large enough to cover Params::modulus_bits()\n     * @param x: input byte array\n     **/\n    fn from_be_bytes<let NBytes: u32>(x: [u8; NBytes]) -> BigNum<N, Params> {\n        let num_bits = NBytes * 8;\n        let modulus_bits = Params::modulus_bits();\n        assert(num_bits >= modulus_bits);\n        assert(num_bits - modulus_bits < 8);\n        let mut result = BigNum::new();\n\n        let excess_bytes = N * 15 - NBytes;\n        let final_limb_bytes = 15 - excess_bytes;\n        let mut limb: Field = 0;\n        let mut k = 0;\n        for _j in 0..final_limb_bytes {\n            limb *= 256;\n            limb += x[k] as Field;\n            k += 1;\n        }\n        result.limbs[N - 1] = limb;\n\n        for i in 1..N {\n            let mut limb: Field = 0;\n            for _j in 0..15 {\n                limb *= 256;\n                limb += x[k] as Field;\n                k += 1;\n            }\n            result.limbs[N - i - 1] = limb;\n        }\n\n        // max_bits_in_most_significant_byte should be known at comptime. if not...messy!\n        let mut max_bits_in_most_significant_byte = 8 - (num_bits - modulus_bits);\n\n        let most_significant_byte: Field = x[0] as Field;\n\n        most_significant_byte.assert_max_bit_size(max_bits_in_most_significant_byte as u32);\n        result\n    }\n\n    fn to_le_bytes<let NBytes: u32>(val: BigNum<N, Params>) -> [u8; NBytes] {\n        let nbytes = (Params::modulus_bits() / 8) + (Params::modulus_bits() % 8 != 0) as u32;\n        assert(nbytes <= NBytes);\n\n        let mut result: [u8; NBytes] = [0; NBytes];\n        for i in 0..N - 1 {\n            let limb_bytes: [u8; 15] = val.limbs[i].to_le_bytes();\n            for j in 0..15 {\n                result[i * 15 + j] = limb_bytes[j];\n            }\n        }\n        let last_limb_bytes: [u8; 15] = val.limbs[N - 1].to_le_bytes();\n        let num_last_bytes = (NBytes - (N - 1) * 15);\n        for i in 0..num_last_bytes {\n            result[(N-1) * 15 + i] = last_limb_bytes[i];\n        }\n        result\n    }\n\n    fn get(self) -> [Field] {\n        self.limbs\n    }\n    fn get_limb(self, idx: u64) -> Field {\n        self.limbs[idx]\n    }\n    fn set_limb(&mut self, idx: u32, value: Field) {\n        self.limbs[idx] = value;\n    }\n\n    /**\n     * @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n     * @description should be cheaper than using an IF statement (TODO: check!)\n     **/\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let mut result: Self = lhs;\n        for i in 0..N {\n            result.limbs[i] = (lhs.limbs[i] - rhs.limbs[i]) * predicate as Field + rhs.limbs[i];\n        }\n        result\n    }\n\n    /**\n     * @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n     **/\n    fn validate_in_range(self) {\n        for i in 0..(N - 1) {\n            self.limbs[i].assert_max_bit_size(120);\n        }\n        let final_limb_bits = Params::modulus_bits() - ((N - 1) * 120);\n        self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32);\n    }\n\n    /**\n     * @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n     * @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n     *              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n     *              Why is this?\n     *              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n     *                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n     *                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n     *              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n     *\n     *              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n     *              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n     **/\n    fn validate_quotient_in_range(self) {\n        for i in 0..(N) {\n            self.limbs[i].assert_max_bit_size(120);\n        }\n        // Note: replace magic number 6 with definition\n        let final_limb_bits = Params::modulus_bits() - ((N - 1) * 120) + 6;\n        self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32);\n    }\n\n    fn __is_zero(self) -> bool {\n        self.__is_zero_impl()\n    }\n\n    fn __eq(self, rhs: Self) -> bool {\n        self.__eq_impl(rhs)\n    }\n}\n\nimpl<let N: u32, Params> BigNum<N, Params> where Params: BigNumParamsTrait<N> {\n\n    fn from_array(limbs: [Field; N]) -> BigNum<N, Params> {\n        BigNum { limbs }\n    }\n\n    unconstrained fn __is_zero_impl(self) -> bool {\n        let mut result: bool = true;\n        for i in 0..N {\n            result = result & (self.limbs[i] == 0);\n        }\n        result\n    }\n\n    unconstrained fn __eq_impl(lhs: Self, rhs: Self) -> bool {\n        lhs.limbs == rhs.limbs\n    }\n}\n\nimpl<let N: u32, Params> BigNumInstanceTrait<BigNum<N, Params>> for BigNumInstance<N, Params> where Params: BigNumParamsTrait<N> {\n\n    fn modulus(self) -> BigNum<N, Params> {\n        BigNum { limbs: self.modulus }\n    }\n    fn __derive_from_seed<let SeedBytes: u32>(self, seed: [u8; SeedBytes]) -> BigNum<N, Params> {\n        self.__derive_from_seed_impl(seed)\n    }\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### U N C O N S T R A I N E D    F U N C T I O N S\n    // ### NOTE: these functions call unconstrained internal implementations because trait impl modifiers are not supported \n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    fn __neg(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__neg_impl(val)\n    }\n\n    fn __add(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__add_impl(lhs, rhs)\n    }\n\n    fn __sub(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__sub_impl(lhs, rhs)\n    }\n\n    fn __mul(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__mul_impl(lhs, rhs)\n    }\n\n    fn __div(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__div_impl(lhs, rhs)\n    }\n\n    fn __batch_invert<let M: u32>(self, x: [BigNum<N, Params>; M]) -> [BigNum<N, Params>; M] {\n        self.batch_invert_impl(x)\n    }\n\n    fn __invmod(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__invmod_impl(val)\n    }\n\n    fn __pow(self, val: BigNum<N, Params>, exponent: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__pow_impl(val, exponent)\n    }\n\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        self.__compute_quadratic_expression_impl(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        )\n    }\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### C O N S T R A I N E D    F U N C T I O N S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    /**\n     * @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n     * @description The expression is of the form (when evaluated as an integer relation):\n     *\n     * \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n     *\n     * The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n     *\n     * Note: this method requires the remainder term of the expression to be ZERO\n     * When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n     * This can be achieved by minimizing the number of degree-2 relations required.\n     *\n     * The expensive parts of this algorithm are the following:\n     *      1. evaluating the limb products required to compute `lhs * rhs`\n     *      2. applying range constraints to validate the result is 0\n     *\n     * Range constraints are needed for the following reason:\n     * When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n     * Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n     * Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n     * To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n     * (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n     * To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n     * We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n     * TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n     * I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n     * TODO: explain why we apply a 126-bit range check, this feels like a magic number\n     * (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n     * TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n     * \n     * @param lhs_terms a 2D array of BigNum\n     * @param lhs_flags a 2D array of sign flags\n     * @param rhs_terms a 2D array of BigNum\n     * @param rhs_flags a 2D array of sign flags\n     * @param linear_terms an array of BigNum\n     * @param linear_flags an array of sign flags\n     **/\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) {\n        // use an unconstrained function to compute the value of the quotient\n        let (quotient, _, borrow_flags): (BigNum<N, Params>, BigNum<N, Params>, [Field; 2 * N]) = unsafe {\n            self.__compute_quadratic_expression_with_borrow_flags(\n                lhs_terms,\n                lhs_flags,\n                rhs_terms,\n                rhs_flags,\n                linear_terms,\n                linear_flags\n            )\n        };\n        // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n        // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n        quotient.validate_quotient_in_range();\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        // (should be a compile-time check...unconstrained function?)\n\n        // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n        let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut t4: [Field; N] = [0; N];\n\n        // TODO: this is super nasty as it requires a multiplication\n        let double_modulus: [Field; N] = self.double_modulus;\n        for k in 0..NUM_PRODUCTS {\n            for i in 0..N {\n                for j in 0..LHS_N {\n                    // note: if is_negative is not known at comptime this is very expensive\n                    if (lhs_flags[k][j]) {\n                        t0[k][i] -= lhs_terms[k][j].limbs[i];\n                        t0[k][i] += double_modulus[i];\n                    } else {\n                        t0[k][i] += lhs_terms[k][j].limbs[i];\n                    }\n                }\n                for j in 0..RHS_N {\n                    if (rhs_flags[k][j]) {\n                        t1[k][i] -= rhs_terms[k][j].limbs[i];\n                        t1[k][i] += double_modulus[i];\n                    } else {\n                        t1[k][i] += rhs_terms[k][j].limbs[i];\n                    }\n                }\n            }\n        }\n        for i in 0..N {\n            for j in 0..ADD_N {\n                if (linear_flags[j]) {\n                    t4[i] -= linear_terms[j].limbs[i];\n                    t4[i] += double_modulus[i];\n                } else {\n                    t4[i] += linear_terms[j].limbs[i];\n                }\n            }\n        }\n\n        // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n        // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n        // so that we can ensure that no limbs will underflow for an honest Prover\n        let mut product_limbs: [Field; 2 * N] = [0; 2 * N];\n\n        // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n        // TODO: this is super nasty as it requires a multiplication\n        for i in 0..N {\n            for j in 0..N {\n                for k in 0..NUM_PRODUCTS {\n                    if k == 0 {\n                        let new_term = t0[k][i] * t1[k][j] - quotient.limbs[i] * self.modulus[j];\n                        std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                        product_limbs[i + j] += new_term;\n                    } else {\n                        product_limbs[i + j] += t0[k][i] * t1[k][j];\n                    }\n                }\n                if (NUM_PRODUCTS == 0) {\n                    product_limbs[i + j] -= quotient.limbs[i] * self.modulus[j];\n                }\n            }\n            product_limbs[i] += t4[i];\n        }\n\n        // each limb product represents the sum of 120-bit products.\n        // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n        // where no more than 64 limb products are summed together.\n        // TODO: check in unconstrained function that this condition is satisfied\n        // TODO: define trade-offs regarding the value of borrow_shift\n        // (the larger the value, the greater the range check that is required on product_limbs)\n        // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n        // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n        let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n        let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n\n        // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n        //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n        // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n        borrow_flags[0].assert_max_bit_size(1);\n        product_limbs[0] += borrow_flags[0] * borrow_shift;\n        for i in 1..(N + N - 2) {\n            borrow_flags[i].assert_max_bit_size(1);\n            product_limbs[i] += \n                (borrow_flags[i] * borrow_shift - borrow_flags[i - 1] * borrow_carry);\n        }\n        product_limbs[N + N - 2] -= borrow_flags[N + N - 3] * borrow_carry;\n\n        // Final step: Validate `product_limbs` represents the integer value `0`\n        // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n        // i.e. we need to do the following for each limb `i`:\n        //      1. validate the limb's low-120 bits equals zero\n        //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n        //      3. add the carry into limb `i+1`\n        // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n        // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n        // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n        //  where k is the number of bits in the prime field)\n        // We then add the result into the next limb and repeat.\n        let hi_shift: Field = 0x1000000000000000000000000000000;\n        let hi_downshift: Field = 1 / hi_shift;\n        for i in 0..N + N - 2 {\n            product_limbs[i] *= hi_downshift;\n            std::as_witness(product_limbs[i]);\n            product_limbs[i].assert_max_bit_size(126); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n            product_limbs[i + 1] += product_limbs[i];\n        }\n        // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n        assert(product_limbs[N + N - 2] == 0);\n    }\n\n    fn validate_in_field(self, val: BigNum<N, Params>) {\n        // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n        let mut p_minus_self: [Field; N] = [0; N];\n        let modulus: [Field; N] = self.modulus;\n        for i in 0..N {\n            p_minus_self[i] = modulus[i] - val.limbs[i];\n        }\n        let borrow_flags = unsafe {\n            self.__validate_in_field_compute_borrow_flags(val)\n        };\n        let two_pow_120: Field = 0x1000000000000000000000000000000;\n        p_minus_self[0] += borrow_flags[0] as Field * two_pow_120;\n        for i in 1..N - 1 {\n            p_minus_self[i] += (borrow_flags[i] as Field * two_pow_120 - borrow_flags[i-1] as Field);\n        }\n        p_minus_self[N - 1] -= borrow_flags[N - 2] as Field;\n        let mut compare = val;\n        compare.limbs = p_minus_self;\n        compare.validate_in_range();\n    }\n\n    /**\n     * @brief Validate self != other\n     * @details If A == B, then A == B mod N.\n     *          We can efficiently evaluate A == B mod N where N = circuit modulus\n     *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n     *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n     *          (todo: compute how tiny)\n     **/\n    fn assert_is_not_equal(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) {\n        let mut l: Field = 0;\n        let mut r: Field = 0;\n        let mut modulus_mod_n: Field = 0;\n        let mut two_pow_120: Field = 0x1000000000000000000000000000000;\n        let modulus = self.modulus;\n        for i in 0..N {\n            l *= two_pow_120;\n            r *= two_pow_120;\n            modulus_mod_n *= two_pow_120;\n            l += lhs.limbs[N - i - 1];\n            r += rhs.limbs[N - i - 1] ;\n            modulus_mod_n += modulus[N - i - 1];\n        }\n\n        // lhs can be either X mod N or P + X mod N\n        // rhs can be either Y mod N or P + Y mod N\n        // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n        let mut diff = l - r;\n        let mut target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n        assert(target != 0, \"asssert_is_not_equal fail\");\n    }\n\n    fn eq(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> bool {\n        let diff = self.sub(lhs, rhs);\n        // if self == other, possible values of `diff` will be `p` or `0`\n        // (the subtract operator constrains diff to be < ceil(log(p)))\n        // TODO: can do this more efficiently via witngen in unconstrained functions?\n        let mut is_equal_modulus: bool = true;\n        let mut is_equal_zero: bool = true;\n        for i in 0..N {\n            is_equal_modulus = is_equal_modulus & (diff.limbs[i] == self.modulus[i]);\n            is_equal_zero = is_equal_zero & (diff.limbs[i] == 0);\n        }\n        is_equal_modulus | is_equal_zero\n    }\n\n    fn neg(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, borrow_flags) = unsafe {\n            self.__neg_with_flags(val)\n        };\n        result.validate_in_range();\n        let modulus = self.modulus;\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let result_limb = modulus[0] - val.limbs[0] - result.limbs[0] + (borrow_flags[0] as Field * borrow_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = modulus[i] - val.limbs[i] - result.limbs[i] - borrow_flags[i - 1] as Field\n                + (borrow_flags[i] as Field * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = modulus[N - 1] - val.limbs[N - 1] - result.limbs[N - 1] - borrow_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n\n    fn add(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, carry_flags, borrow_flags, overflow_modulus) = unsafe {\n            self.__add_with_flags(lhs, rhs)\n        };\n        result.validate_in_range();\n        let modulus = self.modulus;\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let carry_shift = 0x1000000000000000000000000000000;\n\n        let mut subtrahend: [Field; N] = [0; N];\n        if (overflow_modulus) {\n            subtrahend = modulus;\n        }\n        let result_limb = lhs.limbs[0] + rhs.limbs[0] - subtrahend[0] - result.limbs[0]\n            + (borrow_flags[0] as Field * borrow_shift)\n            - (carry_flags[0] as Field * carry_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = lhs.limbs[i] + rhs.limbs[i]\n                - subtrahend[i]\n                - result.limbs[i]\n                - borrow_flags[i - 1] as Field\n                + carry_flags[i - 1] as Field\n                + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = lhs.limbs[N - 1] + rhs.limbs[N - 1]\n            - subtrahend[N - 1]\n            - result.limbs[N - 1]\n            - borrow_flags[N - 2] as Field\n            + carry_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n\n    // validate that lhs - rhs does not underflow i.e. lhs > rhs\n    fn validate_gt(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) {\n        // so we do... p - x - r = 0 and there might be borrow flags\n\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags) = unsafe {\n            self.__validate_gt_remainder(lhs, rhs)\n        };\n\n        result.validate_in_range();\n\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let carry_shift = 0x1000000000000000000000000000000;\n\n        let mut addend: [Field; N] = [0; N];\n        let result_limb = lhs.limbs[0] - rhs.limbs[0] + addend[0] - result.limbs[0] - 1\n            + (borrow_flags[0] as Field * borrow_shift)\n            - (carry_flags[0] as Field * carry_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = lhs.limbs[i] - rhs.limbs[i] + addend[i] - result.limbs[i] - borrow_flags[i - 1] as Field\n                + carry_flags[i - 1] as Field\n                + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = lhs.limbs[N - 1] - rhs.limbs[N - 1] + addend[N - 1]\n            - result.limbs[N - 1]\n            - borrow_flags[N - 2] as Field\n            + carry_flags[N - 2] as Field;\n        assert(result_limb == 0);\n    }\n\n    fn sub(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        // so we do... p - x - r = 0 and there might be borrow flags\n\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags, underflow) = unsafe {\n            self.__sub_with_flags(lhs, rhs)\n        };\n        result.validate_in_range();\n        let modulus = self.modulus;\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let carry_shift = 0x1000000000000000000000000000000;\n\n        let mut addend: [Field; N] = [0; N];\n        if (underflow) {\n            addend = modulus;\n        }\n        let result_limb = lhs.limbs[0] - rhs.limbs[0] + addend[0] - result.limbs[0]\n            + (borrow_flags[0] as Field * borrow_shift)\n            - (carry_flags[0] as Field * carry_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = lhs.limbs[i] - rhs.limbs[i] + addend[i] - result.limbs[i] - borrow_flags[i - 1] as Field\n                + carry_flags[i - 1] as Field\n                + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = lhs.limbs[N - 1] - rhs.limbs[N - 1] + addend[N - 1]\n            - result.limbs[N - 1]\n            - borrow_flags[N - 2] as Field\n            + carry_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        let result = self.__mul(lhs, rhs);\n        self.evaluate_quadratic_expression([[lhs]], [[false]], [[rhs]], [[false]], [result], [true]);\n        result\n    }\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        assert(\n            Params::has_multiplicative_inverse(), \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\"\n        );\n        let result = self.__div(lhs, rhs);\n        self.evaluate_quadratic_expression([[result]], [[false]], [[rhs]], [[false]], [lhs], [true]);\n        result\n    }\n\n    /**\n     * @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n     *\n     * i.e. 1. floor(numerator / divisor) = quotient\n     *      2. numerator % divisor = remainder\n     *      3. divisor * quotient + remainder = numerator\n     **/\n    fn __udiv_mod(\n        self,\n        numerator: BigNum<N, Params>,\n        divisor: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        self.__udiv_mod_impl(numerator, divisor)\n    }\n    /**\n     * @brief udiv_mod performs integer division between numerator, divisor \n     *\n     * i.e. 1. floor(numerator / divisor) = quotient\n     *      2. numerator % divisor = remainder\n     *      3. divisor * quotient + remainder = numerator\n     **/\n    fn udiv_mod(\n        self,\n        numerator: BigNum<N, Params>,\n        divisor: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        let (quotient, remainder) = BigNumInstance::__udiv_mod_impl(self, numerator, divisor);\n\n        // self / divisor = quotient rounded\n        // quotient * divisor + remainder - self = 0\n        self.evaluate_quadratic_expression(\n            [[quotient]],\n            [[false]],\n            [[divisor]],\n            [[false]],\n            [numerator, remainder],\n            [true, false]\n        );\n        // we need (remainder < divisor)\n        // implies (divisor - remainder > 0)\n        self.validate_gt(divisor, remainder);\n        (quotient, remainder)\n    }\n\n    /**\n     * @brief udiv_mod performs integer division between numerator, divisor \n     *\n     * i.e. return param is floor(numerator / divisor)\n     **/\n    fn udiv(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.udiv_mod(numerator, divisor).0\n    }\n\n    /**\n     * @brief udiv_mod performs integer modular reduction\n     *\n     * i.e. 1. numerator % divisor = return value\n     **/\n    fn umod(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.udiv_mod(numerator, divisor).1\n    }\n}\n\nimpl<let N: u32, Params> BigNumInstance<N, Params> where Params: BigNumParamsTrait<N> {\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### C  O  N  S  T  R  U  C  T  O  R  S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    fn new(modulus: [Field; N], redc_param: [Field; N]) -> Self {\n        Self {\n            redc_param,\n            modulus,\n            modulus_u60: U60Repr::from(modulus),\n            modulus_u60_x4: U60Repr::from(modulus),\n            double_modulus: get_double_modulus(modulus)\n        }\n    }\n\n    unconstrained fn __derive_from_seed_impl<let SeedBytes: u32>(self, seed: [u8; SeedBytes]) -> BigNum<N, Params> {\n        let mut rolling_seed = seed;\n\n        let mut to_reduce: [Field; 2 * N] = [0; 2 * N];\n\n        let mut double_modulus_bits = Params::modulus_bits() * 2;\n        let mut double_modulus_bytes = (double_modulus_bits) / 8 + (double_modulus_bits % 8 != 0) as u32;\n\n        let mut last_limb_bytes = double_modulus_bytes % 15;\n        if (last_limb_bytes == 0) {\n            last_limb_bytes = 15;\n        }\n        let mut last_limb_bits = double_modulus_bits % 8;\n        if (last_limb_bits == 0) {\n            last_limb_bits = 8;\n        }\n\n        for i in 0..(N - 1) {\n            let hash: [u8; 32] = std::hash::sha256(rolling_seed);\n            let mut lo: Field = 0;\n            let mut hi: Field = 0;\n            for j in 0..15 {\n                hi *= 256;\n                lo *= 256;\n\n                if (i < 2 * N - 2) {\n                    lo += hash[j + 15] as Field;\n                    hi += hash[j] as Field;\n                }\n            }\n            to_reduce[2 * i] = lo;\n            to_reduce[2 * i + 1] = hi;\n            rolling_seed[0] += 1;\n        }\n\n        {\n            let hash: [u8; 32] = std::hash::sha256(rolling_seed);\n            let mut hi: Field = 0;\n            for j in 0..(last_limb_bytes - 1) {\n                hi *= 256;\n                hi += hash[j] as Field;\n            }\n            hi *= 256;\n            let last_byte = hash[last_limb_bytes - 1];\n            let mask = (1 as u64 << (last_limb_bits) as u8) - 1;\n            let last_bits = last_byte as u64 & mask;\n            hi += last_bits as Field;\n            to_reduce[2 * N - 2] = hi;\n        }\n\n        let (_, remainder) = __barrett_reduction(\n            to_reduce,\n            self.redc_param,\n            Params::modulus_bits(),\n            self.modulus,\n            self.modulus_u60_x4\n        );\n        let mut result = BigNum::new();\n        result.limbs = remainder;\n        result\n    }\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### U N C O N S T R A I N E D    F U N C T I O N S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    unconstrained fn __validate_in_field_compute_borrow_flags(self: Self, val: BigNum<N, Params>) -> [bool; N] {\n        let mut flags: [bool; N] = [false; N];\n        let modulus: [Field; N] = self.modulus;\n        flags[0] = modulus[0].lt(val.limbs[0]);\n        for i in 1..N - 1 {\n            flags[i] = modulus[i].lt(val.limbs[i] + flags[i - 1] as Field);\n        }\n        flags\n    }\n\n    unconstrained fn __pow_impl(self, val: BigNum<N, Params>, exponent: BigNum<N, Params>) -> BigNum<N, Params> {\n        let x: U60Repr<N, 2> = U60Repr::from(exponent.limbs);\n\n        let num_bits = Params::modulus_bits() + 1;\n\n        let mut accumulator: BigNum<N, Params> = BigNum::one();\n\n        for i in 0..num_bits {\n            accumulator = self.__mul(accumulator, accumulator);\n            if x.get_bit(num_bits - i - 1) {\n                accumulator = self.__mul(accumulator, val);\n            }\n        }\n        accumulator\n    }\n\n    unconstrained fn __mul_with_quotient(\n        self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        let mut mul: [Field; 2 * N] = [0; 2 * N];\n        for i in 0..N {\n            for j in 0..N {\n                mul[i + j] += lhs.limbs[i] * rhs.limbs[j];\n            }\n        }\n        let (q, r) = __barrett_reduction(\n            split_bits::__normalize_limbs(mul, 2 * N),\n            self.redc_param,\n            Params::modulus_bits(),\n            self.modulus,\n            self.modulus_u60_x4\n        );\n\n        let mut quotient = BigNum::from_array(q);\n        let mut remainder = BigNum::from_array(r);\n        (quotient, remainder)\n    }\n\n    unconstrained fn __mul_impl(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        let (_, b) = self.__mul_with_quotient(lhs, rhs);\n        b\n    }\n\n    unconstrained fn __add_impl(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let y_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let mut z_u60 = x_u60 + y_u60;\n\n        if z_u60.gte(self.modulus_u60) {\n            z_u60 = z_u60 - self.modulus_u60;\n        }\n        let mut result = BigNum::from_array(U60Repr::into(z_u60));\n        result\n    }\n\n    /**\n     * @brief given an input `x`, compute `2p - x` (unconstrained)\n     *\n     * @description we subtract the input from double the modulus, because all constrained BigNum operations\n     *              only guarantee that the output is in the range [0, ceil(log2(p))].\n     *              I.E. the input may be larger than the modulus `p`.\n     *              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n     *              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n     *              because such a check is expensive and usually unneccesary.\n     */\n    unconstrained fn __neg_impl(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        let f: [Field; N] = val.limbs;\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(f);\n        let mut result = BigNum::from_array(U60Repr::into(self.modulus_u60 - x_u60));\n        result\n    }\n\n    unconstrained fn __add_with_flags(\n        self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, [bool; N], [bool; N], bool) {\n        let a_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let b_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n        let add_u60 = a_u60 + b_u60;\n\n        let overflow = add_u60.gte(self.modulus_u60);\n\n        let mut subtrahend_u60 : U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n        if overflow {\n            subtrahend_u60 = self.modulus_u60;\n        }\n\n        let mut carry: u64 = 0;\n        let mut carry_in: u64 = 0;\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n        let mut borrow_flags: [bool; N] = [false; N];\n        let mut carry_flags: [bool; N] = [false; N];\n        for i in 0..2 * N {\n            let mut add_term: u64 = a_u60.limbs[i] + b_u60.limbs[i] + carry_in;\n            carry = (add_term >= 0x1000000000000000) as u64;\n            add_term -= (carry as u64 * 0x1000000000000000);\n            result_u60.limbs[i] = add_term;\n            carry_in = carry as u64;\n            borrow = ((subtrahend_u60.limbs[i] + borrow_in) > result_u60.limbs[i]) as u64;\n            let sub = (borrow << 60) + result_u60.limbs[i] - subtrahend_u60.limbs[i] - borrow_in;\n            result_u60.limbs[i] = sub;\n            borrow_in = borrow;\n\n            if ((i & 1) == 1) {\n                let idx = (i - 1) / 2;\n                if (carry & borrow == 1) {\n                    carry = 0;\n                    borrow = 0;\n                }\n                carry_flags[idx] = carry as bool;\n                borrow_flags[idx] = borrow as bool;\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n\n        (result, carry_flags, borrow_flags, overflow)\n    }\n\n    unconstrained fn __validate_gt_remainder(\n        _: Self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, [bool; N], [bool; N]) {\n        let a_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let mut b_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let underflow = b_u60.gte(a_u60);\n        b_u60 += U60Repr::one();\n        assert(underflow == false, \"BigNum::validate_gt check fails\");\n        let mut addend_u60 : U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n        let mut carry: u64 = 0;\n        let mut carry_in: u64 = 0;\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n        let mut borrow_flags: [bool; N] = [false; N];\n        let mut carry_flags: [bool; N] = [false; N];\n        for i in 0..2 * N {\n            let mut add_term: u64 = a_u60.limbs[i] + addend_u60.limbs[i] + carry_in;\n            carry = (add_term >= 0x1000000000000000) as u64;\n            add_term -= (carry as u64 * 0x1000000000000000);\n            result_u60.limbs[i] = add_term;\n            carry_in = carry as u64;\n            borrow = ((b_u60.limbs[i] + borrow_in) > result_u60.limbs[i]) as u64;\n            let sub = (borrow << 60) + result_u60.limbs[i] - b_u60.limbs[i] - borrow_in;\n            result_u60.limbs[i] = sub;\n            borrow_in = borrow;\n\n            if ((i & 1) == 1) {\n                if (carry & borrow == 1) {\n                    carry = 0;\n                    borrow = 0;\n                }\n                carry_flags[i/2] = carry as bool;\n                borrow_flags[i/2] = borrow as bool;\n            }\n        }\n\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n        (result, carry_flags, borrow_flags)\n    }\n\n    unconstrained fn __sub_with_flags(\n        self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, [bool; N], [bool; N], bool) {\n        let a_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let b_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let underflow = b_u60.gte(a_u60 + U60Repr::one());\n\n        let mut addend_u60 : U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n        if underflow {\n            addend_u60 = self.modulus_u60;\n        }\n\n        let mut carry: u64 = 0;\n        let mut carry_in: u64 = 0;\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n        let mut borrow_flags: [bool; N] = [false; N];\n        let mut carry_flags: [bool; N] = [false; N];\n        for i in 0..2 * N {\n            let mut add_term: u64 = a_u60.limbs[i] + addend_u60.limbs[i] + carry_in;\n            carry = (add_term >= 0x1000000000000000) as u64;\n            add_term -= (carry as u64 * 0x1000000000000000);\n            result_u60.limbs[i] = add_term;\n            carry_in = carry as u64;\n            borrow = ((b_u60.limbs[i] + borrow_in) > result_u60.limbs[i]) as u64;\n            let sub = (borrow << 60) + result_u60.limbs[i] - b_u60.limbs[i] - borrow_in;\n            result_u60.limbs[i] = sub;\n            borrow_in = borrow;\n\n            if ((i & 1) == 1) {\n                if (carry & borrow == 1) {\n                    carry = 0;\n                    borrow = 0;\n                }\n                carry_flags[i/2] = carry as bool;\n                borrow_flags[i/2] = borrow as bool;\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n        (result, carry_flags, borrow_flags, underflow)\n    }\n\n    unconstrained fn __neg_with_flags(self, val: BigNum<N, Params>) -> (BigNum<N, Params>, [bool; N]) {\n        let f: [Field; N] = val.limbs;\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(f);\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        let mut borrow_flags: [bool; N] = [false; N];\n        for i in 0..2 * N {\n            borrow = ((x_u60.limbs[i] + borrow_in) > self.modulus_u60.limbs[i]) as u64;\n            let sub = (borrow << 60) + self.modulus_u60.limbs[i] - x_u60.limbs[i] - borrow_in;\n            result_u60.limbs[i] = sub;\n            borrow_in = borrow;\n            if ((i & 1) == 1) {\n                borrow_flags[i / 2] = borrow as bool;\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n        (result, borrow_flags)\n    }\n\n    /**\n     * @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n     * @description see `__neg` for why we use 2p instead of p\n     **/\n    unconstrained fn __sub_impl(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__add(lhs, self.__neg(rhs))\n    }\n\n    unconstrained fn __invmod_impl(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        let one: BigNum<N, Params> = BigNum::one();\n        let one_u60: U60Repr<N, 2> = U60Repr::from(one.limbs);\n        let exponent = self.modulus_u60.sub(one_u60.add(one_u60));\n        let mut result = BigNum::from_array(U60Repr::into(exponent));\n        self.__pow(val, result)\n    }\n\n    unconstrained fn batch_invert_impl<let M: u32>(self, x: [BigNum<N, Params>; M]) -> [BigNum<N, Params>; M] {\n        // TODO: ugly! Will fail if input slice is empty\n        let mut accumulator: BigNum<N, Params> = BigNum::one();\n        let mut result: [BigNum<N, Params>; M] = [BigNum::new(); M];\n        let mut temporaries: [BigNum<N, Params>] = &[];\n        for i in 0..x.len() {\n            temporaries = temporaries.push_back(accumulator);\n            if (x[i].__is_zero() == false) {\n                accumulator = self.__mul(accumulator, x[i]);\n            }\n        }\n\n        accumulator = self.__invmod(accumulator);\n        let mut T0: BigNum<N, Params> = BigNum::new();\n        T0.limbs = [0; N];\n        for i in 0..x.len() {\n            let idx = x.len() - 1 - i;\n            if (x[idx].__is_zero() == false) {\n                T0 = self.__mul(accumulator, temporaries[idx]);\n                accumulator = self.__mul(accumulator, x[idx]);\n                result[idx] = T0;\n            }\n        }\n        result\n    }\n\n    unconstrained fn batch_invert_slice_impl(self, x: [BigNum<N, Params>]) -> [BigNum<N, Params>] {\n        // TODO: ugly! Will fail if input slice is empty\n        let mut accumulator: BigNum<N, Params> = BigNum::one();\n        let mut result: [BigNum<N, Params>] = [BigNum::new()];\n        let mut temporaries: [BigNum<N, Params>] = &[];\n        for i in 0..x.len() {\n            temporaries = temporaries.push_back(accumulator);\n            if (x[i].__is_zero() == false) {\n                accumulator = self.__mul(accumulator, x[i]);\n            }\n            result = result.push_back(BigNum::new());\n        }\n\n        accumulator = self.__invmod(accumulator);\n        let mut T0: BigNum<N, Params> = BigNum::new();\n        T0.limbs = [0; N];\n        for i in 0..x.len() {\n            let idx = x.len() - 1 - i;\n            if (x[idx].__is_zero() == false) {\n                T0 = self.__mul(accumulator, temporaries[idx]);\n                accumulator = self.__mul(accumulator, x[idx]);\n                result[idx] = T0;\n            }\n        }\n        result\n    }\n\n    unconstrained fn __div_impl(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> BigNum<N, Params> {\n        let t0 = self.__invmod(divisor);\n        self.__mul(numerator, t0)\n    }\n\n    /**\n     * @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n     **/\n    // NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n    // To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n    // We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n    // Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n    // Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\n    unconstrained fn __add_linear_expression<let M: u32>(\n        self,\n        x: [BigNum<N, Params>; M],\n        flags: [bool; M]\n    ) -> ([Field; N]) {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mut sum: [Field; N] = [0; N];\n        // TODO: ugly! Will fail if input array is empty\n        let modulus2: [Field;N] = self.double_modulus;\n        for i in 0..M {\n            if (flags[i]) {\n                for j in 0..N {\n                    sum[j] = sum[j] + modulus2[j] - x[i].limbs[j];\n                    assert(x[i].limbs[j].lt(modulus2[j]));\n                }\n            } else {\n                for j in 0..N {\n                    sum[j] = sum[j] + x[i].limbs[j];\n                }\n            }\n        }\n        // problem if we normalize when used in computing quotient\n        sum\n    }\n\n    /**\n     * @brief computes the limb products of a quadratic expression\n     * @details see __compute_quadratic_expression_with_borrow_flags for full description\n     **/\n    unconstrained fn __compute_quadratic_expression_product<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> [Field; 2 * N] {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mut lhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut rhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut add: [Field; N] = [0; N];\n\n        for i in 0..NUM_PRODUCTS {\n            lhs[i] = self.__add_linear_expression(lhs_terms[i], lhs_flags[i]);\n            rhs[i] = self.__add_linear_expression(rhs_terms[i], rhs_flags[i]);\n        }\n\n        let add: [Field; N] = self.__add_linear_expression(linear_terms, linear_flags);\n\n        let mut mulout: [Field; 2 * N] = [0; 2 * N];\n\n        for i in 0..N {\n            for j in 0..N {\n                for k in 0..NUM_PRODUCTS {\n                    mulout[i + j] += (lhs[k][i] * rhs[k][j]);\n                }\n            }\n            mulout[i] += add[i];\n        }\n        mulout\n    }\n\n    /**\n     * @brief computes the quotient/remainder of a quadratic expression\n     * @details see __compute_quadratic_expression_with_borrow_flags for full description\n     **/\n    unconstrained fn __compute_quadratic_expression_impl<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mulout = self.__compute_quadratic_expression_product(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        );\n        let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout, 2 * N);\n\n        // TODO: ugly! Will fail if input slice is empty\n        let k  = Params::modulus_bits();\n\n        let (quotient, remainder) = __barrett_reduction(\n            relation_result,\n            self.redc_param,\n            k,\n            self.modulus,\n            self.modulus_u60_x4\n        );\n\n        let mut q = BigNum::from_array(quotient);\n        let mut r = BigNum::from_array(remainder);\n        (q, r)\n    }\n\n    /**\n     * @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n     * @description The expression is of the form:\n     *\n     * \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n     *\n     * The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n     *\n     * When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n     * This can be achieved by minimizing the number of degree-2 relations required.\n     *\n     * The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n     * For example, when computing the product a * b - q * p = 0, it is possible that:\n     *      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n     *      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n     * In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n     * In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n     *\n     * @param lhs_terms a 2D array of BigNum\n     * @param lhs_flags a 2D array of sign flags\n     * @param rhs_terms a 2D array of BigNum\n     * @param rhs_flags a 2D array of sign flags\n     * @param linear_terms an array of BigNum\n     * @param linear_flags an array of sign flags\n     **/\n    unconstrained fn __compute_quadratic_expression_with_borrow_flags<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BigNum<N, Params>, BigNum<N, Params>, [Field; 2 * N]) {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n\n        let mut mulout_p = self.__compute_quadratic_expression_product(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        );\n        let mut mulout_n: [Field; 2 * N] = [0; 2 * N];\n        let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout_p, 2 * N);\n\n        let modulus: [Field; N] = self.modulus;\n        let (quotient, remainder) = __barrett_reduction(\n            relation_result,\n            self.redc_param,\n            Params::modulus_bits(),\n            modulus,\n            self.modulus_u60_x4\n        );\n        assert(remainder == [0; N]);\n\n        for i in 0..N {\n            for j in 0..N {\n                mulout_n[i + j] += quotient[i] * modulus[j];\n            }\n        }\n\n        // compute borrow flags from mulout_p and mulout_n\n        let mut borrow_flags: [Field; 2 * N] = [0; 2 * N];\n        let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n        let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n        let two_pow_120: Field = 0x1000000000000000000000000000000;\n        let downshift: Field = 1 / two_pow_120;\n\n        // determine whether we need to borrow from more significant limbs.\n        // initial limb is \"simple\" comparison operation\n        // TODO: check how expensive `lt` operator is w.r.t. witness generation\n        borrow_flags[0] = mulout_p[0].lt(mulout_n[0]) as Field;\n        // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n        // and there is nothing to borrow against for the final limb.\n        let mut hi_bits = (mulout_p[0] - mulout_n[0] + (borrow_flags[0] * borrow_shift)) * downshift;\n        for i in 1..(N + N - 2) {\n            // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n            // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n            //     * downshift;\n            mulout_p[i] += hi_bits;\n\n            // determine whether negative limb values are greater than positive limb values\n            let underflow: Field = mulout_p[i].lt(mulout_n[i] + (borrow_flags[i - 1] * borrow_carry)) as Field;\n            borrow_flags[i] = underflow;\n\n            hi_bits = (mulout_p[i] - mulout_n[i] + (borrow_flags[i] * borrow_shift)\n                - (borrow_flags[i - 1] * borrow_carry)) * downshift;\n        }\n\n        let mut q = BigNum::from_array(quotient);\n        let mut r = BigNum::from_array(remainder);\n        (q, r, borrow_flags)\n    }\n\n    unconstrained fn __udiv_mod_impl(\n        _: Self,\n        numerator: BigNum<N, Params>,\n        divisor: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        let mut quotient_u60: U60Repr<N, 2> = U60Repr::from([0; N]);\n        let mut remainder_u60: U60Repr<N, 2> = U60Repr::from(numerator.limbs);\n\n        let mut divisor_u60: U60Repr<N, 2> = U60Repr::from(divisor.limbs);\n        let b = divisor_u60;\n\n        let mut bit_difference = remainder_u60.get_msb() - divisor_u60.get_msb();\n\n        let mut accumulator_u60: U60Repr<N, 2> = U60Repr::one();\n        divisor_u60 = divisor_u60.shl(bit_difference);\n        accumulator_u60 = accumulator_u60.shl(bit_difference);\n\n        if (divisor_u60.gte(remainder_u60 + U60Repr::one())) {\n            divisor_u60.shr1();\n            accumulator_u60.shr1();\n        }\n        for _ in 0..(N * 120) {\n            if (remainder_u60.gte(b) == false) {\n                break;\n            }\n\n            // we've shunted 'divisor' up to have the same bit length as our remainder.\n            // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n            if (remainder_u60.gte(divisor_u60)) {\n                remainder_u60 -= divisor_u60;\n                // we can use OR here instead of +, as\n                // accumulator is always a nice power of two\n                quotient_u60 = quotient_u60 + accumulator_u60;\n            }\n            divisor_u60.shr1(); // >>= 1;\n            accumulator_u60.shr1(); //  >>= 1;\n        }\n\n        (\n            BigNum::from_array(U60Repr::into(quotient_u60)), BigNum::from_array(U60Repr::into(remainder_u60))\n        )\n    }\n}\n\nfn get_double_modulus<let N: u32>(modulus: [Field; N]) -> [Field; N] {\n    let TWO_POW_120: Field = 0x1000000000000000000000000000000;\n    let m: U60Repr<N, 2> = U60Repr::from(modulus);\n    let mut result: [Field; N] = U60Repr::into(m + m);\n\n    result[0] += TWO_POW_120;\n    for i in 1..N - 1 {\n        result[i] += (TWO_POW_120 - 1);\n    }\n    result[N - 1] -= 1;\n    result\n}\n\nunconstrained fn __barrett_reduction<let N: u32>(\n    x: [Field; 2 * N],\n    redc_param: [Field; N],\n    k: u32,\n    modulus: [Field; N],\n    modulus_u60: U60Repr<N, 4>\n) -> ([Field; N], [Field; N]) {\n    let mut mulout: [Field; 3 * N]  = [0; 3 * N];\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout[i + j] += x[i] * redc_param[j];\n        }\n    }\n    mulout = split_bits::__normalize_limbs(mulout, 3 * N - 1);\n    let mulout_u60: U60Repr<N, 6> = U60Repr::new(mulout);\n    let mut quotient_u60 = mulout_u60.shr((k + k));\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient_full: [Field; 3 * N] = quotient_u60.into_field_array();\n    let mut partial_quotient: [Field; 2 * N] = [0; 2 * N];\n    for i in 0..2 * N {\n        partial_quotient[i] = partial_quotient_full[i];\n    }\n    // quotient_mul_modulus can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus: [Field; 2 * N]  = [0; 2 * N];\n    let mut quotient_mul_modulus_normalized: [Field; 2 * N]  = [0; 2 * N];\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus[i + j] += partial_quotient[i] * modulus[j];\n        }\n    }\n\n    for i in 0..(N + N) {\n        let (lo, hi) = split_bits::split_120_bits(quotient_mul_modulus[i]);\n        quotient_mul_modulus_normalized[i] = lo;\n        // TODO: what is faster, leaving this if statement in or out?\n        // (array is size-1 too large so we can tolerate adding 0 into max element)\n        if (i + 1 < N + N) {\n            quotient_mul_modulus[i + 1] += hi;\n        }\n    }\n    let quotient_mul_modulus_u60: U60Repr<N, 4> = U60Repr::new(quotient_mul_modulus_normalized);\n\n    let x_u60 : U60Repr<N, 4> = U60Repr::new(x);\n    let mut remainder_u60 = x_u60 - quotient_mul_modulus_u60;\n\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    } else {}\n\n    let q: [Field; N] = U60Repr::into(quotient_u60);\n    let r: [Field; N] = U60Repr::into(remainder_u60);\n\n    (q, r)\n}\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir-bignumv0.3.5/src/runtime_bignum.nr"},"114":{"source":"mod utils;\n\npub use utils::{conditional_select, lt_f, DebugRandomEngine};\n\n/**\n * @brief represents a byte-array of up to MaxBytes, that is used as a \"haystack\" array,\n *        where we want to validate a substring \"needle\" is present in the \"haystack\" \n * @details the \"body\" parameter contains some input bytes, zero-padded to the nearest multiple of 31\n *          We pack \"bytes\" into 31-byte \"chunks\", as this is the maximum number of bytes we can fit\n *          into a field element without overflowing.\n *          TODO: once we can derive generics via arithmetic on other generics, we want this \"31\" parameter\n *          to be defined by the backend being used instead of being hardcoded to 31\n *\n * @note We perform this 31-byte packing because it dramatically reduces the number of constraints required for substring matching. See (chicken)\n *\n * @tparam MaxBytes: the maximum number of bytes that StringBody can contain\n * @tparam MaxPaddedBytes: the maximum number of bytes after zero-padding to the nearest multiple of 31\n * @tparam PaddedChunks: the number of 31-byte chunks needed to represent MaxPaddedBytes\n **/\nstruct StringBody<let MaxPaddedBytes: u32, let PaddedChunks: u32, let MaxBytes: u32> {\n    body: [u8; MaxPaddedBytes],\n    chunks: [Field; PaddedChunks],\n    byte_length: u32\n}\n\n/**\n * @brief represents a byte-array of up to MaxBytes, that is used as a \"needle\" array,\n *        where we want to validate a substring \"needle\" is present in the \"haystack\" \n * @tparam MaxBytes: the maximum number of bytes that StringBody can contain\n * @tparam MaxPaddedBytes: the maximum number of bytes after zero-padding to the nearest multiple of 31\n * @tparam PaddedChunksMinusOne: the number of 31-byte chunks needed to represent MaxPaddedBytes minus one!\n *\n * @note PaddedChunksMinusOne is because we are going to do the following:\n *                            1. align the SubString bytes according to the StringBody bytes being matched against\n *                            2. split the aligned bytes into 31-byte chunks. The 1st and last chunks might contain\n *                               fewer than 31 bytes due to the above alignment\n *                            3. validate the aligned-byte-chunks match the StringBody byte chunks\n *       To account for the fact that the 1st and last chunks might have fewer bytes we treat those separately\n *       The param PaddedChunksMinusOne is the number of 31-byte chunks required to represent SubString *EXCLUDING* the initial and final chunks\n */\nstruct SubString<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> {\n    body: [u8; MaxPaddedBytes],\n    byte_length: u32\n}\n\ntype StringBody32 = StringBody<62, 2, 32>;\ntype StringBody64 = StringBody<93, 3, 64>;\ntype StringBody128 = StringBody<155, 5, 128>;\ntype StringBody256 = StringBody<279, 9, 256>;\ntype StringBody512 = StringBody<527, 17, 512>;\ntype StringBody1024 = StringBody<1054, 34, 1024>;\ntype StringBody2048 = StringBody<2077, 67, 2048>;\ntype StringBody4096 = StringBody<4123, 133, 4096>;\ntype StringBody8192 = StringBody<8215, 265, 8192>;\ntype StringBody16384 = StringBody<16399, 529, 16384>;\n\ntype SubString32 = SubString<62, 1, 32>;\ntype SubString64 = SubString<93, 2, 64>;\ntype SubString128 = SubString<155, 4, 128>;\ntype SubString256 = SubString<279, 8, 256>;\ntype SubString512 = SubString<527, 16, 512>;\ntype SubString1024 = SubString<1054, 33, 1024>;\n\ntrait SubStringTrait {\n    fn match_chunks<let HaystackChunks: u32>(\n        self,\n        haystack: [Field; HaystackChunks],\n        num_bytes_in_first_chunk: Field,\n        body_chunk_offset: Field,\n        num_full_chunks: Field\n    );\n\n    fn len(self) -> u32;\n    fn get(self, idx: Field) -> u8;\n    fn get_body(self) -> [u8];\n}\n\n// ######################################################\n// S U B S T R I N G\n// ######################################################\nimpl<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> SubString<MaxPaddedBytes, PaddedChunksMinusOne, MaxBytes> {\n\n    /**\n     * @brief construct a SubString object from an input byte array\n     * @details the input byte array must have a number of bytes less than or equal to MaxBytes\n     **/\n    fn new<let InputBytes: u32>(input: [u8; InputBytes], input_length: u32) -> Self {\n        assert(MaxBytes <= MaxPaddedBytes);\n        assert(input_length <= MaxBytes);\n        assert(InputBytes <= MaxBytes);\n        let mut body: [u8; MaxPaddedBytes] = [0; MaxPaddedBytes];\n        for i in 0..InputBytes {\n            body[i] = input[i];\n        }\n        SubString { body, byte_length: input_length }\n    }\n\n    /**\n     * @brief concatenate two SubString objects together\n     * @details each SubString can have different MaxBytes sizes, however we need OtherBytes <= MaxBytes\n     *          (use concat_into for cases where this is not the case)\n     **/\n    fn concat<let OtherPaddedBytes: u32, let OtherPaddedChunks: u32, let OtherMaxBytes: u32>(self, other: SubString<OtherPaddedBytes, OtherPaddedChunks, OtherMaxBytes>) -> Self {\n        assert(\n            OtherPaddedBytes <= MaxPaddedBytes, \"SubString::concat. SubString being concatted has larger max length. Try calling concat_into\"\n        );\n        assert(\n            self.byte_length + other.byte_length <= MaxPaddedBytes, \"SubString::concat, concatenated string exceeds MaxPaddedBytes\"\n        );\n        let mut body = self.body;\n        let offset: u32 = self.byte_length;\n        for i in 0..MaxPaddedBytes {\n            if (i + offset < MaxPaddedBytes) {\n                body[i + offset] = other.body[i];\n            }\n        }\n        SubString { body, byte_length: self.byte_length + other.byte_length }\n    }\n\n    /**\n     * @brief concatenate two SubString objects together. Return type has OtherPaddedBytes max bytes\n     * @details each SubString can have different MaxBytes sizes, however we need MaxBytes <= OtherBytes\n     *          (use concat for cases where this is not the case)\n     **/\n    fn concat_into<let OtherPaddedBytes: u32, let OtherPaddedChunks: u32, let OtherMaxBytes: u32>(\n        self,\n        other: SubString<OtherPaddedBytes, OtherPaddedChunks, OtherMaxBytes>\n    ) -> SubString<OtherPaddedBytes, OtherPaddedChunks, OtherMaxBytes> {\n        assert(\n            MaxPaddedBytes <= OtherPaddedBytes, \"SubString::concat_into. SubString being concat has larger max length. Try calling concat\"\n        );\n        assert(\n            self.byte_length + other.byte_length <= OtherPaddedBytes, \"SubString::concat_into, concatenated string exceeds MaxPaddedBytes\"\n        );\n        let mut body: [u8; OtherPaddedBytes] = [0; OtherPaddedBytes];\n        for i in 0..MaxBytes {\n            body[i] = self.body[i];\n        }\n\n        let offset: u32 = self.byte_length;\n        for i in 0..OtherPaddedBytes {\n            if (i + offset < OtherPaddedBytes) {\n                body[i + offset] = other.body[i];\n            }\n        }\n        SubString { body, byte_length: self.byte_length + other.byte_length }\n    }\n}\n\nimpl<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> SubStringTrait for SubString<MaxPaddedBytes, PaddedChunksMinusOne, MaxBytes> {\n\n    fn len(self) -> u32 {\n        self.byte_length\n    }\n    fn get(self, idx: Field) -> u8 {\n        self.body[idx]\n    }\n    fn get_body(self) -> [u8] {\n        let x = self.body.as_slice();\n        x\n    }\n\n    /**\n     * @brief given some `haystack` 31-byte chunks, validate that there exist `num_full_chunks`\n     *        in the SubString, starting at byte position `starting_needle_byte`.\n     *        The selected chunks must be equal to the haystack chunks starting at `starting_haystack_chunk`\n     **/\n    fn match_chunks<let HaystackChunks: u32>(\n        self,\n        haystack: [Field; HaystackChunks],\n        starting_needle_byte: Field,\n        starting_haystack_chunk: Field,\n        num_full_chunks: Field\n    ) {\n        let mut substring_chunks: [Field; PaddedChunksMinusOne] = [0; PaddedChunksMinusOne];\n        // pack the substring into 31 byte chunks.\n        // This is fairly expensive as we need a ROM table to access the SubString.body\n        // which is 2 gates per byte\n        for i in 0..PaddedChunksMinusOne {\n            let mut slice: Field = 0;\n            for j in 0..31 {\n                slice *= 256;\n                let substring_idx = starting_needle_byte as Field + (i as Field * 31) + j as Field;\n                let mut byte = self.body[substring_idx];\n                slice += byte as Field;\n            }\n            std::as_witness(slice);\n            substring_chunks[i] = slice;\n        }\n        // iterate over the needle chunks and validate they match the haystack chunks\n        for i in 0..PaddedChunksMinusOne {\n            let predicate: Field = lt_f(i as Field, num_full_chunks) as Field;\n            let lhs = substring_chunks[i];\n            let rhs = haystack[predicate as Field * (i as Field + starting_haystack_chunk)];\n            assert(predicate * (lhs - rhs) == 0);\n        }\n    }\n}\n\n// ######################################################\n// S T R I N G   B O D Y\n// ######################################################\nimpl<let MaxPaddedBytes: u32, let PaddedChunks: u32, let MaxBytes: u32> StringBody<MaxPaddedBytes, PaddedChunks, MaxBytes> {\n\n    /**\n     * @brief construct a StringBody object from an input byte array\n     * @details the input byte array must have a number of bytes less than or equal to MaxBytes\n     **/\n    fn new<let InputBytes: u32>(data: [u8; InputBytes], length: u32) -> Self {\n        assert(length <= MaxBytes);\n        assert(length <= InputBytes);\n        let mut body: [u8; MaxPaddedBytes] = [0; MaxPaddedBytes];\n        for i in 0..InputBytes {\n            body[i] = data[i];\n        }\n        StringBody { body, chunks: compute_chunks(body), byte_length: length }\n    }\n\n    /**\n     * @brief Validate a substring exists in the StringBody. Returns a success flag and the position within the StringBody that the match was found\n     **/\n    fn substring_match<NeedleSubString>(\n        self,\n        substring: NeedleSubString\n    ) -> (bool, u32) where NeedleSubString : SubStringTrait {\n        // use unconstrained function to determine:\n        // a: is the substring present in the body text\n        // b: the position of the first match in the body text \n        let position: u32 = unsafe {\n            // Safety: The rest of this function checks this.\n            utils::search(\n                self.body,\n                substring.get_body(),\n                self.byte_length,\n                substring.len()\n            )\n        };\n\n        assert(\n            position + substring.len() <= self.byte_length, \"substring not present in main text (match found if a padding text included. is main text correctly formatted?)\"\n        );\n        let substring_length = substring.len();\n\n        // chunk_index = which 31-byte haystack chunk does the needle begin in?\n        let chunk_index: u32 = position / 31;\n        // chunk_offset = how many haystack bytes are present in the 1st haystack chunk?\n        let chunk_offset: u32 = position % 31;\n        // how many needle bytes are in 1st haystack chunk?\n        let num_bytes_in_first_chunk: u32 = 31 - chunk_offset;\n        let mut starting_needle_byte_index_of_final_chunk: Field = 0;\n        let mut chunk_index_of_final_haystack_chunk_with_matching_needle_bytes: Field = 0;\n        let mut num_full_chunks = 0;\n\n        // is there only one haystack chunk that contains needle bytes?\n        let merge_initial_final_needle_chunks = lt_f(substring_length as Field, num_bytes_in_first_chunk as Field);\n\n        // if the above is false...\n        if (!merge_initial_final_needle_chunks) {\n            // compute how many full 31-byte haystack chunks contain 31 needle bytes\n            num_full_chunks = (substring_length - num_bytes_in_first_chunk) / 31;\n            // for the final haystack chunk that contains needle bytes, where in the needle does this chunk begin?\n            starting_needle_byte_index_of_final_chunk = num_full_chunks as Field * 31 + num_bytes_in_first_chunk as Field;\n            // what is the index of the final haystack chunk that contains needle bytes?\n            chunk_index_of_final_haystack_chunk_with_matching_needle_bytes = num_full_chunks as Field + chunk_index as Field + 1;\n        } else {\n            starting_needle_byte_index_of_final_chunk = 0;\n            // if the needle bytes does NOT span more than 1 haystack chunk,\n            // the final haystack index will be the same as the initial haystack index\n            chunk_index_of_final_haystack_chunk_with_matching_needle_bytes = chunk_index as Field;\n        }\n\n        // To minimize the number of comparisons between the haystack bytes and the needle bytes,\n        // we pack both the haystack bytes and needle bytes into 31-byte Field \"chunks\" and compare chunks.\n        // To do this correctly, we need to align the needle chunks with the haystack chunks\n        /*\n            e.g. consider a toy example where we pack 3 bytes into a chunk\n            haystack: [VWXZYABCDEQRSTU]\n            needle: [ABCDE]\n\n            when constructing needle chunks, we need to align according to where the needle is located in the haystack\n            haystack chunks:   [VWX] [ZYA] [BCD] [EQR] [STU]\n                                      _..   ...   .__\n            processed needle chunks: [ZYA] [BCD] [EQR]\n\n            a \"_\" symbole means that a chunk byte has been sourced from the haystack bytes,\n            a \".\" symbol means a byte is sourced from the needle bytes\n\n            Both the initial and final chunks of the processed needle are \"composite\" constructions.\n            If chunk byte index < `position` or is > `position + needle length\", byte is sourced from haystack, otherwise byte is sourced from needle\n\n            The way we execute this in code is to define an \"initial\" needle chunk and a \"final\" needle chunk.\n            Num needle bytes in initial chunk = position % 31\n            Num needle bytes in final chunk = (needle_length - (position % 31)) % 31\n\n            If needle_length < 31 then the \"initial\" and \"final\" chunks\n            are actually the *same* chunk and we must perform a merge operation\n            (see later in algo for comments)\n        */\n\n        // instead of directly reading haystack bytes, we derive the bytes from the haystack chunks.\n        // This way we don't have to instantiate the haystack bytes as a ROM table, which would cost 2 * haystack.length gates\n        let offset_to_first_needle_byte_in_chunk: Field = chunk_offset as Field;\n        let initial_haystack_chunk = self.chunks[chunk_index];\n        let final_haystack_chunk = self.chunks[chunk_index_of_final_haystack_chunk_with_matching_needle_bytes];\n\n        let initial_body_bytes: [u8; 31] = initial_haystack_chunk.to_be_bytes();\n        let final_body_bytes: [u8; 31] = final_haystack_chunk.to_be_bytes();\n\n        // When defining the initial chunk bytes, we can represent as Field elements as we are deriving values from known bytes.\n        // This saves us a few gates\n        let mut initial_chunk: [Field; 31] = [0; 31];\n        let mut final_chunk: [Field; 31] = [0; 31];\n        for i in 0..31 {\n            // if i < offset_to_first_needle_byte_in_chunk, we read from the haystack\n            // otherwise we read from the needle\n            // n.b. this can be done with an if statement, but the following code produces fewer constraints\n            let idx: Field = i as Field;\n            let predicate: Field = lt_f(i as Field, offset_to_first_needle_byte_in_chunk) as Field;\n            let lhs: Field = initial_body_bytes[i] as Field;\n            // if i < offset_to_first_needle_byte_in_chunk then `idx - offset_to_first_needle_byte_in_chunk` is negative\n            // to ensure we access array correctly we need to set the lookup index to 0 if predicate = 0\n            let substring_idx = (1 - predicate) * (idx - offset_to_first_needle_byte_in_chunk);\n            let rhs: Field = substring.get(substring_idx) as Field;\n            let byte: Field = predicate * (lhs - rhs) + rhs;\n            initial_chunk[i] = byte;\n        }\n\n        // If `merge_initial_final_needle_chunks = true`, `final_chunk` will contain the full needle data,\n        // this requires some complex logic to determine where we are sourcing the needle bytes from.\n        // Either they come from the `initial_chunk`, the haystack bytes or the substring bytes.\n        for i in 0..31 {\n            let mut lhs_index: Field = starting_needle_byte_index_of_final_chunk as Field + i as Field;\n            let predicate = lt_f(lhs_index, substring_length as Field);\n\n            /*\n                | merge_initial_final_needle_chunks | predicate | byte_source              |\n                | false                             | false     | body_bytes[i]            |\n                | false                             | true      | substring[lhs_idx]       |\n                | true                              | false     | body_bytes[i]            |\n                | true                              | true      | initial_chunk[lhs_index] |\n\n                NOTE: if `merge = true` and `predicate = true`, we read from `initial_chunk` to short-circuit some extra logic.\n                      if `initial_chunk` did not exist, then we would need to validate whether `i < offset_to_first_needle_byte_in_chunk`.\n                      if true, the byte source would be body_bytes, otherwise the source would be substring bytes\n            */\n            let byte_from_substring = substring.get(lhs_index) as Field;\n            let byte_from_initial_chunk = initial_chunk[i] as Field;\n            let byte_from_haystack = final_body_bytes[i] as Field;\n\n            // TODO: find out why this cuts 1 gate per iteration\n            std::as_witness(byte_from_initial_chunk);\n\n            let p = predicate as Field;\n            let m = merge_initial_final_needle_chunks as Field;\n            // p * (m * (a - b) + (b - c)) + c\n            let ab = byte_from_initial_chunk - byte_from_substring;\n            std::as_witness(ab);\n            let bc = byte_from_substring - byte_from_haystack;\n            let t0 = m * ab + bc;\n            let destination_byte = p * t0 + byte_from_haystack;\n\n            final_chunk[i] = destination_byte;\n        }\n\n        // TODO: moving this above the previous code block adds 31 gates. find out why? :/ \n        let mut initial_needle_chunk: Field = 0;\n        let mut final_needle_chunk: Field = 0;\n\n        // Construct the initial and final needle chunks from the byte arrays we previously built.\n        // Validate they match the initial and final haystack chunks\n        for i in 0..31 {\n            initial_needle_chunk *= 256;\n            initial_needle_chunk += initial_chunk[i];\n            final_needle_chunk *= 256;\n            final_needle_chunk += final_chunk[i];\n        }\n\n        std::as_witness(initial_needle_chunk);\n        std::as_witness(final_needle_chunk);\n\n        initial_needle_chunk = merge_initial_final_needle_chunks as Field * (final_needle_chunk - initial_needle_chunk) + initial_needle_chunk;\n        assert(initial_needle_chunk == initial_haystack_chunk);\n        assert(final_needle_chunk == final_haystack_chunk);\n\n        // Step 3: Construct needle chunks (for all but the 1st and last chunks) and validate they match the haystack chunks.\n        //         This part is much simpler as we know that all bytes in the chunk are sourced from the needle chunk.\n        // NOTE:   If we chose to not pack bytes into 31-byte chunks, the string matching algorithm would be simpler but more expensive.\n        //         Instead of matching chunks with each other, we would match individual byte values.\n        //         i.e. the number of iterations in this loop would be 31x greater\n        //         each loop iteration would also require a predicate, to check whether the byte index was within the needle range or not\n        //         Combined these two operations would add about 10 gates per loop iteration,\n        //         combined with a 31x iteration length would make this algorithm much more costly than the chunked variant\n        let body_chunk_offset: Field = chunk_index as Field + 1;\n        substring.match_chunks(\n            self.chunks,\n            num_bytes_in_first_chunk as Field,\n            body_chunk_offset,\n            num_full_chunks as Field\n        );\n        (true, position)\n    }\n}\n\n/// Given an input byte array, convert into 31-byte chunks\n/// \n/// Cost: ~0.5 gates per byte\nfn compute_chunks<let MaxPaddedBytes: u32, let PaddedChunks: u32>(body: [u8; MaxPaddedBytes]) -> [Field; PaddedChunks] {\n    let mut chunks: [Field; PaddedChunks] = [0; PaddedChunks];\n    for i in 0..PaddedChunks {\n        let mut limb: Field = 0;\n        for j in 0..31 {\n            limb *= 256;\n            limb += body[i * 31 + j] as Field;\n        }\n        chunks[i] = limb;\n        std::as_witness(chunks[i]);\n    }\n    chunks\n}\n\n#[test]\nfn test() {\n    let haystack_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\".as_bytes();\n    let needle_text = \" dolor in reprehenderit in voluptate velit esse\".as_bytes();\n\n    let mut haystack: StringBody512 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString64 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_small_needle() {\n    let haystack_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\".as_bytes();\n    let needle_text = \"olor\".as_bytes();\n    let mut haystack: StringBody512 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString32 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_needle_aligned_on_byte_boundary() {\n    let haystack_text = \"the quick brown fox jumped over the lazy dog\".as_bytes();\n    let needle_text = \" the lazy dog\".as_bytes();\n\n    let mut haystack: StringBody256 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString256 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_needle_haystack_equal_size() {\n    let haystack_text = \"the quick brown fox jumped over the lazy dog lorem ipsum blahhhh\".as_bytes();\n    let needle_text = \"the quick brown fox jumped over the lazy dog lorem ipsum blahhhh\".as_bytes();\n\n    let mut haystack: StringBody64 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString64 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_concat() {\n    let email_text = \"account recovery for Bartholomew Fibblesworth\".as_bytes();\n    let username = \"Bartholomew Fibblesworth\".as_bytes();\n    let mut padded_email_text: [u8; 256] = [0; 256];\n    let mut padded_username: [u8; 100] = [0; 100];\n    for i in 0..username.len() {\n        padded_username[i] = username[i];\n    }\n    for i in 0..email_text.len() {\n        padded_email_text[i] = email_text[i];\n    }\n    let needle_text_init = \"account recovery for \".as_bytes();\n\n    let needle_start: SubString128 = SubString::new(needle_text_init, needle_text_init.len());\n    let needle_end: SubString128 = SubString::new(padded_username, username.len());\n    let needle = needle_start.concat(needle_end);\n\n    for i in 0..45 {\n        assert(needle.body[i] == email_text[i]);\n    }\n\n    let haystack: StringBody256 = StringBody::new(padded_email_text, 200);\n    let (result, _): (bool, u32) = haystack.substring_match(needle);\n    assert(result == true);\n}\n\n#[test]\nfn test_concat_into() {\n    let email_text = \"account recovery for Bartholomew Fibblesworth\".as_bytes();\n    let username = \"Bartholomew Fibblesworth\".as_bytes();\n    let mut padded_email_text: [u8; 256] = [0; 256];\n    let mut padded_username: [u8; 100] = [0; 100];\n    for i in 0..username.len() {\n        padded_username[i] = username[i];\n    }\n    for i in 0..email_text.len() {\n        padded_email_text[i] = email_text[i];\n    }\n    let needle_text_init = \"account recovery for \".as_bytes();\n\n    let needle_start: SubString32 = SubString::new(needle_text_init, needle_text_init.len());\n    let needle_end: SubString128 = SubString::new(padded_username, username.len());\n    let needle = needle_start.concat_into(needle_end);\n\n    for i in 0..45 {\n        assert(needle.body[i] == email_text[i]);\n    }\n\n    let haystack: StringBody256 = StringBody::new(padded_email_text, 200);\n    let (result, _): (bool, u32) = haystack.substring_match(needle);\n    assert(result == true);\n}\n\n#[test]\nunconstrained fn test_partial_match() {\n    let mut Engine = DebugRandomEngine { seed: 0 };\n    let mut foo: [u8; 1024] = Engine.get_random_bytes();\n    let mut bar: [u8; 128] = [0; 128];\n    for i in 0..128 {\n        bar[i] = foo[i + 123];\n    }\n    let position = utils::search(foo, bar.as_slice(), 1024, 128);\n\n    assert(position == 123);\n}\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_string_searchv0.2.0/src/lib.nr"},"115":{"source":"unconstrained pub fn search<let N: u32>(\n    haystack: [u8; N],\n    needle: [u8],\n    haystack_length: u32,\n    needle_length: u32\n) -> u32 {\n    assert(needle_length > 0, \"needle length of size 0 not supported\");\n    assert(haystack_length > 0, \"haystack length of size 0 not supported\");\n    let mut found = false;\n    let mut found_index: u32 = 0;\n    for i in 0..haystack_length - needle_length + 1 {\n        if (found == true) {\n            break;\n        }\n        for j in 0..needle_length {\n            if haystack[i + j] != needle[j] {\n                break;\n            } else if (j == needle_length - 1) {\n                found = true;\n            }\n            if (found == true) {\n                found_index = i;\n                break;\n            }\n        }\n    }\n    assert(found == true, \"utils::search could not find needle in haystack\");\n    found_index\n}\n\nunconstrained fn __conditional_select(lhs: u8, rhs: u8, predicate: bool) -> u8 {\n    if (predicate) { lhs } else { rhs }\n}\n\npub fn conditional_select<T>(lhs: u8, rhs: u8, predicate: bool) -> u8 {\n    // Safety: This is all just a very verbose `if (predicate) { lhs } else { rhs }`\n    // formulated as `rhs + (lhs - rhs) * predicate`\n    unsafe {\n        let result = __conditional_select(lhs, rhs, predicate);\n        let result_f = result as Field;\n        let lhs_f = lhs as Field;\n        let rhs_f = rhs as Field;\n\n        let diff = lhs_f - rhs_f;\n        std::as_witness(diff);\n        assert_eq((predicate as Field) * diff + rhs_f, result_f);\n        result\n    }\n}\n\nunconstrained pub fn get_lt_predicate_f(x: Field, y: Field) -> bool {\n    let a = x as u32;\n    let b = y as u32;\n    a < b\n}\n\npub fn lt_f(x: Field, y: Field) -> bool {\n    // Safety: As `x` and `y` are known to be valid `u32`s, this function reimplements the\n    // compiler's internal implementation of `lt` \n    unsafe {\n        let predicate = get_lt_predicate_f(x, y);\n        let delta = y as Field - x as Field;\n        let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta;\n        lt_parameter.assert_max_bit_size(32);\n\n        predicate\n    }\n}\n\nstruct DebugRandomEngine {\n    seed: Field,\n}\n\nimpl DebugRandomEngine {\n    unconstrained fn get_random_32_bytes(&mut self) -> [u8; 32] {\n        self.seed += 1;\n        let input: [u8; 32] = self.seed.to_be_bytes();\n        let hash: [u8; 32] = dep::std::hash::sha256(input);\n        hash\n    }\n    unconstrained fn get_random_field(&mut self) -> Field {\n        let hash = self.get_random_32_bytes();\n        let mut result: Field = 0;\n        for i in 0..32 {\n            result *= 256;\n            result += hash[i] as Field;\n        }\n        result\n    }\n\n    unconstrained fn get_random_bytes<let NBytes: u32>(&mut self) -> [u8; NBytes] {\n        let num_chunks = (NBytes / 32) + ((NBytes % 32) != 0) as u32;\n\n        let mut result: [u8; NBytes] = [0; NBytes];\n        for i in 0..num_chunks - 1 {\n            let bytes = self.get_random_32_bytes();\n            for j in 0..32 {\n                result[i * 32 + j] = bytes[j];\n            }\n        }\n\n        let bytes = self.get_random_32_bytes();\n        for j in 0..(NBytes - (num_chunks - 1) * 32) {\n            result[(num_chunks - 1) * 32 + j] = bytes[j];\n        }\n        result\n    }\n}\n\n","path":"/Users/envoy1084/nargo/github.com/noir-lang/noir_string_searchv0.2.0/src/utils.nr"}},"names":["main"],"brillig_names":["split_60_bits","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","__mul_impl","__compute_quadratic_expression_with_borrow_flags","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","search","get_lt_predicate_f","decompose_hint","directive_integer_quotient","directive_invert"]}