{"noir_version":"0.36.0+1094f036be7b102252a3a5c0d4b8c621779cf4bd-aarch64","name":"NFT","functions":[{"name":"_store_point_in_transient_storage_unsafe","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"slot","type":{"kind":"field"},"visibility":"private"},{"name":"point","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/9VXX2/aMBB3gJQGurXaH6mTJs3avkAQSK20aYJtZW/tQx/2iFJiNmtpjIJpy5746ItVX3McTreKILUnobvkzr87/2yfg8dupZ7/PGv7VjfYukBM3+pwM+lUiBVus07vidRZeyJ11rdRp4c2bYMUb4ips3XxyQSNvET2vtWnSnOZSi2jRP4RMQ4/RPaZ1cN5OtZSpXw00yoTo6mSqR7JdKSzKJ1JkT8YR/RTjObpLJoIPo5SrtJkwS+MnSQizvNpkaW5vcDpush+Y/Ugy6JFHh+LG67mmqsJv1DzNJ7hgR+R/dbqSGtxOdVcKx7FMb+W+hdXVyKbJOoajx0g+7nV5zoa/85HKh4LMb1j8KvVgdU1q42/wmXvBAi3avzjsHcUsFWpuP5uYDH97eD3AH9nO/hhE9Z7WeDjuUBeOHXDZcHlEI0x8szaeMsBLvhqyPeN+PDJPiE+3Akg7671GzGn/fuSrYjxf7b2Xv47sHZ0dXk2HatYDOI4E7OV40W5vk8egtl8AOYhxTydJ4mcSJGd3MiZXsPedWCDXWPuudG6cBwW1/4z0rc63Ew6PpnDK6tflNRj+IFufsfPuch7ZvaYlhFiYFq+o6Ym8UEsXAdlFNQdWPh4BORd1S0jcHBR9ZVAt3WVLRtaiu/gz3D6Dr3HPh9xj8fSNYb4DwjzvbXbCAOvD+Ax9C4gz56jXld7hDjgsYXeV3k1eSQfY0ULxz7I32Jb3Zcdj+SDeig/NcJd21HrgcOHP4GwD+dpO/K4sOoVYkEfCEry9O1zuJl0odY9i1d2HtrIj+N7Vpf1tfu4cK0frQfHYw6gtn22fh5grNGvrV1cK7ff9j8yqQUjQu9VelhbjjhGYujEXGQ2STzk2SmJx80Kx3+yuoz8/22KgNdYFnFVbbKj4zCExlFfFvNw/eNrID+O//KPeZqN8Rf9BdPTLxEAAA==","debug_symbols":"zZjdioMwEEbfJde9yCSZTKavsiyL/UUQW1q7sJS+++qusXaVytZW5kaMnpjjRD5Mzmq1Xpy2H2m+2R3V/O2sst0yKdJdXrbOl5laHNIsS7cf7ctKVwdwP/xxn+RV81gkh0LNwbOeqXW+Kk9J6/IJmzRbqznBZdaBGbFmmbBBwfke1rKPsGVyVzpgD+1dgJr2jumGfp8pwNHuoK2JsEYzqb0fX3mGRh6GSg8GOdK2TffKE9lQ00QBOvL0VHm8la8GCK8egF88gNGjB3C6mQSnq0m9/72hi7RHb/9OmYHRPk/9/o35p0/Vxz7Qxz3QpzdZWGMsMGvi+7Xy2rn49hp5oFZW21hYExrWcKhsLDzBRlNjY4ZskDhGBYZWceqZszi1T2hqiQFdx8dP7mP4ng9N7oO+8fHY8QnCfFiWj9PCfECYjxHmY4X5OGE+KMzHC/MRls9OWD47YfmMwvIZheUzCstnFJbPKCyfcfp8Brz6DK0jGWxcjDBQ5+8WvSD7yoeE+QRhPizJ51I2P5NDmiyydb05uTnly9ZeZfG1/71Twt8=","brillig_names":["_store_point_in_transient_storage_unsafe"]},{"name":"transfer_to_private","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"databus"},"error_types":{}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block","attach_len_to_msg_block","build_msg_block","emit_encrypted_note_log_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","pack_arguments_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"_finish_transfer_to_public","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["_finish_transfer_to_public"]},{"name":"transfer_in_private","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"databus"},"error_types":{"16137133351287663689":{"error_kind":"fmtstring","length":17,"item_types":[]}}},"bytecode":"","debug_symbols":"","brillig_names":["pack_arguments_array_oracle_wrapper","call_private_function_internal","unpack_returns","get_notes_internal","get_collapse_hints","lt_32_hint","decompose_hint","lte_16_hint","get_key_validation_request","notify_nullified_note_oracle_wrapper","get_public_keys_and_partial_address","random","notify_created_note_oracle_wrapper","build_msg_block","attach_len_to_msg_block","build_msg_block","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"parameters":[{"name":"admin","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"name","type":{"kind":"string","length":31},"visibility":"private"},{"name":"symbol","type":{"kind":"string","length":31},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":6,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"3469988399892582431":{"error_kind":"fmtstring","length":20,"item_types":[]}}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"cancel_authwit","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"databus"},"error_types":{}},"bytecode":"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","debug_symbols":"7ZbdboMwDIXfJddc2M5/X2WaKmihQkJQAZ00ob77so6kbAvrBdq0qnAVJ5+c4xNbYmD7PDsdtmVdNB3bPA2sanZpXza1iwaG/LLXHdP6Pez6tO3ZBpWFhOX13i01wDlhRVnlbKPxnHyDSRs9wmTABhhJRGgulBlpLgXeoBHBehzdR4EnjGlBY5THLchA83hysiG3NlP4OWEoVmdmnJGrMzPOqNWZGWf0Yme4FehrtVpfazXqcoP59Rvs4huQpPAwmcnrChWhrQyprYLPeiKdg0aSbx33dPhVP8Gd68eofpQWQ+MpQTfmCwB9UxOg4Fc8JgpBST+Pbq3x70aG6LHK5Y9VroiXq8IMuLUWP5crDXhaGrSLB0z+N00uytqyqsrDdvrb6rZf0rZMsyofw+JU7yan/evx48SleAM=","brillig_names":[]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"14336010898202591232":{"error_kind":"fmtstring","length":16,"item_types":[]}}},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"]},{"name":"set_minter","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"minter","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"approve","type":{"kind":"boolean"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["set_minter"]},{"name":"get_admin","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/7VWW2/TUAw+aZKu6SirgEkg8ZBHJF7SbRLjrdO4iIsG2sQrkDVnIyJLpvZ0F57y08mZjhvXdYJGE0uRHcf+fHyJE0uUZBnuimWyBKNwBE/Y2GV0W4x8lCk/TmMVh0n8R0bY/AmSA8PfzdOJirPUP5fqRxhdxKk/CVM/S5Nb/1QWcpLIyJ+pUMVavsV4+0h+ZvjBdBreFgeI5I2fzZWfnfmn2TyNZtjxEMnPDQ+VkheXyleZH0aRfx2rX352JadnSXaNfT8i+aHhJyqc/C48Mz+S8nJRotBwz/CO4fq5XVxjqMV6NPIQbtP4+8HenieWqeHz73oG02oHPwD8luofbBicw7zEx7lA3B6ahUGNz2OiB9/3Rn5QXEMjh1cXXy4nWSQPomgqZ0tjTnOuo/tg2vfAfEoxj+ZJEp/Fcvr2Jp6pFWyHwQa5Q3SdinNhPSZuDjSNDQ/Wo5FLcoB6Pqo4j67PtpEX9fkwO7lbdofFtvvfZnqkIE0mKUiSruBfLvwMbLf/UZCB4BvL5dTwS7xjkXhCrA46jt8XrS6VkSVWe2iL1fp0SO0c5qxQO/wzMG7mnMGQiQtxtsRqz3C9qvKzmfyGonrOBoyfVcGF4BcYjcOdueUPyQjwnXbwgxbnYBd6gOsNeXSL6wXSW0YnjI1d4+sS+xHCfGnkLcH/QOB43Jxx/beYGtkMpkNiY3/w5WoCdpvIt8ucG2JukHNh0vc9co//08FXf2jg53vxoTlR2TQ8l8cyjOh3Bsek8bjY1A7mzCN5jc19sB4tdmPf4LmCnyEPPcf2rw2v+w5psvMSq4ty0+TkreS2o2v6GZ2D9thFcXGOQpQ1wPZ0rvuMvUdsNA2JPTeLXQaLm3WL+Hcr7AHPJfZvDK/qF7ezoQaDmjh4L7XZ11f7QQDxYaZcsbyTBInvEvtPor4GsE/u8spLPZ5hTRvmHvYutYeeucT+K9gW17GR4T1xmXja7meNnVXB7zAYnWN8oU9eXto0+Y2EmP28rINNYuLzdIg9lV2i+05y28xX87aRDmJCb3voGfjWYbkM1pCx7xEsj8HCOshb9/mbkfskZtN7H8+Unve/tmF3l/ESAAA=","debug_symbols":"1ZrdbuIwEIXfxddc2J4/m1dZrarQQhUpChXQlVaId2/S4kCbKFZLW3luUAzHno+Mh+NBOZqH9er58a5uN9u9Wf45mmZ7Xx3qbduNjqeFWe3qpqkf767fNrZ/cfZVv3+q2n64P1S7g1k6jnZh1u1DdynWdits6mZtluJOi5E4Ep21UWiQOuQJLUROYoiCF3WgCTVjcGc1Y5R36r8L49zN7M6CT2JL/lfp/e13ProB3uVuvfMUkxqu1ZPwIhDOapHgRvDwrfD0Hr4PgD8dgH46AN8cgDymlJHnbMrQJrUg+FHK5JM8/ZzwhTnx83O8/cKcyepHT6mg0Uu2+gOmAM7Gqwz6qWwwpqWJGTLZIAiS1BDCx2x4r5oeVNOjanpSTc+q6UU1fVBNHzXTg1VNr9prQbXXgmqvBdVei4VXLbq0dndJI/rCdw6CHeiBR/S/v3P8sBdYQobegQzdH4QLiO8alZ6eVNOzavrCTwrzVUul/+bwkCmU0b9aVPhJAQeQSfrCTwoI8UKfq5JofSKJlsbfVbU7UOHnigx94T18hr7wHj5DX3gPn6EvvIfP0JfuzLP0XLozz9OX7szz9MU78yy9aq9l1V7Lqr2WVXstq/ZaVuy1p274r9rV1apZnx8C2Ty391fPhBz+P7190olfAA==","brillig_names":["get_admin"]},{"name":"private_get_symbol","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"databus"},"error_types":{}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_returns_oracle_wrapper","directive_integer_quotient","directive_invert"]},{"name":"transfer_to_public","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"databus"},"error_types":{"16137133351287663689":{"error_kind":"fmtstring","length":17,"item_types":[]}}},"bytecode":"","debug_symbols":"","brillig_names":["pack_arguments_array_oracle_wrapper","call_private_function_internal","unpack_returns","get_notes_internal","get_collapse_hints","lt_32_hint","decompose_hint","lte_16_hint","get_key_validation_request","notify_nullified_note_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","directive_invert","directive_integer_quotient"]},{"name":"public_get_name","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/7VWS2/TQBBex3YaB0IjoBJIHHxE4uKUCsotVXmIhwpqxZXixtti4dpRsumDk3863monnkzGRqX2SNbMjme+2Xl415YoyTLcFatkCUbhCJ6wscvoNhn5IFN+nMYqDpP4j4yw+WMkvzL8/SKdqDhL/eniJIknx2dSHafhufQnYepnaXLtn2g5SWTkz1WoYi1fY9RdJD81fG82C6+LbUTyys8Wys9O/ZNskUZz7LiP5GeGh0rJ86nyVeaHUeRfxuqXn13I2WmSXWLfT0h+YPiRCie/C8/Mj6ScLgsVGu4Z3jFcv7eLZ2zWwd1o5CHcpvF3g50dT6xSw/t/6RlMqx38APBbqn+wYXD28xIf5wJxe2gWBjU+j4gefD8Y+X7xDI0cXpx/nU6ySO5F0UzOV8ac5lxHt8G0b4H5hGIeLJIkPo3l7N1VPFdr2A6DDXKH6DoV+8J6TNwcaBobHtyNRi7JAer5sGI/uj5bRl7W5+P86Oaw2y9Ou/9tpkcK0mSSgiTpCv7jwu/AdusfBRkIvrFcTg1/xNsWiSfE+qDj+H3R6qEyssR6D22xXp8OqZ3D7BVqh38Jxs3sMxgycSHOpljvGa5XVX42k99QVM/ZgPGzKrgQ/AFG43B7bvkiGQG+0w5+0OIcbEMPcL0hj27xPEd6y+iEsbFrfF1iP0KYL4y8KfgfCByPmzOu/xZTI5vBdEhs7A++XE3A7h7y7TL7hpgbZF+Y9LpH1vhvHXz1RQO/4MuL5khls/BMHsowovcMjknjcbGpHcyZR/Iam3VwN1qejX2D5wp+hjz0Htu/MbzuHtJk5yVWF+WmyclbyW1b1/QL2gftsYvi4hyFKGuA7elc9xl7j9hoGhJ7bha7DBY36xbx71bYA55L7N8aXtUv7syGGgxq4uBzqc2+vt4NAogPM+WK1TNJkPgusf8s6msA58lNXnmpxzOsacOs4dyl9tAzl9h/A9viOTQyfCcuE0/b/ayxsyr4DQajc4wv9MnLS5sm70iI2c/LOtgkJt5Ph9hT2SW6HyS3e/l63jbSQUzobQ+9A986LJfBGjL2PYLlMVhYB3nrPn83cp/EbPrcxzOl5/0v2m6MRfcSAAA=","debug_symbols":"1ZrdbuIwEIXfxddc2J4/m1dZrarQQhUpChXQlVaId2/S4kCbKFZLW3luEIZj/OGZyfFEOZqH9er58a5uN9u9Wf45mmZ7Xx3qbduNjqeFWe3qpqkf764/NrZ/cfZVv3+q2n64P1S7g1k6jnZh1u1D91as7X5hUzdrsxR3WozEkeisjUKD1CFPaCFyEkMUvKgDTagZgzurGaO8U/9dGOduZncWfBJb8r9K72/f+egGeJfbeucpJjVcqyfhRSCc1SLBjeDhW+HpPXy/AP70AvTTC/DNC5DHFDLynA0Z2qQWBD8KmXySp58TvjAnfn6Ot1+YM1n9IJzyFiT6TPWLhWEBH64iCFPRYEzXCmKGTDQIgiQ1hPAxGt6rpgfV9KianlTTs2p6UU0fVNNHzfRgVdOr9lpQ7bWg2mtBtddi4VWLDpMaP7R0PX3hmYNgB3rgEf3vZ44fcoElZOi7jj6J7WXnAV97EyTF7KyYvfAzwny9UulXGx62HmV0P4sKPyMg+Tn6ws8ICPFCn6uRaH3Ks2hp/F9V+wIVfqLI0BfevWfoC+/eM/SFd+8Z+sK79wx96c48S8+lO/M8fenOPE9fvDPP0qv2Wlbttazaa1m117Jqr2XFXnvqhv+qXV2tmvX58Y/Nc3t/9TTI4f/T2zed+AU=","brillig_names":["public_get_name"]},{"name":"get_private_nfts","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"page_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"array","length":10,"type":{"kind":"field"}},{"kind":"boolean"}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"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","brillig_names":["get_private_nfts"]},{"name":"is_minter","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[{"name":"minter","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["is_minter"]},{"name":"finalize_transfer_to_private","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"hiding_point_slot","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["finalize_transfer_to_private"]},{"name":"prepare_transfer_to_private","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"databus"},"error_types":{}},"bytecode":"","debug_symbols":"7L3dkizJjp33LueaFxkRiD++ikwmoyRSRjPaUCaOrmh8d2Wf3Zm7WgWEVzMwSMD9m6sZWrK2xwd0+FqrsoD//o//8z/+7//v//W//ed/+U//9b/949//L//9H//lv/4f/+Ff//N//Zfn//Xf/zEt//x/+2//93/4lz/+z//2r//h//nXf/z7aTsf/+4f//Ff/s/n/7o/Hv/j3/3jP/3n//If//Hv9+l//LtvH573Y//zw/PxON8fnmZRPr3Idvz56WWVqfHpaXqcr49Pz/+Z35+fJ+0s03Fsr4+fj/X96UX/4fP5/tn78fXD/+u/+8ckkDHIrJAxyGyQMcjst8ksp0yvZz33/fezHts//4Xj3/xfOG//C9O8yuvD8/GlurIpnz7X948+t8dfz6N0znSs86t1nqWb/v/nnx/Fzz/dPv+2Hq//ALavJzIednu1w7R8af9pXv55nDnXcZZcx5Fcx1mDj7Ps7+PIQ/5yHOXF83wzv14887L9fndOD+1nP7b5fezHtiyt17jM8/ssXy6J/4nX+LyB0QPjDkYPjAcYPTCeYHTAuDzA6IFxAqMHxhmMHhgXMHpgFDB6YMTFuGDExbhgxMW4YMTFuGDExXhglL5czLr/xrhPLYx+v++QvlzMxzCGuxh5n0bmFsZpe7wfdN9+f3p+ZMO4gNEDo4DRA2O4i1lmC+Mfx3FwA9uyv4+zro3jPAvy+snztDZevsv7N/ay/D7FfB5qTR+yvmv6OFuyYTmn98+erys6H++KzocsjfI79oqDx9jep9n2L9+oUD98Lq/DnF9/vb2o/8Gtr587P758leLcBynNQWmyluaMLc3zAnl/LeT5TmsWZ3+/j9e9VfXt/RWSr9/IeZqc53Ouj0GecxrkOedBnvO+Ht8f0+ultT/m5euH//gHxOEfeD/tPjW/OSdvP/lFSe6qoJmX5e099+3Ly/mfB1/zHnz5/e3A5est8evgW1Xie1XiR1XiZ1Hi2yPvwfft5cCWY/py8H/qoW3Ke/Dj/P2d4+8Hn6sefKl68MQ35/XBE9+c1wdPfHNeHzzxzXl98MQ35/XBE9+clwffE9+c1wfPe3PK/A6wZd6/HFz745JV3uH4+jUDnv/5lyV73mvW8ynz3smeTylDPGXe297zKfNKA8+nzKsjPJ8yr+jwfMq8CsXxKY+8csbzKYfQPscQ2ucYQvscMsRTDqF9jiG0zzGE9jmG0D7HENrnHEL7nENon3MI7XMOoX1OGeIph9A+5xDa5xxC+5xDaJ9zCO3zPNYYjzmE+pkeQ8if6TGE/pkeMsZjDqGApscQEmh6DKGBpscQImh6jKGCpjFU0DSGCprGUEHTGCrIYWx7icccQwVNY6igaQwVNI2hgqYxVNCcWAVtj9ffdco2P76dPLGwaZw8sVZpnDyx/GicXBKffF3fJ9+/nzyxSGicPPG93zh54qu8cfLEt3Pj5Ikv3Ot3y1L2Dl3K3qFL2Tt0yXyHXv4X6jD/+VMnL3uHLmXv0KXsHbqUvUOXzHfo5ckl8x16ffLMd+j1yTPfodcnL3uHOkwf/dTJy96hUvYOlcx36KXKlcx36PXJy/rQtawPXcveoWvZO3Qte4cmnovYOnnZOzTxZMTWycv60MSzEVsnL+tDE09HbJ287B2aeD5i6+Rl79DEExJbJ898h16q3MQzElsnL+tDE09JbJ287B2aeE5i6+Rl79DMww8bJy97h2YeUtg4eVkfmnmYYOPkZX1o5qF/jZOXvUMzD+drnLzsHZp5iF7j5GW/l5t52F3j5GV9aOahdI2Tl71DMw+Pa5y87B2aechb4+Rl79DMw9gaJy/rQzMPTWucvKwPzTzcrHHysndo5iFkjZNXvUPnzLPCGiev+rctc+aJXo2TV/Wh8yPzHXp98qp36Jx5Olbj5FXv0DnzDKvGycveoZknTTVOXtWHzpnnQTVOXtWHzpmnNjVOXvYOzTxbqXHysndo5glIjZNX/duWueycornsnKK57JyiOfWcosv/QsvOKZrLzimay84pmsvOKZrLzimaU88pujx56jlF1ycv60NTzym6PnnZO7TsnKK57Jyiueycojn1nKJLlZt6TtH1ycv60NRziq5PXvYOLTunaC47p2guO6doLjunaC47p2hOPafo+uRlfWjqOUWXJ089p+j65GXv0LJziuayc4rmsnOK5tRzii5Vbuo5RdcnL+tDU88puj552Tu07JyiueycornsnKK57Jyiueycojn1nKLrk5f1oannFF2fvKwPLTunaC47p2guO6doLjunaE49p+hS5aaeU3R98rI+NPWcouuTl71Dy84pmsvOKZrLzimay84pmsvOKZpTzym6PnnmO/T65GV9aOo5RdcnL3uHlp1TNJedUzSXnVM0p55TdKlyU88p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7iykte4spLXuLKQ19Syka9GbehZS4+h1vWnqWUiNo9e9TevOQlrrzkJa685CWuvOQlrrzkJaU89Cahy9rjdNPQvp+uipZyE1jl73Nq07C2mtOwtprTsLaU09C+la9KaehdQ4el1vmnoWUuPodW/TurOQ1rqzkNa6s5DWurOQ1rqzkNbUs5AaR6/rTVPPQmocva43rTsLaa07C2mtOwtprTsLaU09C+la9KaehdQ4el1vmnoWUuPodW/TurOQ1rqzkNa6s5DWurOQ1rqzkNbUs5AaR898mzaOXtebpp6F1Dh63du07iykte4spLXuLKQ19Syka9GbehZS4+h1vWnqWUiNo9e9TevOQlrrzkJa685CWuvOQtrqzkLaUs9Cahy9rDfdUs9Cahw9823aOHrZ23SrOwtpqzsLaas7C2lLPQvpUvRuqWchNY5e1ptuqWchNY5e9zatOwtpqzsLaas7C2mrOwtpqzsLaUs9C+n66KlnITWOXtebpp6F1Dh63du07iykre4spK3uLKQt9Syka9GbehZS4+h1vWnqWUiNo9e9TevOQtrqzkLa6s5C2urOQtrqzkLaUs9Cahy9rjdNPQvp+uipZyE1jl73Nq07C2mrOwtpqzsLaUs9C+la9KaehdQ4el1vmnoWUuPodW/TurOQtrqzkLa6s5C2urOQtrqzkLbUs5AaR6/rTVPPQmocva43rTsLaas7C2mrOwtpqzsLaUs9C+la9KaehdQ4el1vmnoWUuPodW/TurOQtrqzkLa6s5C2urOQtrqzkLbUs5AaR898mzaOXtebpp6F1Dh63du07iykre4spK3uLKQt9Syka9GbehZS4+h1vWnqWUiNo9e9TevOQtrqzkLa6s5C2urOQtrqzkLaUs9Cahy9rjdNPQupcfTMt2nj6HVv07qzkLa6s5C2urOQttSzkC5F7556FlLj6GW96Z56FlLj6GVv0/1R9jbd685C2uvOQtrrzkLa685C2lPPQro+eupZSI2jl/Wme+pZSI2j171N685C2uvOQtrrzkLaU89Cuha9qWchNY5e15umnoXUOHrd27TuLKS97iykve4spL3uLKS97iykPfUspMbR63rT1LOQro+eehZS4+h1b9O6s5D2urOQ9rqzkPbUs5CuRW/qWUiNo9f1pqlnITWOXvc2rTsLaa87C2mvOwtprzsLaa87C2lP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dS4CF5UL+a7OhXxX50K+q3NB7+pc0LsqF/arGVzQuzoX5pGpOcO4+9UaXAQuKhfyXZ0Leld/76J3dS7oXZ0Lelflwn41gwt6V+dCvqtzId/VuQhcVC7kuzoX9K7OBb2rc0Hv6lzQuyqXcferXecM4+5Xa3Ah39W5kO/qXIT3rvreRe/qXNC7Ohf0rs4FvatzQe+qXMbdr9bgQr6rcyHf1bmQ7+pcBC4qF/Tu/9fe3e620mSHFb6X/M6P/tjVHxczCGwjCAYYzAT2JEAQ+N7NM+8hpTmqZoutrXWKzQUDhg/MkppPUVKtLb3suovn3bqL5926i+9HVp0zvO791e67vO791XZcnO/WXTzvVr/ven+1DZfQperiebfu4nm37uJ5t+7ifLfu4ny36vK691fbcXG+W3fxvFt38bxbdwldqi6ed+suvh9Zdc7wuvdX23Fxvlt3cb5bdfH+avXvu95fbcPF827dxfNu3SV0qbp43q27ON+tuzjfrbs43627ON+tunh/tQ0Xz7t1F8+7dRfPu3WXcM5QmzO87v3Vdlyc79ZdnO/WXTzv1r/vet6tuSzeX23DxfNu3cXzbt3F827dJXSpujjfrbs43627ON+tu3jerbt43q26eH+1DRfPu3UX34+sNmdYXvf+ajsuoUvVxflu3cXzbv37rufduovn3bqL592qi/dX23DxvFt3cb5bd3G+W3cJXaouznfrLp536y6ed+sunnfrLp53qy6ve3+1+3OG172/2o6L8926i/Pdukv4fbf6fdfzbt3F827dxfNu3cXzbt3F827V5XXvr7bj4ny37uJ8t+7ifLfuErpUXTzv1l0879ZdPO/WXXw/suqc4XXvr3bf5XXvr7bj4ny37uJ5t/p91/urbbiELlUXz7t1F8+7dRfPu3UX57t1F+e7VZfXvb/ajovz3bqL5926i+fdukvoUnXxvFt38f3IqnOG172/2o6L8926i/Pdqov3V6t/3/X+ahsunnfrLp536y6hS9XF827dxflu3cX5bt3F+W7dxflu1cX7q224eN6tu3jerbt43q27hHOG2pzhde+vtuPifLfu4ny37uJ5t/591/Nu1cX7q224eN6tu3jerbt43q27hC5VF+e7dRfnu3UX57t1F8+7dRfPuzWX1furbbh43q27+H5ktTnD+rr3V9txCV2qLs536y6ed+vfdz3v1l0879ZdPO9WXby/2oaL5926i/Pduovz3bpL6FJ1cb5bd/G8W3fxvFt38bxbd/G8W3V53fur3Z8zvO791XZcnO/WXZzv1l3C77vV77ued+sunnfrLp536y6ed+sunnerLq97f7UdF+e7dRfnu3UX57t1l9Cl6uJ5t+7iebfu4nm37uL7kVXnDK97f7X7Lq97f7UdF+e7dRfPu9Xvu95fbcMldKm6eN6tu3jerbt43q27ON+tuzjfrbq87v3Vdlyc79ZdPO/WXTzv1l1Cl6qL5926i+9HVp0zvO791XZcnO/WXZzvVl28v1r9+673V9tw8bxbd/G8W3cJXaounnfrLs536y7Od+suznfrLs53qy7eX23DxfNu3cXzbt3F827dJZwz1OYMr3t/tR0X57t1F+e7dRfPu/Xvu553qy7eX23DxfNu3cXzbt3F827dJXSpujjfrbs43627ON+tu3jerbt43q26eH+1DRfPu3UX34+sOmd43fur7biELlUX57t1F8+79e+7nnfrLp536y6edysufdd5g7UtGE+8GzCOeDdgnPFuwIQwdRinvBswHns3YDz3bsB48N2A8eRbh3ndW63dGzn8gPG9yTZgHPZuwDjt3YAJv/nWv/l68t2A8eS7AePJdwPGk+8GjCffOszr3nRtD8aZ7waMM98NGGe+GzAhTB3Gk+8GjCffDRhPvhswvllZfezwundf24F53duv7cE4892A8eRb/+brHdi2YEKYOown3w0YT74bMJ58N2Cc+W7AOPOtw7zujdj2YJz5bsB48t2A8eS7ARPC1GE8+W7A+PZl9bHD696PbQ/Gme8GjDPfOoy3ZNv45us92bZgPPluwHjy3YAJYeownnw3YJz5bsA4892Acea7AePMtw7jzdm2YDz5bsB48t2A8eS7AROOHapjh9e9Q9sejDPfDRhnvhswnnw3vvl68q3DeJu2LRhPvhswnnw3YDz5bsCEMHUYZ74bMM58N2Cc+W7AePLdgPHkW4fxhm1bMJ58N2B8V7P62OF179m2BxPC1GGc+W7AePLd+ObryXcDxpPvBown3zqMt27bgvHkuwHjzHcDxpnvBkwIU4dx5rsB48l3A8aT7waMJ98NGE++VZj+de/hdn/s0L/uPdz2YJz5bsB48t34HhPC1GE8+W7AePLdgPHkuwHjyXcDxvd2qP+49h5uWzCe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","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block","attach_len_to_msg_block","build_msg_block","emit_encrypted_note_log_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","pack_returns_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"set_admin","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"new_admin","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/9UXXW/TQOz6kbZpN1bxJRA85BegdJvEEBJ0Ap5AQ2IInkAKS8Yisqak6Tb2FAnB7yaH7MV1nGxdEyQsRXZyPn/bd2moDBqADfauBJ4xYHs1GFUoy14wsl3iBEJX4HlA6A3Ae2Fs+RM/9p3AP/dcyr5D6LuAD5wg8CLLn1mTdKMzsRz32J/QXa8JfR/wbhQ5P1I1rndmhfPYCg+tL+F84s7oxn1CPwTsxLF3PI2tOEwVudapHx9Z4YkXHQbhKd376bpKj1ZQGhL6BjoROwff0p2h5Xre9CL6vwGbgJuA9XpLVVdyJpFbtfwde3vbVItQsf1bJsisMz4oswb5NnbdiySTz33RsA7vtJxwT4/Uya30eZmoBdDrAZPTUos5kbBifiOgfRgbPl3GgO0VYajysW//Az/+Zx+M6n3YlHxAPWvpMwTaOTl+Oz0IXW/XdSNvtjA2GwX2S7CMTGMJmfe4zL15EPiHvhe9OvNncU52R5CNdFPJvnG7KB8Faa5oGAO2V4ORwXzAo+pmgT1ltchrq+IZuHmVWqf6+6rWmTxqqHwvtVQ+Pk0Wu45g61BYw/7fKIgr0kU2GIINZT26Luy77pwZlthc91kpnTd1nPUd4ndFsrcwB9LZrvU9It/1g/eCtsryLu01GP8HInME9Abj4fnTT09l0GL8iunWjynw9wT7pBrHvWsq+6u4mMn7Xnr/jvjIlX5OioCaYgjqu2wNeZ8AvmxEFqXwKflOdV41hcj/nMh8BvRA5dufylOCf/gujaWykYBtwNM5hnd7NbjyuEf9fVXr8TMqawFp1GLsTMHWobDG42rW7Ecf5BlKrjuTrFP+N4CL6r+s9aU4cXsoP40B8uOooHWHe/WouAN0NiriMHK+eh8jP/YUA34/403RE/gU4yk6f6mDbcaPejoF/CiPz+33gJcZPgbRhcOnbNZLc1oaICZ7pwME9+qE3AaaJ+Sd57h8gFOdXJ+km/Nh8/TJeh3NMwB5Rc1Dm4vyfwZclj8NrSST1SW+aWgntfi2qWP/ndjBc2wQvZc1rFL5Bh8I/DRP/O44IGs9JqsryCrrN9xf1G9Fh70PuChf0j0XY7Beoofe5erM6+Md28YewZrCmuXQJuuUf6rKY6DzhPezTpJ9pzWsoQvveNHh/Bgng/HPkTd9ToHGPjEEfZrvVwlfowD/lSF8a8NezJOZZDxV/regzn6SxaHFdFJ7moyf0wb79pP5NkjyfrfIN9SJue2RNdxbJssQZA0F/h6TZQqy6Df0W+f5HOg+01n13Kc1pev9D5XUqUgDGgAA","debug_symbols":"1ZvdbuIwEIXfJddczNgzY09fZbWqoIUKCUEFdKUV4t032cYh3aSxmm4rzw0icCb+Yk984p9cqsf16uXpfrvfHE7V3Y9LtTs8LM/bw74+ulwX1eq43e22T/f9nytoPhD+6k/Py31zeDovj+fqDkVhUa33j/XXAFCfYbPdrau7gNefiwpxRoybEeNnxNCMGJ4RIzNiwoyYOCNGPx7jZuSBm5EH7qN5sBiIlbnVauBOiiQjWq+SxF4D3dSRR9RCEVu1kIY36obdf5odwbskBnbfSk+fr3nFDh5zVY+ONal9Xz0KH4KPrTqEiAN4/q/w/Ba+KUC+uoDw1QWM9hROMdWrUy+57IyUSkDQXgluRM1CKZdZxGcamH0MSe1jHDSwWqb3YJoeTdM70/TeND2ZpmfT9GKaPpimN+213rTXkmmvpcLvWsJ07vorD+gLzxzy0NH3QFp6/v7McV0uSIgZevShe7738TYWcPW4oKFH0/TONP07T2ldcjqVzOCNoBvgEpDkxvJMSS38T943PJStzV7Q68wL84wYmREz2kd4gHRrekDNtLSTVADWlZxpaQFILS3gNNdHBE3TEhx7I+62ZsWXTR+p658j04CeCqd3OkXPhdOzdPQy8EYR0/TBNH00TV94jzlNH8A0PZqmd6bpS/faafrSvXaa3rTXBtNeG0x7bTDttaF0r0W+0edGiYret2rFMHiejqU78/vX2tCX7szT9KU78zR96c48TW96jjUWvjJC0s2rURjsMomFr4wQuyn64ue39Uafm9NUcIlEgQfXqoWvo0zP5WvhexYy9IXvWcjQF75nIUNPpukL37OQoS/dmafpS3fmafrSnXma3vTKM4Jps0Uw7bYIpu0WwbTfIpg2XATDjnutD38tj9vlarduXwXavOwfem8GnX8/v/5Ti/8A","brillig_names":["set_admin"]},{"name":"transfer_in_public","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["transfer_in_public"]},{"name":"owner_of","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[{"name":"token_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/+1dTWxbWRW+z7GT2Kkbp7Hjpk0lM2LYMSRpygwjFhkNDAKkglqxAQmUqd0hNI1L4rZTRgIDYgkLpGHFDIgFCyQGJP6EQDMLhPiTQOxgBwIJIVgBG34W+GXetb98/u59z8/vtVn0Sumz3z3/99x7zrn3Jg3M6y2IfsJWgnfc7Lvt6Lk+XdvIkNZ6wHKG/xQTKBM+HxFwa/B5MXpe7vZau/u7vd2dvd1PdNoI/gb4/Jbo+czt/Wu93e5+q3t3v3Pwke711rWdwZf9vXutZzuDz3t7nXbrsLfT2w0/30Nyn4HPb4+eV3vdg53nOq3DvYEY6639wb8DtO7dTvuxFvYdtm7ePuyFhA96resH3ZutjceQ9kvwuR49e90bnf1Wu9s5PKLbeX73sIc4f8hRnn/D59Xo+dTBwc69ga3bnedb3du91sB2z3Zv77cPEbEIX+xw7fR6nZu3eq1et7XTbrfu7vY+2ure6RxcHwiGuPUgJdO1tIhvTIu4NYWaz6Rl+sG0iDemkPYrU+C+klbg76dFfDUt4q+nUPN3aZn+aQqm/0zL9L9pEWcKKRGXC+nVfDQt07elRXzPFNJ+cgrcz6cV+MW0iC+lRfzmFGp+B3BPR8+rvZ1rNwaY3Va707k1DPm/jEDL0XeLGfbPmOxynjLQzZr+E+tbl8rmeMtY/ovliGae9rE0c6C/PhfRebo/os+6hK1qjufFiDM/+KkAXNjeAfQszjK9t7jfLhznMQM8AsfTkE1ss7Jbu3HKux0916dsNTM+LkWTnx4l6NvOUYdSjjrMZq/DptLB8jk1+KlFn3fu3HzfrWvdduepdvugc3jI9ZGSX7VJaM5OQPMs07x8e29v9/pu5+CdYe0xRntO0LafC0brxnIhHDa15oRtO3quT9c2SqTDheh5xiFPaJ9G9Hlon3cfXj2qFJ8e1FhpDV8mQbJU0vKfj+iVhGxz1GdhH4kxSNWMT6jAoVPGAWMryeRH/hWhd5YBMjDjYzhjxu1TINvNC1lrog83gLAP+cwLPveL1qIZH+9Z4qNsM+fho3z0IZ90fKoCL20grXlkZr9GGnZNwGQ7wzl4KemaYPlXzLg/57EmlEke1/yytqsIWWuij+dxRfCpCD4nlZb1jwXo246e65O1TX6h5LR87BxEv5wnHdQYlj32QHwLVxV4085BJTP70TR87JicApgsCz81LqdIj2oGetSIVvi5SDqezkfHTUt/MR/6w+K8lg/9LUt/CeyaEe23Wtpn8pH9ovUh3Eyw/hXGrA/D+/BnOfpeMqN5jrinoR/hVwojmjvRu0WyG/sf4uMGAcIXHfw60TMuN3fp/RzJsRSj9xmSw8L/JRjR/Jhx6835zjL0VaivDn28dtoCzPYbM5q/K/D+QeQVln+FZM0rr1ghedB2YeM1vJmPPFtWnrNCnoaQJ/SLRTM+ZiifpYXzwq5vyk/Q17jPZ5uawK9T35zgo+Jvg/owpi1TX5XkQ9lVrqHs6MuvUC4771WtwTmCxSsJWFdeVxT4au2y8J+NnnFrl8qTymbctlnG6qRz3fKvCL3zmOu+MQ4b1xBVIavyPa7fVe3hk8FXE5SFDFnmpjWPzHHx74vwHm1SNDr+WdwSwf8W4t+L0TvfPGN+xvhreo7PCF8V8qlxXPLgIZySxSUr4vEmMM/3l6Ona74/3NM52Xzu197RopCB6/BZoc+sh8+84OPbt06rj5LZtxeWlg/qw3VyXmsq18kZ7M9wezxuvf4xvMc1KWmdZuEfh/X6tejdosDn9drqjLlOQdioRPA/iZ5xuU7g0PunJEdB6I24XKdZ+HnQ++fGrTevLQvQN099GEd4bln72/6w8T5CYB5MnWb5V0jWjOXZSBK7w8Z1Wk57IcM6bVnIc1rIg3UajhnKp/YvuE5DP+G8husgl21qAr9KfXOCj1qfT1MfrqkL1Md1BsqOB9o+O/piF9LkHA7xOVZZvJKALTn4Fh268Npl4f8YPePyNqTFNYOyEb7z1Qx86SeLSyA1j8xxa/Ff4T3aDWsGhVsi+H8Azb9HnxcFfhJ/UzqyfAif1N/4EhHKZeEWAFf5luXJ/ohN+bby5VBWuy8zvHwRXWe/0tk5dumfeTI/xZvhcr6/MIwNeC9D+ZDrbsZ/oqcvrwjbTH9EC/O4sBX7uei2Gcr4PbpMh2NcAr6oozH+nJ5thvBzBBO2JHcf1BxB+y8SvMWfdcDzWmrhSxGQa7x8F8iqHj64Lql5zPXTAsin5C+Q/Bb+VDDitxG4+fnyR67zqkJO24c5GZ8PLAmadr7yvu929H19ujbMnRox9qub4/az8I2Y8Q8I3wB9zB95LjQEfJ1gwqbOXRrUp85rygSbsV0vWhntOYDLrmh3hL+Q0K7KTj67qrOVBsGETZ1FrBD/JfqOY2DxTrr/PhpjZxVvFkC3sBX7ueh2ScUbrHE43qg5hvBp51jNjPsJnxclrVH4vAjXca57sEax6yau0wHxQz1w7DnWLQCtSWLFpQS+4qKl9jzS7vU8CTHry8Fx3upOSc77ExcD4mdMsv2Jaj7yTLw/wXNL+Tf2YeznOeabd4oWj9FyPjbZ5DXC5XN4TwTh35UwHilbKJsnWbNQNhXL69TnOv9BmljPqTtTfB/lcozevpxP8VZnVWccvD8O8/xK4Obnu4PCuWldyGn7cH3n3HRF4FmfPQt9eeRQq2CfGSHPWXPcfhb+QwnW67BhbK+CbmEr9nPRbUvF9ibIxrFd3UFBeJ5XqwIex8nar0bwOMeUrzWJjzpD9e1zIn7Vw2d5Sj7Lgo+PFs4LzhesPWYd8BjHEX4vxv9U7tSkvixypwbI78oXws+4J2h/I4rXMJyDSdawr8EadiflGua7R8d7CQ/v0T28R6f8hNeASe/RIX49BR+TMZ/GlHwags9Ji4coP8fDpL5t4ZsCHn3rFNkHfc0XD7lenjROKd9RfBpT8mkIPir+8B3RWSGDij+L1KfuiGL88elREHR9sVidnXIs/mpMLK56aOE9DRWfON9XNZbKbbjG+jrEyl8Fbn4cK1U8VDk95/vo/xxjm4KmjROYK+YRJ87F2A/rAYT/VswYB4RvTLJc+pyARxvwvMU8+xz1oV15L/oc9OVRR52P6LnsinZH+B8ktKuyk8+u5wU82oDtijY/T/yb9B3HwOKddP99LcEadWSr/ogW7rOHrdjPRTe5F435HMdnX/0ZtrRzrGbG/YRrJoxnXDNhPDtLfbiO+37nwa6buE4HxA/1wLHneFYHWpPEit8kjGeKFtZ3vr0zPk/C+GgEXftd/V7JpPcckCfzU7wZLudzp2GNpc6d0Ldd506/TzHX71Muvvmgz518uSv/PtT9yh//HDNevrw3Lre0v7Oh9rhd+9guf1si+S3834IRv1rBzc+3D1OmvrqQU+WdHMdXBM2c95K3OC657OfaS/5XzPgHZjzGcZ1pzOT7tHz+gfnjKvWhXTm3zCnnucjx22VXV87zv4R2VXby2TUun2C7qpzdCD48BhbvpPtvMQKaJN4sg25HNPq56HbpQZ+FcLxBP+FzkqS/M8s5Ka7jvMei9nlwnebYhXr4Yh3me5PEinoCX3HRUr+Dn/ZvD6wWRjRf8OQj0RKSd86X+J6D5V8x4zE0jxw0af7FZyTKF325lsrb1P69osVjlNPZx/Ceg7p3hz7nunf3phjf99nCl/PG3bvjeKTu3amcrOqQC89FEJ7vOVj4N8fo7TuXU7zVXY4zDt7vh3m+UXDz49wU7ce5adK9Td/encV7kPtzKi/h/bknT25sl+c6GI85tvvytrBNuofIezznoY/P19DXVonPpHe8EH/Zw6cxJZ+G4OOjhfMiyV7UiqDPe1HvjfE/lTutUl8Wf2+kCfK78oXwM95zuEI5ltrPSbKGfRrWsA+kXMOS1MkqP+bYmlMNkvieg+VfMePrbR75T9Ka+37v/6M8qj7Bew7qvAJp+e45qDkaiD6fbdS9qZUUfEzGfJpT8mkKPictHqL8HA+z3k/iew7oa754uEJ8Jo1TyncUn+aUfJqCj4o/XNcnrd35noOrdn+hEK+Hr3ZXsTjJPe1PpajdcZ/A/t1A351gnouuWOmqsT4HsfIbBTc/jpUqHqqcnvN99H/fmTLvRWOumEecWIuxH9YDCP+FhDWqyo19ufSagEcb8LzFPHuN+tCuvBe9Bn151FH2D9677Ip2R/gvJbSrspPPrhcEPNqA7Yo2v0D8V+k7joHFO+n++3KKenUFdAtbsZ+LbnIvGvM5js+++jNsaedYzYz7CddMGM+4ZsJ4do76cB3nWIfxzK6buE4HxA/1wLHneIZ3JiaJFa8kjGeKFtZ3efrN40+M/kNI67N2TnArQj/CfzdGT/s3KY706o/e4xwJ21z03e7BMbz1xxLB/xBi8o/A/49gBb8Q7hceuMDxPKIh3hUj3GEM7o9gMpzfw3Gq9Ed2mCGeKE+B4Plzid79DOZJ2Bb643rPwDvL047tPPQt9ONplQStmoCfJ1plQQvfWb3DcX41+lIhnhmPzQb6VOjv/wfLKGpIMXYAAA==","debug_symbols":"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","brillig_names":["owner_of"]},{"name":"mint","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"","brillig_names":["mint"]},{"name":"_finalize_transfer_to_private_unsafe","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"hiding_point_slot","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["_finalize_transfer_to_private_unsafe"]},{"name":"private_get_name","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"databus"},"error_types":{}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_returns_oracle_wrapper","directive_integer_quotient","directive_invert"]},{"name":"public_get_symbol","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/7VXX0/bQAy/tElpyhjVNqRN2sO9TdpTypDgsQwNiU0Cbex1YmlzsGihqdor0D3loy+Hzo1xnUyMxFJkx7F//ts7cERBjuWeeEiOYBSu4Akbe4xum5FPUy3jSazjMIn/qAibv0LygeXHi8lYx+lEThejJB5fXCl9MV9ej9JEjsOJTCfJUo5ULieJiuRchzo28hLj7iP5jeWHs1m4zBOJ1J1MF1qml3KULibRHDt+RPJby0Ot1fVUS53KMIrkbax/yfRGzS6T9Bb7niD5ueXnOhz/zj1TGSk1XbXqp+W+5S3Lzfd2/gzte/A0GvgIt278g2BvzxcPqeb8P/gW02kGPwD8hvofbFico6zAx7VA3C7aha0Kn5dED77HVn6WP30rhzfXZ9NxGqnDKJqp+YM1pzVX0WMw24/AfE0xTxdJEl/GavbpLp7rNWyXwQa5RXStkrywHhO3B4aGlgdPo4FHaoB+vijJx/Rnx8qr/pzMz+8Pu6P8tPvfYfqkIXUWKUiRnuB/XPgb2O78oyFbgh8srsklcYb11LXrkHhCrC86jt8TjR4qA0es39Ftsd6fFumdx+QKvesgv2E9eQZ9Ji7E2RbrM8P9KqvPZerrM/4uqR37OSUc4lAdjcPl3PRFAvheM/gD6BN3OZmZvUN6PEdXFLPhfD1iHyDM91beZvxdEo/bBW5GDukTtufmBrHx3MGX6wnYbSLfDpM3xNwgeWEy713yjvMAX3MZwB/Kq8vgXKez8Ep9U2FE7wIck8bjYlM72DWf5DW078HTaHV+9SyeJ/gd8tF3bA//KFTdFYbaWYHVQbUZcrNGats1Pf2C8qAz9lBcXKMQRQ+wPd3rHmPvExtDfWLP7WKHwcL994g9+HdK7AHPI/ZHlpfNiztXoQdbFXHwudTkXPcPggDiw07BzlJy0Xds/1lU9wDOk/u6skKPd9jQhn2Hc5fa43MX25+Bbf58tTL8TjwmnrG7qLBzSvg9BqNzrS/Myc8KmzrvSYjZy4o+tElMnE+L2FPZI7ofpLbNbL3uNtJBTJhtF30D3yosj8HqM/ZdguUzWFiH7/bvVu6RmHWf+3inzL7/BWJiCaadEgAA","debug_symbols":"1ZrfTsIwFMbfpddctD3/Wl7FGDMUzJJlGEATQ3h3h9KBblmjqOm5IRS+cn70tP1Om+3Nw3Lx/HhXt6v11sxv9qZZ31e7et12rf1hZhabumnqx7vLj409vjj7rt8+Ve2xud1Vm52ZO452ZpbtQ/dWrO1+YVU3SzMXd5gNxJHopI1CvdQhj2ghchJDFDyrA42oGYM7qRmjfFLfzoxzV7M7Cz6JLfl/pffXj3x0PbzLDb3zFJMaLtWj8CIQTmqR4Abw8Kvw9Bn+GAD/OgD9dQC+OgB5TCkjz9mUoU1qQfCDlMk3eY59wg/6xO/38fYHfUZXP1qfkoIWJbP6xUIfwIeLDMJYNhjTXkHMkMkGQZCkhhC+ZsN71fSgmh5V05NqelZNL6rpg2r6qJkerGp61V4Lqr0WVHstqPZaKHzPQYdJjV+OdB09Fj7vEWxPDzyg//957/u5wBIy9N2JPonteeQB388miIrZSTF74RVOZr2WvttwP/Qog/ssKrzCQfJT9IVXOAjxTJ9bI9H6NM+ipeF/Ve0LVHg9lKEvvB7K0Bd+95ChL/zuIUNf+N1Dhr50Z56mL92ZJ+m5dGeepi/emSfpVXstq/ZaVu21rNprWbXXsmKvPXTNl2pTV4tmeXr8Y/Xc3l88DbJ7ffr4phO/AQ==","brillig_names":["public_get_symbol"]}],"outputs":{"structs":{"events":[{"kind":"struct","path":"NFT::NFTTransfer","fields":[{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_id","type":{"kind":"field"}}]}],"functions":[{"kind":"struct","path":"NFT::prepare_transfer_to_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::prepare_transfer_to_private_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"NFT::transfer_to_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::transfer_to_public_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_id","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::set_admin_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::set_admin_parameters","fields":[{"name":"new_admin","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"NFT::set_minter_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::set_minter_parameters","fields":[{"name":"minter","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"approve","type":{"kind":"boolean"}}]}}]},{"kind":"struct","path":"NFT::_finish_transfer_to_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::_finish_transfer_to_public_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_id","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::transfer_in_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::transfer_in_public_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_id","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::_finalize_transfer_to_private_unsafe_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::_finalize_transfer_to_private_unsafe_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_id","type":{"kind":"field"}},{"name":"hiding_point_slot","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::owner_of_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::owner_of_parameters","fields":[{"name":"token_id","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::mint_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::mint_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_id","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::finalize_transfer_to_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::finalize_transfer_to_private_parameters","fields":[{"name":"token_id","type":{"kind":"field"}},{"name":"hiding_point_slot","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::get_admin_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::get_admin_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"NFT::_store_point_in_transient_storage_unsafe_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::_store_point_in_transient_storage_unsafe_parameters","fields":[{"name":"slot","type":{"kind":"field"}},{"name":"point","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}}]}}]},{"kind":"struct","path":"NFT::private_get_name_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::private_get_name_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::public_get_name_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::public_get_name_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::public_get_symbol_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::public_get_symbol_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::private_get_symbol_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::private_get_symbol_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::transfer_in_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::transfer_in_private_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_id","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::cancel_authwit_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::cancel_authwit_parameters","fields":[{"name":"inner_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::is_minter_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::is_minter_parameters","fields":[{"name":"minter","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"boolean"}}]},{"kind":"struct","path":"NFT::transfer_to_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::transfer_to_private_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_id","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"NFT::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"NFT::constructor_parameters","fields":[{"name":"admin","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"name","type":{"kind":"string","length":31}},{"name":"symbol","type":{"kind":"string","length":31}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"NFT"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"symbol","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"name","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"minters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"private_nfts","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"nft_exists","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"public_owners","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}]}}]}}]}],"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000d6523016"},{"kind":"string","value":"NFTNote"},{"kind":"struct","fields":[{"name":"npk_m_hash","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"token_id","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"},{"kind":"struct","fields":[{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"npk_m_hash","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]}]}},"file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n","path":"std/array/mod.nr"},"7":{"source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"24":{"source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n","path":"std/embedded_curve_ops.nr"},"25":{"source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{\n        decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI,\n    };\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"26":{"source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n","path":"std/field/mod.nr"},"29":{"source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"34":{"source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"35":{"source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE = 16;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeroes.\ntype MSG_BLOCK = [u8; BLOCK_SIZE];\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; BLOCK_SIZE];\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !crate::runtime::is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: MSG_BLOCK) -> INT_BLOCK {\n    let mut msg32: INT_BLOCK = [0; INT_BLOCK_SIZE];\n\n    for i in 0..INT_BLOCK_SIZE {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4 * (i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeroes.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeroes by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    for i in 0..BLOCK_SIZE {\n        if i >= msg_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n    for i in msg_byte_ptr..MSG_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[MSG_SIZE_PTR + i] = len_bytes[i];\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    for i in 0..MSG_SIZE_PTR {\n        let predicate = (i < msg_byte_ptr) as u8;\n        let expected_byte = predicate * last_block[i];\n        assert_eq(msg_block[i], expected_byte);\n    }\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let len = 8 * message_size;\n    let mut reconstructed_len: Field = 0;\n    for i in MSG_SIZE_PTR..BLOCK_SIZE {\n        reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n    }\n    assert_eq(reconstructed_len, len as Field);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4 * j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n","path":"std/hash/sha256.nr"},"58":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"59":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"65":{"source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n","path":"std/slice.nr"},"66":{"source":"use crate::collections::vec::Vec;\nuse crate::convert::From;\n\nimpl<let N: u32> str<N> {\n    /// Converts the given string into a byte array\n    #[builtin(str_as_bytes)]\n    pub fn as_bytes(self) -> [u8; N] {}\n\n    /// return a byte vector of the str content\n    pub fn as_bytes_vec(self: Self) -> Vec<u8> {\n        Vec::from_slice(self.as_bytes().as_slice())\n    }\n}\n\nimpl<let N: u32> From<[u8; N]> for str<N> {\n    fn from(bytes: [u8; N]) -> Self {\n        bytes.as_str_unchecked()\n    }\n}\n","path":"std/string.nr"},"70":{"source":"use dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, keys::getters::get_nsk_app, oracle::random::random,\n    prelude::{NullifiableNote, NoteHeader, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator, traits::{Empty, Eq}},\n    macros::notes::partial_note\n};\n\n#[partial_note(quote { token_id})]\npub struct NFTNote {\n    // ID of the token\n    token_id: Field,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n\nimpl NullifiableNote for NFTNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl NFTNote {\n    pub fn new(token_id: Field, npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        NFTNote { token_id, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for NFTNote {\n    fn eq(self, other: Self) -> bool {\n        (self.token_id == other.token_id)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}","path":"/home/lima.linux/aztec/alpha-build2/phantom-gate/contracts/nft-contracts/src/types/nft_note.nr"},"71":{"source":"mod types;\n\nuse dep::aztec::macros::aztec;\n\n// Minimal NFT implementation with `AuthWit` support that allows minting in public-only and transfers in both public\n// and private.\n#[aztec]\ncontract NFT {\n    use dep::compressed_string::FieldCompressedString;\n    use dep::aztec::{\n        oracle::random::random,\n        prelude::{\n            NoteGetterOptions, NoteViewerOptions, Map, PublicMutable, SharedImmutable, PrivateSet,\n            AztecAddress, PrivateContext, PublicContext,\n        },\n        encrypted_logs::encrypted_note_emission::{\n            encode_and_encrypt_note, encrypt_and_emit_partial_log,\n        }, hash::pedersen_hash, keys::getters::get_public_keys, note::constants::MAX_NOTES_PER_PAGE,\n        protocol_types::traits::is_empty, utils::comparison::Comparator,\n        protocol_types::{point::Point, traits::Serialize},\n        macros::{\n            storage::storage, events::event,\n            functions::{private, public, view, internal, initializer},\n        },\n    };\n    use dep::authwit::auth::{\n        assert_current_call_valid_authwit, assert_current_call_valid_authwit_public,\n        compute_authwit_nullifier,\n    };\n    use std::{embedded_curve_ops::EmbeddedCurvePoint, meta::derive};\n    use crate::types::nft_note::NFTNote;\n\n    // TODO(#8467): Rename this to Transfer - calling this NFTTransfer to avoid export conflict with the Transfer event\n    // in the Token contract.\n    #[event]\n    #[derive(Serialize)]\n    struct NFTTransfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        token_id: Field,\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        // The symbol of the NFT\n        symbol: SharedImmutable<FieldCompressedString, Context>,\n        // The name of the NFT\n        name: SharedImmutable<FieldCompressedString, Context>,\n        // The admin of the contract\n        admin: PublicMutable<AztecAddress, Context>,\n        // Addresses that can mint\n        minters: Map<AztecAddress, PublicMutable<bool, Context>, Context>,\n        // Contains the NFTs owned by each address in private.\n        private_nfts: Map<AztecAddress, PrivateSet<NFTNote, Context>, Context>,\n        // A map from token ID to a boolean indicating if the NFT exists.\n        nft_exists: Map<Field, PublicMutable<bool, Context>, Context>,\n        // A map from token ID to the public owner of the NFT.\n        public_owners: Map<Field, PublicMutable<AztecAddress, Context>, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.minters.at(admin).write(true);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n    }\n\n    #[public]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not an admin\");\n        storage.admin.write(new_admin);\n    }\n\n    #[public]\n    fn set_minter(minter: AztecAddress, approve: bool) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not an admin\");\n        storage.minters.at(minter).write(approve);\n    }\n\n    #[public]\n    fn mint(to: AztecAddress, token_id: Field) {\n        assert(token_id != 0, \"zero token ID not supported\");\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not a minter\");\n        assert(storage.nft_exists.at(token_id).read() == false, \"token already exists\");\n\n        storage.nft_exists.at(token_id).write(true);\n\n        storage.public_owners.at(token_id).write(to);\n    }\n\n    #[public]\n    #[view]\n    fn public_get_name() -> pub FieldCompressedString {\n        storage.name.read_public()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_name() -> pub FieldCompressedString {\n        storage.name.read_private()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_public()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_private()\n    }\n\n    #[public]\n    #[view]\n    fn get_admin() -> Field {\n        storage.admin.read().to_field()\n    }\n\n    #[public]\n    #[view]\n    fn is_minter(minter: AztecAddress) -> bool {\n        storage.minters.at(minter).read()\n    }\n\n    #[public]\n    fn transfer_in_public(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let public_owners_storage = storage.public_owners.at(token_id);\n        assert(public_owners_storage.read().eq(from), \"invalid owner\");\n\n        public_owners_storage.write(to);\n    }\n\n    // Transfers token with `token_id` from public balance of message sender to a private balance of `to`.\n    #[private]\n    fn transfer_to_private(to: AztecAddress, token_id: Field) {\n        let from = context.msg_sender();\n\n        let nft = NFT::at(context.this_address());\n\n        // We prepare the transfer.\n        let hiding_point_slot = _prepare_transfer_to_private(to, &mut context, storage);\n\n        // At last we finalize the transfer. Usafe of the `unsafe` method here is safe because we set the `from`\n        // function argument to a message sender, guaranteeing that he can transfer only his own NFTs.\n        nft._finalize_transfer_to_private_unsafe(from, token_id, hiding_point_slot).enqueue(\n            &mut context,\n        );\n    }\n\n    /// Prepares a transfer to a private balance of `to`. The transfer then needs to be\n    /// finalized by calling `finalize_transfer_to_private`. Returns a hiding point slot.\n    #[private]\n    fn prepare_transfer_to_private(to: AztecAddress) -> Field {\n        _prepare_transfer_to_private(to, &mut context, storage)\n    }\n\n    /// This function exists separately from `prepare_transfer_to_private` solely as an optimization as it allows\n    /// us to have it inlined in the `transfer_to_private` function which results in one less kernel iteration.\n    ///\n    /// TODO(#9180): Consider adding macro support for functions callable both as an entrypoint and as an internal\n    /// function.\n    #[contract_library_method]\n    fn _prepare_transfer_to_private(\n        to: AztecAddress,\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n    ) -> Field {\n        let to_keys = get_public_keys(to);\n        let to_npk_m_hash = to_keys.npk_m.hash();\n        let to_note_slot = storage.private_nfts.at(to).storage_slot;\n\n        // We create a setup payload with unpopulated/zero token id for 'to'\n        // TODO(#7775): Manually fetching the randomness here is not great. If we decide to include randomness in all\n        // notes we could just inject it in macros.\n        let note_randomness = unsafe { random() };\n        let note_setup_payload =\n            NFTNote::setup_payload().new(to_npk_m_hash, note_randomness, to_note_slot);\n\n        // We encrypt and emit the partial note log\n        encrypt_and_emit_partial_log(context, note_setup_payload.log_plaintext, to_keys, to);\n\n        // Using the x-coordinate as a hiding point slot is safe against someone else interfering with it because\n        // we have a guarantee that the public functions of the transaction are executed right after the private ones\n        // and for this reason the protocol guarantees that nobody can front-run us in consuming the hiding point.\n        // This guarantee would break if `finalize_transfer_to_private` was not called in the same transaction. This\n        // however is not the flow we are currently concerned with. To support the multi-transaction flow we could\n        // introduce a `from` function argument, hash the x-coordinate with it and then repeat the hashing in\n        // `finalize_transfer_to_private`.\n        //\n        // We can also be sure that the `hiding_point_slot` will not overwrite any other value in the storage because\n        // in our state variables we derive slots using a different hash function from multi scalar multiplication\n        // (MSM).\n        let hiding_point_slot = note_setup_payload.hiding_point.x;\n\n        // We don't need to perform a check that the value overwritten by `_store_point_in_transient_storage_unsafe`\n        // is zero because the slot is the x-coordinate of the hiding point and hence we could only overwrite\n        // the value in the slot with the same value. This makes usage of the `unsafe` method safe.\n        NFT::at(context.this_address())\n            ._store_point_in_transient_storage_unsafe(\n                hiding_point_slot,\n                note_setup_payload.hiding_point,\n            )\n            .enqueue(context);\n\n        hiding_point_slot\n    }\n\n    #[public]\n    #[internal]\n    fn _store_point_in_transient_storage_unsafe(slot: Field, point: Point) {\n        context.storage_write(slot, point);\n    }\n\n    /// Finalizes a transfer of NFT with `token_id` from public balance of `from` to a private balance of `to`.\n    /// The transfer must be prepared by calling `prepare_transfer_to_private` first and the resulting\n    /// `hiding_point_slot` must be passed as an argument to this function.\n    #[public]\n    fn finalize_transfer_to_private(token_id: Field, hiding_point_slot: Field) {\n        let from = context.msg_sender();\n        _finalize_transfer_to_private(from, token_id, hiding_point_slot, &mut context, storage);\n    }\n\n    #[public]\n    #[internal]\n    fn _finalize_transfer_to_private_unsafe(\n        from: AztecAddress,\n        token_id: Field,\n        hiding_point_slot: Field,\n    ) {\n        _finalize_transfer_to_private(from, token_id, hiding_point_slot, &mut context, storage);\n    }\n\n    #[contract_library_method]\n    fn _finalize_transfer_to_private(\n        from: AztecAddress,\n        token_id: Field,\n        hiding_point_slot: Field,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        let public_owners_storage = storage.public_owners.at(token_id);\n        assert(public_owners_storage.read().eq(from), \"invalid NFT owner\");\n\n        // Read the hiding point from \"transient\" storage and check it's not empty to ensure the transfer was prepared\n        let hiding_point: Point = context.storage_read(hiding_point_slot);\n        assert(!is_empty(hiding_point), \"transfer not prepared\");\n\n        // Set the public NFT owner to zero\n        public_owners_storage.write(AztecAddress::zero());\n\n        // Finalize the partial note with the `token_id`\n        let finalization_payload = NFTNote::finalization_payload().new(hiding_point, token_id);\n\n        // We insert the finalization note hash\n        context.push_note_hash(finalization_payload.note_hash);\n\n        // We emit the `token_id` as unencrypted event such that the `NoteProcessor` can use it to reconstruct the note\n        context.emit_unencrypted_log(finalization_payload.log);\n\n        // At last we reset public storage to zero to achieve the effect of transient storage - kernels will squash\n        // the writes\n        context.storage_write(hiding_point_slot, Point::empty());\n    }\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    #[private]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier);\n    }\n\n    #[private]\n    fn transfer_in_private(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let nfts = storage.private_nfts;\n\n        let notes = nfts.at(from).pop_notes(NoteGetterOptions::new()\n            .select(NFTNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(notes.len() == 1, \"NFT not found when transferring\");\n\n        let from_ovpk_m = get_public_keys(from).ovpk_m;\n        let to_keys = get_public_keys(to);\n\n        let mut new_note = NFTNote::new(token_id, to_keys.npk_m.hash());\n        nfts.at(to).insert(&mut new_note).emit(encode_and_encrypt_note(\n            &mut context,\n            from_ovpk_m,\n            to_keys.ivpk_m,\n            to,\n        ));\n    }\n\n    #[private]\n    fn transfer_to_public(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let notes = storage.private_nfts.at(from).pop_notes(NoteGetterOptions::new()\n            .select(NFTNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(notes.len() == 1, \"NFT not found when transferring to public\");\n\n        NFT::at(context.this_address())._finish_transfer_to_public(to, token_id).enqueue(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _finish_transfer_to_public(to: AztecAddress, token_id: Field) {\n        storage.public_owners.at(token_id).write(to);\n    }\n\n    // Returns zero address when the token does not have a public owner. Reverts if the token does not exist.\n    #[public]\n    #[view]\n    fn owner_of(token_id: Field) -> AztecAddress {\n        assert(storage.nft_exists.at(token_id).read(), \"token does not exist\");\n        storage.public_owners.at(token_id).read()\n    }\n\n    /// Returns an array of token IDs owned by `owner` in private and a flag indicating whether a page limit was\n    /// reached. Starts getting the notes from page with index `page_index`. Zero values in the array are placeholder\n    /// values for non-existing notes.\n    unconstrained fn get_private_nfts(\n        owner: AztecAddress,\n        page_index: u32,\n    ) -> pub ([Field; MAX_NOTES_PER_PAGE], bool) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.private_nfts.at(owner).view_notes(options.set_offset(offset));\n\n        let mut owned_nft_ids = [0; MAX_NOTES_PER_PAGE];\n        for i in 0..options.limit {\n            if i < notes.len() {\n                owned_nft_ids[i] = notes.get_unchecked(i).token_id;\n            }\n        }\n\n        let page_limit_reached = notes.len() == options.limit;\n        (owned_nft_ids, page_limit_reached)\n    }\n}","path":"/home/lima.linux/aztec/alpha-build2/phantom-gate/contracts/nft-contracts/src/main.nr"},"76":{"source":"use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__AUTHWIT_INNER, GENERATOR_INDEX__AUTHWIT_OUTER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, CANONICAL_AUTH_REGISTRY_ADDRESS,\n    }, hash::poseidon2_hash_with_separator,\n};\nuse dep::aztec::{context::{PrivateContext, PublicContext, gas::GasOpts}, hash::hash_args_array};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\nglobal IS_VALID_SELECTOR = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that have authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .unpack_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allow same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` have authorized the current call in the authentication registry\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` have authorized a speicifc `inner_hash` in the authentication registry\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that have authorized the `inner_hash`\n */\npub fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let result: Field = context\n        .call_public_function(\n            CANONICAL_AUTH_REGISTRY_ADDRESS,\n            comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n            [on_behalf_of.to_field(), inner_hash].as_slice(),\n            GasOpts::default(),\n        )\n        .deserialize_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computs the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that have authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub fn set_authorized(context: &mut PublicContext, message_hash: Field, authorize: bool) {\n    context\n        .call_public_function(\n            CANONICAL_AUTH_REGISTRY_ADDRESS,\n            comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n            [message_hash, authorize as Field].as_slice(),\n            GasOpts::default(),\n        )\n        .assert_empty();\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    context\n        .call_public_function(\n            CANONICAL_AUTH_REGISTRY_ADDRESS,\n            comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n            [context.this_address().to_field(), reject as Field].as_slice(),\n            GasOpts::default(),\n        )\n        .assert_empty();\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/authwit/src/auth.nr"},"97":{"source":"use std::option::Option;\nuse crate::note::note_getter_options::{PropertySelector, Select, Sort, NoteStatus};\nuse dep::protocol_types::traits::ToField;\nuse crate::note::note_interface::NoteInterface;\nuse crate::note::constants::MAX_NOTES_PER_PAGE;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N>\n    where\n        Note: NoteInterface<N>,\n    {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE,\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T,\n    ) -> Self\n    where\n        T: ToField,\n    {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        if !dep::std::runtime::is_unconstrained() {\n            assert_constant(limit);\n        }\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr"},"99":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(context: &mut PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"100":{"source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note,\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr"},"101":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}},\n};\n\nuse dep::protocol_types::{\n    hash::{\n        compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n        compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n    }, utils::arr_copy_slice,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash =\n                compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"103":{"source":"use dep::protocol_types::constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(context: PrivateContext, storage_slot: Field, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (Note, Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note = unsafe { get_note_internal(storage_slot) };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> =\n        BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note\nwhere\n    Note: NoteInterface<N>,\n{\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length,\n    )[0]\n        .expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteInterface<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteInterface<N>,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr"},"117":{"source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: Header,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n                == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path)\n                ,\n                \"Proving public value inclusion failed\",\n            );\n\n            // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n            // we have two scenarios:\n            // 1. The tree entry is initialized, and the value is the same as the one in the witness\n            // 2. The entry was never initialized, and the value is default zero (the default)\n            // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n            let preimage = witness.leaf_preimage;\n\n            let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n            let is_next_greater_than =\n                full_field_less_than(public_data_tree_index, preimage.next_slot);\n            let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n            let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n            let value = if is_in_range {\n                0\n            } else {\n                assert_eq(\n                    preimage.slot,\n                    public_data_tree_index,\n                    \"Public data tree index doesn't match witness\",\n                );\n                preimage.value\n            };\n\n            value\n        }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr"},"119":{"source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice,\n};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator =\n        arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158,\n        236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159,\n    ];\n    assert_eq(key, key_from_typescript);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr"},"123":{"source":"use dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\nuse crate::{\n    oracle::{\n        keys::get_public_keys_and_partial_address,\n        key_validation_request::get_key_validation_request,\n    }, keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) =\n        unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    hinted_canonical_public_keys\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"124":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n    }, point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice},\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(\n    contract_address: AztecAddress,\n    log: [u8; N],\n) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER,\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd,\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = AztecAddress::from_field(\n        0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303,\n    );\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"133":{"source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"141":{"source":"use dep::protocol_types::{\n    constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest,\n};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission,\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr"},"142":{"source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Deserialize<T_SERIALIZED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"143":{"source":"use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage,\n};\nuse dep::protocol_types::{\n    constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize},\n};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    pub unconstrained fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] = header.public_storage_historical_read(\n                self.storage_slot + i as Field,\n                (*self.context).this_address(),\n            );\n        }\n        T::deserialize(fields)\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr"},"146":{"source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, abis::function_selector::FunctionSelector,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm,\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/initializer.nr"},"148":{"source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader,\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\npub unconstrained fn get_contract_instance_internal_avm(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"150":{"source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_returns_oracle_wrapper(returns) };\n}\n\npub unconstrained fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\npub unconstrained fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr"},"152":{"source":"use dep::protocol_types::abis::validation_requests::{\n    KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"154":{"source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr"},"155":{"source":"use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(\n            contract_address,\n            randomness,\n            encrypted_event,\n            counter,\n        )\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32,\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32,\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32,\n) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\npub unconstrained fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32,\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32,\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32,\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) -> Field {}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"156":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"157":{"source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice,\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage {\n            slot: fields[1],\n            value: fields[2],\n            next_index: fields[3] as u32,\n            next_slot: fields[4],\n        },\n        path: arr_copy_slice(\n            fields,\n            [0; PUBLIC_DATA_TREE_HEIGHT],\n            1 + LEAF_PREIMAGE_LENGTH,\n        ),\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"159":{"source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            serialized_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        serialized_note,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"161":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress}, public_keys::{PublicKeys, NpkM, IvpkM, OvpkM, TpkM},\n    point::Point,\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"162":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"164":{"source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_oracle_wrapper(args) };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_array_oracle_wrapper(args) };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr"},"166":{"source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"169":{"source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::getters::get_ovsk_app, encrypted_logs::payload::compute_encrypted_log,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, public_keys::{PublicKeys, OvpkM, IvpkM}, hash::sha256_to_field,\n    abis::note_hash::NoteHash,\n};\n\nfn compute_raw_note_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> (u32, [u8; 416 + N * 32], Field)\nwhere\n    Note: NoteInterface<N>,\n{\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n    let encrypted_log: [u8; 416 + N * 32] =\n        compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> (u32, [u8; 416 + N * 32], Field)\nwhere\n    Note: NoteInterface<N>,\n{\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let ovsk_app: Field = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) =\n            compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) =\n            unsafe { compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient) };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\n/// Encrypts a partial log and emits it. Takes recipient keys on the input and encrypts both the outgoing and incoming\n/// logs for the recipient. This is necessary because in the partial notes flow the outgoing always has to be the same\n/// as the incoming to not leak any information (typically the `from` party finalizing the partial note in public does\n/// not know who the recipient is).\npub fn encrypt_and_emit_partial_log<let M: u32>(\n    context: &mut PrivateContext,\n    log_plaintext: [u8; M],\n    recipient_keys: PublicKeys,\n    recipient: AztecAddress,\n) {\n    let ovsk_app: Field = context.request_ovsk_app(recipient_keys.ovpk_m.hash());\n\n    let encrypted_log: [u8; 352 + M] = compute_encrypted_log(\n        context.this_address(),\n        ovsk_app,\n        recipient_keys.ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n        log_plaintext,\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    // Unfortunately we need to push a dummy note hash to the context here because a note log requires having\n    // a counter that corresponds to a note hash in the same call.\n    let note_hash_counter = context.side_effect_counter;\n    context.push_note_hash(5);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr"},"170":{"source":"use dep::protocol_types::{\n    address::AztecAddress, public_keys::{PublicKeys, IvpkM, ToPoint}, scalar::Scalar, point::Point,\n};\n\nuse crate::keys::point_to_symmetric_key::point_to_symmetric_key;\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48]\n    where\n        T: ToPoint,\n    {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false,\n        },\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131,\n        160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171,\n        176, 218, 48, 209, 73, 89, 200, 209,\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr"},"171":{"source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, public_keys::{OvpkM, IvpkM},\n    constants::GENERATOR_INDEX__SYMMETRIC_KEY, hash::poseidon2_hash_with_separator,\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose,\n};\n\nuse crate::{\n    oracle::random::random, utils::point::point_to_bytes,\n    encrypted_logs::header::EncryptedLogHeader,\n    keys::point_to_symmetric_key::point_to_symmetric_key,\n};\n\npub fn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P],\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] =\n        compute_outgoing_body_ciphertext(recipient, ivpk, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(\n    plaintext: [u8; P],\n    eph_sk: Scalar,\n    ivpk: IvpkM,\n) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point,\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_ivpk = point_to_bytes(recipient_ivpk.to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_ivpk[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field,\n    )\n        .to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::encrypted_logs::payload::{\n        compute_encrypted_log, compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext,\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use dep::protocol_types::{\n        address::AztecAddress, public_keys::{OvpkM, IvpkM}, point::Point, scalar::Scalar,\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        );\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false,\n            },\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false,\n            },\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41,\n            2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239,\n            247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118,\n            183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183,\n            12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78,\n            101, 153, 0, 0, 16, 39,\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(\n            0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2,\n        );\n\n        let log: [u8; 448] = compute_encrypted_log(\n            contract_address,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            plaintext,\n        );\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235,\n            86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79,\n            51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171,\n            62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203,\n            98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211,\n            49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205,\n            104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248,\n            193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110,\n            249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173,\n            151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4,\n            235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194,\n            90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219,\n            22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18,\n            204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167,\n            110, 217, 10, 128, 73, 129, 172, 61, 43, 12, 98, 165, 203, 191, 154, 161, 150, 4, 239,\n            95, 48, 60, 159, 33, 222, 142, 102, 73, 193, 236, 145, 197, 160, 216, 254, 113, 243, 25,\n            244, 251, 192, 222, 35, 7, 114, 101, 35, 152, 151, 112, 24, 32, 94, 138, 71, 160, 91,\n            68, 131, 217, 117, 140, 19, 147, 37, 197, 192, 21, 43, 172, 239, 239, 205, 15, 110, 76,\n            26, 211, 42, 117, 4, 15, 135, 145, 247, 37, 73, 84, 164, 149, 250, 35, 0, 205, 105, 178,\n            143, 104, 98, 100, 250, 193, 154, 136, 175, 177, 109, 225, 207, 252, 147, 250, 250, 189,\n            117, 147, 101, 230, 132,\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false,\n            },\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160,\n            190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157,\n            131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93,\n            46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130,\n            37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95,\n            115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234,\n            245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162,\n            25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185,\n            212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236,\n            23, 206, 229, 108,\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb,\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31,\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b,\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let ciphertext = compute_outgoing_body_ciphertext(\n            recipient,\n            recipient_ivpk,\n            sender_ovsk_app,\n            eph_sk,\n            eph_pk,\n        );\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238,\n            50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248,\n            43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31,\n            211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151,\n            152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58,\n            120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25,\n            173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224,\n            30, 168, 177, 26, 144, 5, 124, 128, 6,\n        ];\n\n        assert_eq(outgoing_body_ciphertext_from_typescript, ciphertext);\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr"},"175":{"source":"struct ComparatorEnum {\n    EQ: u8,\n    NEQ: u8,\n    LT: u8,\n    LTE: u8,\n    GT: u8,\n    GTE: u8,\n}\n\nglobal Comparator = ComparatorEnum { EQ: 1, NEQ: 2, LT: 3, LTE: 4, GT: 5, GTE: 6 };\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::compare;\n    use super::Comparator;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            !compare(lhs, Comparator.LTE, rhs),\n            \"Expected lhs to not be less than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/utils/comparison.nr"},"176":{"source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"179":{"source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr"},"185":{"source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR,\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR,\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Deserialize<N>,\n    {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Serialize<N>,\n    {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N],\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"186":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n        key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n        call_private_function::call_private_function_internal, header::get_header_at,\n        logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext, function_selector::FunctionSelector,\n        max_block_number::MaxBlockNumber,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n        nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash},\n    }, address::{AztecAddress, EthAddress},\n    constants::{\n        MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL,\n        MAX_UNENCRYPTED_LOGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR,\n    }, header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests: BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: self.next_counter(),\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator {\n                request,\n                sk_app_generator: sk_generators[key_index],\n            };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(\n        &mut self,\n        note_hash_counter: u32,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context,\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        let call_request = PublicCallRequest { call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.public_teardown_call_request = PublicCallRequest { call_context, args_hash, counter };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"189":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{\n    execution::{get_chain_id, get_version, get_contract_address, get_block_number},\n    storage::storage_read,\n};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Deserialize<N>,\n    {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr"},"192":{"source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n    packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe { unpack_returns(self.packed_returns) };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr"},"193":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs,\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {}\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {}\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {}\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {}\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {}\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {}\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {}\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr"},"200":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, public_keys_hash::PublicKeysHash,\n        salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils,\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [pub_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        ))\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        functino_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys_hash: PublicKeysHash,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            functino_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys_hash, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"204":{"source":"use crate::{\n    address::{\n        aztec_address::AztecAddress, partial_address::PartialAddress,\n        public_keys_hash::PublicKeysHash,\n    }, public_keys::PublicKeys, contract_class_id::ContractClassId,\n    constants::CONTRACT_INSTANCE_LENGTH, traits::{Deserialize, Hash, Serialize},\n};\n\npub struct ContractInstance {\n    salt: Field,\n    deployer: AztecAddress,\n    contract_class_id: ContractClassId,\n    initialization_hash: Field,\n    public_keys: PublicKeys,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys.eq(other.public_keys)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        let public_keys_serialized = self.public_keys.serialize();\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            public_keys_serialized[0],\n            public_keys_serialized[1],\n            public_keys_serialized[2],\n            public_keys_serialized[3],\n            public_keys_serialized[4],\n            public_keys_serialized[5],\n            public_keys_serialized[6],\n            public_keys_serialized[7],\n            public_keys_serialized[8],\n            public_keys_serialized[9],\n            public_keys_serialized[10],\n            public_keys_serialized[11],\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys: PublicKeys::deserialize([\n                serialized[4],\n                serialized[5],\n                serialized[6],\n                serialized[7],\n                serialized[8],\n                serialized[9],\n                serialized[10],\n                serialized[11],\n                serialized[12],\n                serialized[13],\n                serialized[14],\n                serialized[15],\n            ]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys.hash(),\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"210":{"source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot: Field,\n    value: Field,\n    next_slot: Field,\n    next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr"},"211":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash}, note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n    }, address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n        MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX,\n    }, merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [tx_hash, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), unique_note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256(\n            [log_hash.contract_address.to_field(), log_hash.log_hash.value],\n        )\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n            0,\n        ))\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk<let N: u32>(\n    _vk: VerificationKey<N>,\n) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"213":{"source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr"},"249":{"source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr"},"280":{"source":"use crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"295":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"297":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"298":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"310":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        GENERATOR_INDEX__PUBLIC_KEYS_HASH, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_IVPK_M_X,\n        DEFAULT_IVPK_M_Y, DEFAULT_OVPK_M_X, DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y,\n    }, hash::poseidon2_hash_with_separator, point::POINT_LENGTH,\n    traits::{Deserialize, Serialize, Hash},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse dep::std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"311":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"312":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate {\n        lhs\n    } else {\n        rhs\n    }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: u32,\n) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr"},"333":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"335":{"source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"341":{"source":"use dep::aztec::protocol_types::{utils::field::field_from_bytes, traits::{Serialize, Deserialize}};\n\n// A Fixedsize Compressed String.\n// Essentially a special version of Compressed String for practical use.\npub struct FieldCompressedString {\n    value: Field,\n}\n\nimpl Serialize<1> for FieldCompressedString {\n    fn serialize(self) -> [Field; 1] {\n        [self.value]\n    }\n}\n\nimpl Deserialize<1> for FieldCompressedString {\n    fn deserialize(input: [Field; 1]) -> Self {\n        Self { value: input[0] }\n    }\n}\n\nimpl FieldCompressedString {\n    pub fn is_eq(self, other: FieldCompressedString) -> bool {\n        self.value == other.value\n    }\n\n    pub fn from_field(input_field: Field) -> Self {\n        Self { value: input_field }\n    }\n\n    pub fn from_string(input_string: str<31>) -> Self {\n        Self { value: field_from_bytes(input_string.as_bytes(), true) }\n    }\n\n    pub fn to_bytes(self) -> [u8; 31] {\n        self.value.to_be_bytes()\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/compressed-string/src/field_compressed_string.nr"},"345":{"source":"use dep::aztec::{\n    protocol_types::{\n        traits::Serialize, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator,\n    }, macros::notes::note,\n    note::{\n        note_header::NoteHeader, note_interface::NullifiableNote,\n        utils::compute_note_hash_for_nullify,\n    }, oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext,\n};\n\nglobal VALUE_NOTE_LEN: u32 = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n// ValueNote is used as fn parameter in the Claim contract, so it has to implement the Serialize trait.\n// It is important that the order of these annotations is preserved so that derive(Serialize) runs AFTER the note macro, which injects the note header.\n#[note]\n#[derive(Serialize)]\npub struct ValueNote {\n    value: Field,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NullifiableNote for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        let header = NoteHeader::empty();\n        ValueNote { value, npk_m_hash, randomness, header }\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/value-note/src/value_note.nr"}}}