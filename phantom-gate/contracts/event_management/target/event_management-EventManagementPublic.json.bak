{"noir_version":"0.36.0+1094f036be7b102252a3a5c0d4b8c621779cf4bd-aarch64","name":"EventManagementPublic","functions":[{"name":"create_event","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"name","type":{"kind":"field"},"visibility":"private"},{"name":"max_capacity","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"ticket_price","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"event_time","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"","debug_symbols":"","brillig_names":["create_event"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"parameters":[{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"","brillig_names":["constructor"]},{"name":"check_in","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"event_id","type":{"kind":"field"},"visibility":"private"},{"name":"ticket_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"","brillig_names":["check_in"]},{"name":"get_event_details","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[{"name":"event_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"EventManagementPublic::EventDetails","fields":[{"name":"name","type":{"kind":"field"}},{"name":"max_capacity","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"ticket_price","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"event_time","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"organizer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"tickets_sold","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"is_active","type":{"kind":"boolean"}}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"","brillig_names":["get_event_details"]},{"name":"is_organizer","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[{"name":"address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["is_organizer"]},{"name":"buy_ticket","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"event_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"","debug_symbols":"","brillig_names":["buy_ticket"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"14336010898202591232":{"error_kind":"fmtstring","length":16,"item_types":[]}}},"bytecode":"H4sIAAAAAAAA/9VYzXLaMBAWYDB2AiEmKemNXtuLnRCgN8/0J733CRp+Lj2knckDuDNtn7uoaO2PZctQWB3YGY9krfztt7uS11bNrKW9umqu33Rty2wLzcldmx4nmSJW6pNn7UR41k+EZ+NEeAaKPGsCT9sGrm/3nd1zoVnvxy0lPmwT3QC92QFUY0at/IR+17Wfn7/Mvg6fn56G88XiWzn9t2sj19YBTjGPWWS2Y6OFP01Hs8hsijL/u8hhhn7w7wm/7Qc/Jd7vigoffSG7Ddc+FFUsH+AZKx3XxyVHuKSrg+490zVA94HpcMl/ZDrcJsSJ4tYCXxTX1dR3Xsi3EHyr/aM1poodjlGsY+N1jWaU84jx4fyJT4fmFBWfFtMFoIuYrgk6ir9thzCP5z6EeW9gnK/Jhtlew6SnnGOsfaypwAP+SkZS3HlOgmLTNuow7gHEc+j6/dX1yc0JIGZWwsKLT2V9bTv8JvAmm8i9zubzfpONvTYV77/+wFyy04Axsnnh7lugo2d3YQUCVk+Y32JYoYCFY+S33ROvXP/MrPP3g/DN9ntC7xt4/FZ6Z+rhT8paHPnhvyD82Av+qMQ/A3zNvUL4537iMyb8jh/88luo6wX/tozPBeAbvfhnVJdoP6MNsn3pJfdZts83A9qPGVdf3wyXjA+PD9Ynq0sErj1Bx/doIthJBDuUhz57Plfxe7yUuPYP5CphdRWxIkWsQ32kfFyx53N3nx4lk5HE9UrR744iVlsR69B1Qvm4Zs/n7j49SsZiPq4V/dbMx7kiVqiIpblvNeNFeZRqnZXctemRwrni/xTapDrfZPO/u5ZqzgtTCa/XAxhXrNe3+9brAeOKfIh3LOiOOeOcjZd3j/PlaP44WUwh3gPGlY/hGaK9boT5Uu2nWL80XmKdSv/FNxBXKwHoBkzXBB1xxP/iiGFq898n/mi/J+jwn+N/cpmYzbWWMJ/x/CdX8bc6G2sDNt+XkZdYp/f77kuyHzOuynx2nr1hfPh3dCxw7Qk6XpdiwU4s2DlFLH5+jTG0+4PiFBSVXiuXk2l1lkXvITzLQglAj/N/ufvEyGJ9+ANQAijv/B0AAA==","debug_symbols":"tdnBaoNAEIDhd9mzB1fdnRlfpZSgiYYF0aCmUMR3r2lDCeT8X8TR2f/2nXZzl669X09p7KfF1R+bG6Zzs6ZpPKZtz1w7p2FI19PrZ5c/HlX1u7/cmvExLmszr64uq8x14+V4seN0n4bO1ZLv2duiFM9Fkf/FYPtn5qpAhSMVFiqsVNigcMipsKfCBRUuqTAlL1DyAiUvUPICJS9Q8iIlL1LyIiUvUvIiJS9S8iIlL1LyIiUvUvKEkieUPKHkCSVPKHlCyRNKnlDyhJInlDyl5CklTyl5SslTSp5S8pSSp5Q8peQpJc8oeUbJM0qeUfKMkmeUPKPkGSXPKHlGyfN5jpU9Vi6wcomVK6wcsHLEyoKVFStjBj1m0GMGPWNwP6avZk5NO3TPS4P+Pp5f7hDW79vfn2P5Bw==","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"14336010898202591232":{"error_kind":"fmtstring","length":16,"item_types":[]}}},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"]},{"name":"verify_ticket","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[{"name":"ticket_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"EventManagementPublic::TicketVerification","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_used","type":{"kind":"boolean"}}]},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["verify_ticket"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"EventManagementPublic::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EventManagementPublic::constructor_parameters","fields":[{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"EventManagementPublic::create_event_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EventManagementPublic::create_event_parameters","fields":[{"name":"name","type":{"kind":"field"}},{"name":"max_capacity","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"ticket_price","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"event_time","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]},{"kind":"struct","path":"EventManagementPublic::is_organizer_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EventManagementPublic::is_organizer_parameters","fields":[{"name":"address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"boolean"}}]},{"kind":"struct","path":"EventManagementPublic::verify_ticket_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EventManagementPublic::verify_ticket_parameters","fields":[{"name":"ticket_id","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"struct","path":"EventManagementPublic::TicketVerification","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_used","type":{"kind":"boolean"}}]}}]},{"kind":"struct","path":"EventManagementPublic::check_in_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EventManagementPublic::check_in_parameters","fields":[{"name":"event_id","type":{"kind":"field"}},{"name":"ticket_id","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"EventManagementPublic::get_event_details_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EventManagementPublic::get_event_details_parameters","fields":[{"name":"event_id","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"struct","path":"EventManagementPublic::EventDetails","fields":[{"name":"name","type":{"kind":"field"}},{"name":"max_capacity","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"ticket_price","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"event_time","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"organizer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"tickets_sold","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"is_active","type":{"kind":"boolean"}}]}}]},{"kind":"struct","path":"EventManagementPublic::buy_ticket_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EventManagementPublic::buy_ticket_parameters","fields":[{"name":"event_id","type":{"kind":"field"}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"EventManagementPublic"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"organizers","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"event_names","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"event_capacities","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"event_prices","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"event_times","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"event_organizers","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}]}},{"name":"tickets_sold","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}},{"name":"event_exists","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}]}},{"name":"event_active","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000a"}}]}},{"name":"ticket_owners","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000b"}}]}},{"name":"ticket_used","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000c"}}]}},{"name":"event_counter","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000d"}}]}},{"name":"ticket_counter","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000e"}}]}}]}}]}]}},"file_map":{"34":{"source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"58":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"59":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"70":{"source":"use dep::aztec::macros::aztec;\n\n#[aztec]\ncontract EventManagementPublic {\n    // use dep::compressed_string::Field;\n    use dep::aztec::{\n        prelude::{\n            Map, PublicMutable, SharedImmutable,\n            AztecAddress, PublicContext,\n        },\n        protocol_types::traits::Serialize,\n        utils::comparison::Comparator,\n        macros::{\n            storage::storage,\n            functions::{public, view, initializer},\n        },\n    };\n\n    // Structs for return types\n    #[derive(Serialize)]\n    struct EventDetails {\n        name: Field,\n        max_capacity: u64,\n        ticket_price: u64,\n        event_time: u64,\n        organizer: AztecAddress,\n        tickets_sold: u64,\n        is_active: bool,\n    }\n\n    #[derive(Serialize)]\n    struct TicketVerification {\n        owner: AztecAddress,\n        is_used: bool,\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        admin: PublicMutable<AztecAddress, Context>,\n        organizers: Map<AztecAddress, PublicMutable<bool, Context>, Context>,\n        event_names: Map<Field, PublicMutable<Field, Context>, Context>,\n        event_capacities: Map<Field, PublicMutable<u64, Context>, Context>,\n        event_prices: Map<Field, PublicMutable<u64, Context>, Context>,\n        event_times: Map<Field, PublicMutable<u64, Context>, Context>,\n        event_organizers: Map<Field, PublicMutable<AztecAddress, Context>, Context>,\n        tickets_sold: Map<Field, PublicMutable<u64, Context>, Context>,\n        event_exists: Map<Field, PublicMutable<bool, Context>, Context>,\n        event_active: Map<Field, PublicMutable<bool, Context>, Context>,\n        ticket_owners: Map<Field, PublicMutable<AztecAddress, Context>, Context>,\n        ticket_used: Map<Field, PublicMutable<bool, Context>, Context>,\n        event_counter: PublicMutable<Field, Context>,\n        ticket_counter: PublicMutable<Field, Context>\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(admin: AztecAddress) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.organizers.at(admin).write(true);\n        storage.event_counter.write(1);\n        storage.ticket_counter.write(1);\n    }\n\n    #[public]\n    fn create_event(\n        name: Field,\n        max_capacity: u64,\n        ticket_price: u64,\n        event_time: u64\n    ) {\n        let organizer = context.msg_sender();\n        assert(storage.organizers.at(organizer).read(), \"caller is not organizer\");\n        \n        let event_id = storage.event_counter.read();\n        storage.event_counter.write(event_id + 1);\n\n        storage.event_exists.at(event_id).write(true);\n        storage.event_active.at(event_id).write(true);\n        storage.event_names.at(event_id).write(name);\n        storage.event_capacities.at(event_id).write(max_capacity);\n        storage.event_prices.at(event_id).write(ticket_price);\n        storage.event_times.at(event_id).write(event_time);\n        storage.event_organizers.at(event_id).write(organizer);\n        storage.tickets_sold.at(event_id).write(0);\n    }\n\n    #[public]\n    fn buy_ticket(event_id: Field) {\n        assert(storage.event_exists.at(event_id).read(), \"event does not exist\");\n        assert(storage.event_active.at(event_id).read(), \"event is not active\");\n        \n        let buyer = context.msg_sender();\n        let tickets_sold = storage.tickets_sold.at(event_id).read();\n        let max_capacity = storage.event_capacities.at(event_id).read();\n        \n        assert(tickets_sold < max_capacity, \"event is sold out\");\n        \n        let ticket_id = storage.ticket_counter.read();\n        storage.ticket_counter.write(ticket_id + 1);\n\n        storage.ticket_owners.at(ticket_id).write(buyer);\n        storage.ticket_used.at(ticket_id).write(false);\n        storage.tickets_sold.at(event_id).write(tickets_sold + 1);\n    }\n\n    #[public]\n    fn check_in(event_id: Field, ticket_id: Field) {\n        assert(storage.event_exists.at(event_id).read(), \"event does not exist\");\n        assert(storage.event_active.at(event_id).read(), \"event is not active\");\n        \n        let attendee = storage.ticket_owners.at(ticket_id).read();\n        assert(!attendee.is_zero(), \"ticket does not exist\");\n        assert(!storage.ticket_used.at(ticket_id).read(), \"ticket already used\");\n        \n        storage.ticket_used.at(ticket_id).write(true);\n    }\n\n    #[public]\n    #[view]\n    fn get_event_details(event_id: Field) -> EventDetails {\n        EventDetails {\n            name: storage.event_names.at(event_id).read(),\n            max_capacity: storage.event_capacities.at(event_id).read(),\n            ticket_price: storage.event_prices.at(event_id).read(),\n            event_time: storage.event_times.at(event_id).read(),\n            organizer: storage.event_organizers.at(event_id).read(),\n            tickets_sold: storage.tickets_sold.at(event_id).read(),\n            is_active: storage.event_active.at(event_id).read()\n        }\n    }\n\n    #[public]\n    #[view]\n    fn verify_ticket(ticket_id: Field) -> TicketVerification {\n        TicketVerification {\n            owner: storage.ticket_owners.at(ticket_id).read(),\n            is_used: storage.ticket_used.at(ticket_id).read()\n        }\n    }\n\n    #[public]\n    #[view]\n    fn is_organizer(address: AztecAddress) -> bool {\n        storage.organizers.at(address).read()\n    }\n}","path":"/home/lima.linux/aztec/alpha-build2/phantom-gate/contracts/event_management/src/main.nr"},"113":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n    }, point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice},\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(\n    contract_address: AztecAddress,\n    log: [u8; N],\n) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER,\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd,\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = AztecAddress::from_field(\n        0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303,\n    );\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"122":{"source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"131":{"source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Deserialize<T_SERIALIZED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"135":{"source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, abis::function_selector::FunctionSelector,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm,\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/initializer.nr"},"137":{"source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader,\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\npub unconstrained fn get_contract_instance_internal_avm(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"174":{"source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR,\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR,\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Deserialize<N>,\n    {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Serialize<N>,\n    {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N],\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"189":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, public_keys_hash::PublicKeysHash,\n        salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils,\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [pub_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        ))\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        functino_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys_hash: PublicKeysHash,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            functino_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys_hash, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"193":{"source":"use crate::{\n    address::{\n        aztec_address::AztecAddress, partial_address::PartialAddress,\n        public_keys_hash::PublicKeysHash,\n    }, public_keys::PublicKeys, contract_class_id::ContractClassId,\n    constants::CONTRACT_INSTANCE_LENGTH, traits::{Deserialize, Hash, Serialize},\n};\n\npub struct ContractInstance {\n    salt: Field,\n    deployer: AztecAddress,\n    contract_class_id: ContractClassId,\n    initialization_hash: Field,\n    public_keys: PublicKeys,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys.eq(other.public_keys)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        let public_keys_serialized = self.public_keys.serialize();\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            public_keys_serialized[0],\n            public_keys_serialized[1],\n            public_keys_serialized[2],\n            public_keys_serialized[3],\n            public_keys_serialized[4],\n            public_keys_serialized[5],\n            public_keys_serialized[6],\n            public_keys_serialized[7],\n            public_keys_serialized[8],\n            public_keys_serialized[9],\n            public_keys_serialized[10],\n            public_keys_serialized[11],\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys: PublicKeys::deserialize([\n                serialized[4],\n                serialized[5],\n                serialized[6],\n                serialized[7],\n                serialized[8],\n                serialized[9],\n                serialized[10],\n                serialized[11],\n                serialized[12],\n                serialized[13],\n                serialized[14],\n                serialized[15],\n            ]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys.hash(),\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"200":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash}, note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n    }, address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n        MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX,\n    }, merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [tx_hash, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), unique_note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256(\n            [log_hash.contract_address.to_field(), log_hash.log_hash.value],\n        )\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n            0,\n        ))\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk<let N: u32>(\n    _vk: VerificationKey<N>,\n) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"269":{"source":"use crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"284":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"286":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"299":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        GENERATOR_INDEX__PUBLIC_KEYS_HASH, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_IVPK_M_X,\n        DEFAULT_IVPK_M_Y, DEFAULT_OVPK_M_X, DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y,\n    }, hash::poseidon2_hash_with_separator, point::POINT_LENGTH,\n    traits::{Deserialize, Serialize, Hash},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse dep::std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"300":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.60.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"}}}