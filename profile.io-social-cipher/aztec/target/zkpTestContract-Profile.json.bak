{"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-x8664","name":"Profile","functions":[{"name":"mint","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"outgoing_viewer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"update_is_adult","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":6,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"12265343917440897559":{"error_kind":"fmtstring","length":20,"item_types":[]}}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"mintNFT","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"is_adult","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","random","lt_32_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"get_profile_nfts","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"page_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":10,"type":{"kind":"tuple","fields":[{"kind":"field"},{"kind":"boolean"}]}},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"","brillig_names":["get_profile_nfts"]},{"name":"constructor","is_unconstrained":false,"custom_attributes":["private","initializer"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"initial_supply","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"outgoing_viewer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"","brillig_names":["get_contract_instance_internal","get_public_keys_and_partial_address","random","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"Profile::mint_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Profile::mint_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"outgoing_viewer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Profile::update_is_adult_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Profile::update_is_adult_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Profile::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Profile::constructor_parameters","fields":[{"name":"initial_supply","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"outgoing_viewer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Profile::mintNFT_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Profile::mintNFT_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"token_id","type":{"kind":"field"}},{"name":"is_adult","type":{"kind":"boolean"}}]}}]}]},"globals":{"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000fcb2be2b"},{"kind":"string","value":"ProfileNFT"},{"kind":"struct","fields":[{"name":"is_adult","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"npk_m_hash","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"token_id","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"},{"kind":"struct","fields":[{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"npk_m_hash","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]}],"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"Profile"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"is_adult","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"profile_nfts","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}}]}}]}]}},"file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n","path":"std/array/mod.nr"},"7":{"source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"24":{"source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n","path":"std/embedded_curve_ops.nr"},"25":{"source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"26":{"source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n","path":"std/field/mod.nr"},"29":{"source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    pedersen_hash_with_separator_noir(input, separator)\n}\n\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator_noir(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n","path":"std/hash/mod.nr"},"34":{"source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"35":{"source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u32, msg_start: u32) -> ([u8; 64], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if crate::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..BLOCK_SIZE {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..BLOCK_SIZE {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; 64],\n    mut msg_byte_ptr: u32\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; BLOCK_SIZE], msg_byte_ptr: u32, message_size: u32) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d, 0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0, 0x8f, 0xfe, 0x73, 0x2b\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94, 24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154, 60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213, 165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97, 103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186, 55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253, 179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9, 236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214, 72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107, 218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198, 149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126, 32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36, 137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59, 245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97, 3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180, 170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216, 116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70, 86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246, 215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193, 104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74, 134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210, 188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210, 186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69, 79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22, 121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175, 169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53, 101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200, 157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86, 119, 30, 63, 129, 143, 32, 96\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n","path":"std/hash/sha256.nr"},"59":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"70":{"source":"// docs:start:easy_private_token_contract\nuse dep::aztec::macros::aztec;\n\n#[aztec]\ncontract Profile {\n    // use dep::aztec::prelude::{AztecAddress, Map};\n    use dep::aztec::{\n        note::utils::compute_note_hash_for_nullify, keys::getters::get_nsk_app, oracle::random::random,\n        encrypted_logs::encrypted_note_emission::encode_and_encrypt_note,\n        note::constants::MAX_NOTES_PER_PAGE,\n        keys::getters::get_public_keys, prelude::{AztecAddress, PrivateSet, SharedImmutable, Map, NullifiableNote, NoteHeader, PrivateContext, NoteViewerOptions},\n        protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator, traits::{Empty, Eq}},\n        macros::notes::partial_note\n    };\n    use dep::value_note::balance_utils;\n    use dep::easy_private_state::EasyPrivateUint;\n    use dep::aztec::macros::{storage::storage, functions::{initializer, private}};\n    use dep::value_note::value_note::ValueNote;\n    \n    #[partial_note(quote { token_id})]\n    struct ProfileNFT {\n        token_id: Field,\n        is_adult: bool,\n        npk_m_hash: Field,\n    }\n\n    impl ProfileNFT {\n        pub fn new(token_id: Field, is_adult: bool, npk_m_hash: Field) -> Self {\n            ProfileNFT { token_id, is_adult, npk_m_hash, header: NoteHeader::empty() }\n        }\n    }\n\n    impl Eq for ProfileNFT {\n        fn eq(self, other: Self) -> bool {\n            (self.token_id == other.token_id)\n                & (self.npk_m_hash == other.npk_m_hash)\n        }\n    }\n\n    impl NullifiableNote for ProfileNFT {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\n    #[storage]\n    struct Storage<Context> {\n        balances: Map<AztecAddress, EasyPrivateUint<Context>, Context>,\n        // is_adult: Map<AztecAddress, EasyPrivateUint<Context>, Context>,\n        is_adult: PrivateSet<ValueNote, Context>,\n        profile_nfts: Map<AztecAddress, PrivateSet<ProfileNFT, Context>, Context>,\n    }\n\n    /**\n     * initialize the contract's initial state variables.\n     */\n    #[private]\n    #[initializer]\n    fn constructor(initial_supply: u64, owner: AztecAddress, outgoing_viewer: AztecAddress) {\n        let balances = storage.balances;\n\n        balances.at(owner).add(initial_supply, owner, outgoing_viewer);\n    }\n\n    // Mints `amount` of tokens to `owner`.\n    #[private]\n    fn mint(amount: u64, owner: AztecAddress, outgoing_viewer: AztecAddress) {\n        // TODO: private fn create a ZKP automatically? How to check this?\n        let balances = storage.balances;\n        // let is_adult = storage.is_adult;\n\n        balances.at(owner).add(amount, owner, outgoing_viewer);\n        // is_adult.at(owner).add(amount, owner, outgoing_viewer);\n    }\n\n    #[private]\n    fn update_is_adult(amount: u64, owner: AztecAddress, recipient: AztecAddress) {   // should I use recipient's Ivpk for encryption?\n        let is_adult = storage.is_adult;\n        let note_creator = context.msg_sender();\n        let note_creator_keys = get_public_keys(note_creator);\n        \n        // Note creation\n        // TODO: how to put recipient address for decryption?\n        let mut note = ValueNote::new(amount as Field, note_creator_keys.npk_m.hash());\n\n        // Note event emission. Guess this will be used for proving?\n        is_adult.insert(&mut note).emit(encode_and_encrypt_note(\n            &mut context,\n            note_creator_keys.ovpk_m,\n            note_creator_keys.ivpk_m, // Ivpk is used to encrypt a note for a recipient and the corresponding secret key (ivsk) is used by the recipient during decryption.\n            note_creator,\n        ));\n    }\n\n    #[private]\n    fn mintNFT(to: AztecAddress, token_id: Field, is_adult: bool) {\n        let profile_nfts = storage.profile_nfts;\n        let to_keys = get_public_keys(to);\n        let mut nft_note = ProfileNFT::new(token_id, is_adult, to_keys.npk_m.hash());\n        // TODO: sending event to the NFT owner after update storage. Is this meaningful? Can it be a proof?\n        profile_nfts.at(to).insert(&mut nft_note).emit(encode_and_encrypt_note( \n            &mut context, \n            to_keys.ovpk_m,\n            to_keys.ivpk_m,\n            to\n        ));\n    }\n\n    unconstrained fn get_profile_nfts(owner: AztecAddress, page_index: u32) -> [(Field, bool); 10] {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let profile_nfts = storage.profile_nfts;\n        let notes = profile_nfts.at(owner).view_notes(options.set_offset(offset));\n        let mut owned_nft_ids = [(0, false); MAX_NOTES_PER_PAGE];\n        // let mut owned_nft_ids = [false; MAX_NOTES_PER_PAGE];\n\n        for i in 0..options.limit {\n            if i < notes.len() {\n                // owned_nft_ids[i] = [notes.get_unchecked(i).token_id, notes.get_unchecked(i).is_adult];\n                owned_nft_ids[i] = (notes.get_unchecked(i).token_id, notes.get_unchecked(i).is_adult);\n            }\n        }\n\n        (owned_nft_ids)\n    }\n}","path":"/Users/kim/dev/aztec-private-counter/contracts/ProfileContract/src/main.nr"},"76":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"77":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\nunconstrained pub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"79":{"source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N> + NullifiableNote {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr"},"82":{"source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr"},"83":{"source":"use std::option::Option;\nuse crate::note::note_getter_options::{PropertySelector, Select, Sort, NoteStatus};\nuse dep::protocol_types::traits::ToField;\nuse crate::note::note_interface::NoteInterface;\nuse crate::note::constants::MAX_NOTES_PER_PAGE;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N> where Note: NoteInterface<N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T\n    ) -> Self where T: ToField {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set. This isn't required in unconstrained code, but we still keep this\n        // requirement here for API consistency.\n        assert_constant(limit);\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr"},"91":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{execution::{get_chain_id, get_version, get_contract_address, get_block_number}, storage::storage_read};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr"},"93":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"97":{"source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr"},"98":{"source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::get_ovsk_app, public_keys::{PublicKeys, OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_log\n};\nuse dep::protocol_types::{hash::sha256_to_field, address::AztecAddress, abis::note_hash::NoteHash};\n\nfn compute_raw_note_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n    let encrypted_log: [u8; 416 + N * 32] = compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\n/// Encrypts a partial log and emits it. Takes recipient keys on the input and encrypts both the outgoing and incoming\n/// logs for the recipient. This is necessary because in the partial notes flow the outgoing always has to be the same\n/// as the incoming to not leak any information (typically the `from` party finalizing the partial note in public does\n/// not know who the recipient is).\npub fn encrypt_and_emit_partial_log<let M: u32>(\n    context: &mut PrivateContext,\n    log_plaintext: [u8; M],\n    recipient_keys: PublicKeys,\n    recipient: AztecAddress\n) {\n    let ovsk_app: Field  = context.request_ovsk_app(recipient_keys.ovpk_m.hash());\n\n    let encrypted_log: [u8; 352 + M] = compute_encrypted_log(\n        context.this_address(),\n        ovsk_app,\n        recipient_keys.ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n        log_plaintext\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    // Unfortunately we need to push a dummy note hash to the context here because a note log requires having\n    // a counter that corresponds to a note hash in the same call.\n    let note_hash_counter = context.side_effect_counter;\n    context.push_note_hash(5);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr"},"100":{"source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    oracle::random::random, utils::point::point_to_bytes, encrypted_logs::{header::EncryptedLogHeader},\n    keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::{OvpkM, IvpkM}}\n};\n\npub fn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P]\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = compute_outgoing_body_ciphertext(recipient, ivpk, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe {\n        random()\n    };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(plaintext: [u8; P], eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_ivpk = point_to_bytes(recipient_ivpk.to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_ivpk[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field\n    ).to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::{compute_encrypted_log, compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext},\n        keys::public_keys::{OvpkM, IvpkM}\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use dep::protocol_types::{address::AztecAddress, point::Point, scalar::Scalar};\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41, 2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239, 247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118, 183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183, 12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78, 101, 153, 0, 0, 16, 39\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n\n        let log: [u8; 448] = compute_encrypted_log(contract_address, ovsk_app, ovpk_m, ivpk_m, recipient, plaintext);\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 61, 43, 12, 98, 165, 203, 191, 154, 161, 150, 4, 239, 95, 48, 60, 159, 33, 222, 142, 102, 73, 193, 236, 145, 197, 160, 216, 254, 113, 243, 25, 244, 251, 192, 222, 35, 7, 114, 101, 35, 152, 151, 112, 24, 32, 94, 138, 71, 160, 91, 68, 131, 217, 117, 140, 19, 147, 37, 197, 192, 21, 43, 172, 239, 239, 205, 15, 110, 76, 26, 211, 42, 117, 4, 15, 135, 145, 247, 37, 73, 84, 164, 149, 250, 35, 0, 205, 105, 178, 143, 104, 98, 100, 250, 193, 154, 136, 175, 177, 109, 225, 207, 252, 147, 250, 250, 189, 117, 147, 101, 230, 132\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let ciphertext = compute_outgoing_body_ciphertext(recipient, recipient_ivpk, sender_ovsk_app, eph_sk, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        for i in 0..outgoing_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], outgoing_body_ciphertext_from_typescript[i]);\n        }\n        assert_eq(outgoing_body_ciphertext_from_typescript.len(), ciphertext.len());\n    }\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr"},"113":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"114":{"source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"116":{"source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\nunconstrained pub fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr"},"117":{"source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(storage_slot, note_type_id, serialized_note, note_hash, counter)\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter)\n    };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"119":{"source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"123":{"source":"use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(contract_address: AztecAddress, randomness: Field, encrypted_event: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(contract_address, randomness, encrypted_event, counter)\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\nunconstrained pub fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"127":{"source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"135":{"source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_positive_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_positive_sign[i]);\n        }\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_negative_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_negative_sign[i]);\n        }\n    }\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"153":{"source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr"},"154":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"157":{"source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr"},"159":{"source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"160":{"source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr"},"168":{"source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"179":{"source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext> where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr"},"221":{"source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr"},"298":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr"},"299":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"301":{"source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl <let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"305":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"306":{"source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"308":{"source":"use crate::{\n    address::{aztec_address::AztecAddress}, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"309":{"source":"use crate::{\n    address::{salted_initialization_hash::SaltedInitializationHash, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"314":{"source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"315":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"329":{"source":"use dep::aztec::{\n    context::PrivateContext, protocol_types::{address::AztecAddress},\n    note::note_getter_options::NoteGetterOptions, state_vars::PrivateSet,\n    encrypted_logs::encrypted_note_emission::encode_and_encrypt_note, keys::getters::get_public_keys\n};\nuse dep::value_note::{filter::filter_notes_min_sum, value_note::ValueNote};\n\npub struct EasyPrivateUint<Context> {\n    context: Context,\n    set: PrivateSet<ValueNote, Context>,\n    storage_slot: Field,\n}\n\n// Holds a note that can act similarly to an int.\nimpl<Context> EasyPrivateUint<Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        let set = PrivateSet::new(context, storage_slot);\n        EasyPrivateUint { context, set, storage_slot }\n    }\n}\n\nimpl EasyPrivateUint<&mut PrivateContext> {\n    // Very similar to `value_note::utils::increment`.\n    pub fn add(self, addend: u64, owner: AztecAddress, outgoing_viewer: AztecAddress) {\n        let owner_keys = get_public_keys(owner);\n        let outgoing_viewer_keys = get_public_keys(outgoing_viewer);\n        // Creates new note for the owner.\n        let mut addend_note = ValueNote::new(addend as Field, owner_keys.npk_m.hash());\n\n        // Insert the new note to the owner's set of notes.\n        // docs:start:insert\n        self.set.insert(&mut addend_note).emit(\n            encode_and_encrypt_note(\n                self.context,\n                outgoing_viewer_keys.ovpk_m,\n                owner_keys.ivpk_m,\n                owner\n            )\n        );\n        // docs:end:insert\n    }\n\n    // Very similar to `value_note::utils::decrement`.\n    pub fn sub(self, subtrahend: u64, owner: AztecAddress, outgoing_viewer: AztecAddress) {\n        let owner_keys = get_public_keys(owner);\n        let outgoing_viewer_keys = get_public_keys(outgoing_viewer);\n\n        // docs:start:pop_notes\n        let options = NoteGetterOptions::with_filter(filter_notes_min_sum, subtrahend as Field);\n        let notes = self.set.pop_notes(options);\n        // docs:end:pop_notes\n\n        let mut minuend: u64 = 0;\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n\n                minuend += note.value as u64;\n            }\n        }\n\n        assert(minuend >= subtrahend);\n\n        // Creates change note for the owner.\n        let result_value = minuend - subtrahend;\n        let mut result_note = ValueNote::new(result_value as Field, owner_keys.npk_m.hash());\n        self.set.insert(&mut result_note).emit(\n            encode_and_encrypt_note(\n                self.context,\n                outgoing_viewer_keys.ovpk_m,\n                owner_keys.ivpk_m,\n                owner\n            )\n        );\n    }\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/easy-private-state/src/easy_private_uint.nr"},"334":{"source":"use dep::aztec::{\n    protocol_types::{traits::Serialize, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note,\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext\n};\n\nglobal VALUE_NOTE_LEN: u32 = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n// ValueNote is used as fn parameter in the Claim contract, so it has to implement the Serialize trait.\n// It is important that the order of these annotations is preserved so that derive(Serialize) runs AFTER the note macro, which injects the note header.\n#[note]\n#[derive(Serialize)]\npub struct ValueNote {\n    value: Field,\n   // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NullifiableNote for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        let header = NoteHeader::empty();\n        ValueNote { value, npk_m_hash, randomness, header }\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n","path":"/Users/kim/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/value-note/src/value_note.nr"}}}